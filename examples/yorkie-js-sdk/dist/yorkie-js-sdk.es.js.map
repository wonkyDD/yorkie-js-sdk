{"version":3,"file":"yorkie-js-sdk.es.js","sources":["../node_modules/@connectrpc/connect/dist/esm/code.js","../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js","../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js","../node_modules/@bufbuild/protobuf/dist/esm/message.js","../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js","../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js","../node_modules/@bufbuild/protobuf/dist/esm/field.js","../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js","../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js","../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js","../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js","../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js","../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js","../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js","../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js","../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js","../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js","../node_modules/@bufbuild/protobuf/dist/esm/private/names.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field.js","../node_modules/@bufbuild/protobuf/dist/esm/proto3.js","../node_modules/@bufbuild/protobuf/dist/esm/service-type.js","../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/timestamp_pb.js","../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/any_pb.js","../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/wrappers_pb.js","../node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js","../node_modules/@connectrpc/connect/dist/esm/connect-error.js","../node_modules/@connectrpc/connect/dist/esm/http-headers.js","../node_modules/@connectrpc/connect/dist/esm/any-client.js","../node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js","../node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js","../node_modules/@connectrpc/connect/dist/esm/promise-client.js","../node_modules/@connectrpc/connect/dist/esm/protocol/signals.js","../node_modules/@connectrpc/connect/dist/esm/context-values.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc-web/trailer.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/headers.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc-web/headers.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc-web/content-type.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/gen/status_pb.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/trailer-status.js","../node_modules/@connectrpc/connect/dist/esm/protocol/create-method-url.js","../node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js","../node_modules/@connectrpc/connect/dist/esm/protocol/serialization.js","../node_modules/@connectrpc/connect/dist/esm/protocol/run-call.js","../node_modules/@connectrpc/connect-web/dist/esm/assert-fetch-api.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/validate-trailer.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc-web/request-header.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/http-status.js","../node_modules/@connectrpc/connect/dist/esm/protocol-grpc-web/validate-response.js","../node_modules/@connectrpc/connect-web/dist/esm/grpc-web-transport.js","../src/api/yorkie/v1/resources_pb.js","../src/api/yorkie/v1/yorkie_pb.js","../src/api/yorkie/v1/yorkie_connect.js","../node_modules/long/index.js","../src/util/error.ts","../src/util/object.ts","../src/document/presence/presence.ts","../src/document/time/actor_id.ts","../src/document/time/ticket.ts","../src/util/logger.ts","../src/document/json/strings.ts","../src/document/crdt/element.ts","../src/document/crdt/element_rht.ts","../src/document/crdt/object.ts","../src/document/operation/operation.ts","../src/util/splay_tree.ts","../src/document/crdt/primitive.ts","../src/document/crdt/rga_tree_list.ts","../src/document/crdt/array.ts","../src/document/operation/remove_operation.ts","../src/document/operation/set_operation.ts","../src/document/operation/add_operation.ts","../src/document/operation/move_operation.ts","../src/document/crdt/rht.ts","../src/document/crdt/text.ts","../src/document/operation/edit_operation.ts","../src/document/operation/style_operation.ts","../src/util/index_tree.ts","../src/util/comparator.ts","../src/util/llrb_tree.ts","../src/document/crdt/tree.ts","../src/document/operation/tree_edit_operation.ts","../src/document/change/change_id.ts","../src/document/change/change.ts","../src/document/change/change_pack.ts","../src/document/change/checkpoint.ts","../src/document/crdt/rga_tree_split.ts","../src/util/number.ts","../src/document/crdt/counter.ts","../src/document/operation/increase_operation.ts","../src/document/operation/tree_style_operation.ts","../src/api/converter.ts","../src/util/uuid.ts","../src/client/attachment.ts","../src/util/observable.ts","../src/document/change/context.ts","../src/document/crdt/root.ts","../src/document/json/object.ts","../src/document/json/array.ts","../src/document/json/text.ts","../src/document/json/counter.ts","../src/document/json/tree.ts","../src/document/json/element.ts","../src/document/history.ts","../src/devtools/protocol.ts","../src/devtools/index.ts","../src/document/document.ts","../src/client/auth_interceptor.ts","../src/client/metric_interceptor.ts","../src/client/client.ts","../src/yorkie.ts"],"sourcesContent":["// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Connect represents categories of errors as codes, and each code maps to a\n * specific HTTP status code. The codes and their semantics were chosen to\n * match gRPC. Only the codes below are valid â€” there are no user-defined\n * codes.\n *\n * See the specification at https://connectrpc.com/docs/protocol#error-codes\n * for details.\n */\nexport var Code;\n(function (Code) {\n    /**\n     * Canceled, usually be the user\n     */\n    Code[Code[\"Canceled\"] = 1] = \"Canceled\";\n    /**\n     * Unknown error\n     */\n    Code[Code[\"Unknown\"] = 2] = \"Unknown\";\n    /**\n     * Argument invalid regardless of system state\n     */\n    Code[Code[\"InvalidArgument\"] = 3] = \"InvalidArgument\";\n    /**\n     * Operation expired, may or may not have completed.\n     */\n    Code[Code[\"DeadlineExceeded\"] = 4] = \"DeadlineExceeded\";\n    /**\n     * Entity not found.\n     */\n    Code[Code[\"NotFound\"] = 5] = \"NotFound\";\n    /**\n     * Entity already exists.\n     */\n    Code[Code[\"AlreadyExists\"] = 6] = \"AlreadyExists\";\n    /**\n     * Operation not authorized.\n     */\n    Code[Code[\"PermissionDenied\"] = 7] = \"PermissionDenied\";\n    /**\n     * Quota exhausted.\n     */\n    Code[Code[\"ResourceExhausted\"] = 8] = \"ResourceExhausted\";\n    /**\n     * Argument invalid in current system state.\n     */\n    Code[Code[\"FailedPrecondition\"] = 9] = \"FailedPrecondition\";\n    /**\n     * Operation aborted.\n     */\n    Code[Code[\"Aborted\"] = 10] = \"Aborted\";\n    /**\n     * Out of bounds, use instead of FailedPrecondition.\n     */\n    Code[Code[\"OutOfRange\"] = 11] = \"OutOfRange\";\n    /**\n     * Operation not implemented or disabled.\n     */\n    Code[Code[\"Unimplemented\"] = 12] = \"Unimplemented\";\n    /**\n     * Internal error, reserved for \"serious errors\".\n     */\n    Code[Code[\"Internal\"] = 13] = \"Internal\";\n    /**\n     * Unavailable, client should back off and retry.\n     */\n    Code[Code[\"Unavailable\"] = 14] = \"Unavailable\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    Code[Code[\"DataLoss\"] = 15] = \"DataLoss\";\n    /**\n     * Request isn't authenticated.\n     */\n    Code[Code[\"Unauthenticated\"] = 16] = \"Unauthenticated\";\n})(Code || (Code = {}));\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nexport function makeProtoRuntime(syntax, json, bin, util) {\n    return {\n        syntax,\n        json,\n        bin,\n        util,\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n    };\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (value instanceof Message || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { LongType, ScalarType } from \"../field.js\";\nimport { WireType } from \"../binary-encoding.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the default value for the given scalar type, following\n * proto3 semantics.\n */\nexport function scalarDefaultValue(type, longType) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return longType == 0 ? protoInt64.zero : \"0\";\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\nexport function scalarTypeInfo(type, value) {\n    const isUndefined = value === undefined;\n    let wireType = WireType.Varint;\n    let isIntrinsicDefault = value === 0;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.STRING:\n            isIntrinsicDefault = isUndefined || !value.length;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.BOOL:\n            isIntrinsicDefault = value === false;\n            break;\n        case ScalarType.DOUBLE:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.INT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.UINT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.FIXED64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.BYTES:\n            isIntrinsicDefault = isUndefined || !value.byteLength;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.FIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.SINT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method, isUndefined || isIntrinsicDefault];\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { LongType, ScalarType } from \"../field.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarDefaultValue, scalarTypeInfo } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormatCommon() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\n            const type = message.getType();\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            const end = delimitedMessageEncoding\n                ? reader.len\n                : reader.pos + lengthOrEndTagFieldNo;\n            let fieldNo, wireType;\n            while (reader.pos < end) {\n                [fieldNo, wireType] = reader.tag();\n                if (wireType == WireType.EndGroup) {\n                    break;\n                }\n                const field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                let target = message, repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    target = target[field.oneof.localName];\n                    if (target.case != localName) {\n                        delete target.value;\n                    }\n                    target.case = localName;\n                    localName = \"value\";\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        let read = readScalar;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n                        if (field.kind == \"scalar\" && field.L > 0) {\n                            read = readScalarLTString;\n                        }\n                        if (repeated) {\n                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                            if (wireType == WireType.LengthDelimited &&\n                                scalarType != ScalarType.STRING &&\n                                scalarType != ScalarType.BYTES) {\n                                let e = reader.uint32() + reader.pos;\n                                while (reader.pos < e) {\n                                    arr.push(read(reader, scalarType));\n                                }\n                            }\n                            else {\n                                arr.push(read(reader, scalarType));\n                            }\n                        }\n                        else {\n                            target[localName] = read(reader, scalarType);\n                        }\n                        break;\n                    case \"message\":\n                        const messageType = field.T;\n                        if (repeated) {\n                            // safe to assume presence of array, oneof cannot contain repeated values\n                            target[localName].push(readMessageField(reader, new messageType(), options, field));\n                        }\n                        else {\n                            if (target[localName] instanceof Message) {\n                                readMessageField(reader, target[localName], options, field);\n                            }\n                            else {\n                                target[localName] = readMessageField(reader, new messageType(), options, field);\n                                if (messageType.fieldWrapper &&\n                                    !field.oneof &&\n                                    !field.repeated) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                        }\n                        break;\n                    case \"map\":\n                        let [mapKey, mapVal] = readMapEntry(field, reader, options);\n                        // safe to assume presence of map object, oneof cannot contain repeated values\n                        target[localName][mapKey] = mapVal;\n                        break;\n                }\n            }\n            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n                (wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\n                throw new Error(`invalid end group tag`);\n            }\n        },\n    };\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options, field) {\n    const format = message.getType().runtime.bin;\n    const delimited = field === null || field === void 0 ? void 0 : field.delimited;\n    format.readMessage(message, reader, delimited ? field === null || field === void 0 ? void 0 : field.no : reader.uint32(), // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n    options, delimited);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        let [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options, undefined);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        let keyRaw = scalarDefaultValue(field.K, LongType.BIGINT);\n        key =\n            field.K == ScalarType.BOOL\n                ? keyRaw.toString()\n                : keyRaw;\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarDefaultValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = 0;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nexport function readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue, true);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value, true);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value, true);\n            break;\n        case \"message\":\n            writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));\n            break;\n    }\n    writer.join();\n}\nexport function writeMessageField(writer, options, field, value) {\n    if (value !== undefined) {\n        const message = wrapField(field.T, value);\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (field === null || field === void 0 ? void 0 : field.delimited)\n            writer\n                .tag(field.no, WireType.StartGroup)\n                .raw(message.toBinary(options))\n                .tag(field.no, WireType.EndGroup);\n        else\n            writer\n                .tag(field.no, WireType.LengthDelimited)\n                .bytes(message.toBinary(options));\n    }\n}\nexport function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {\n    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);\n    if (!isIntrinsicDefault || emitIntrinsicDefault) {\n        writer.tag(fieldNo, wireType)[method](value);\n    }\n}\nexport function writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"../field.js\";\nimport { makeBinaryFormatCommon, writeMapEntry, writeMessageField, writePacked, writeScalar, } from \"./binary-format-common.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */\nexport function makeBinaryFormatProto3() {\n    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                let value, // this will be our field value, whether it is member of a oneof or regular field\n                repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    const oneof = message[field.oneof.localName];\n                    if (oneof.case !== localName) {\n                        continue; // field is not selected, skip\n                    }\n                    value = oneof.value;\n                }\n                else {\n                    value = message[localName];\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        if (repeated) {\n                            if (field.packed) {\n                                writePacked(writer, scalarType, field.no, value);\n                            }\n                            else {\n                                for (const item of value) {\n                                    writeScalar(writer, scalarType, field.no, item, true);\n                                }\n                            }\n                        }\n                        else {\n                            if (value !== undefined) {\n                                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);\n                            }\n                        }\n                        break;\n                    case \"message\":\n                        if (repeated) {\n                            for (const item of value) {\n                                writeMessageField(writer, options, field, item);\n                            }\n                        }\n                        else {\n                            writeMessageField(writer, options, field, value);\n                        }\n                        break;\n                    case \"map\":\n                        for (const [key, val] of Object.entries(value)) {\n                            writeMapEntry(writer, options, field, key, val);\n                        }\n                        break;\n                }\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        } });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { LongType, ScalarType } from \"../field.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nexport function makeJsonFormatCommon(makeWriteField) {\n    const writeField = makeWriteField(writeEnum, writeScalar);\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = {};\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (!field) {\n                    if (!options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                    continue;\n                }\n                let localName = field.localName;\n                let target = message;\n                if (field.oneof) {\n                    if (jsonValue === null && field.kind == \"scalar\") {\n                        // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                        continue;\n                    }\n                    const seen = oneofSeen[field.oneof.localName];\n                    if (seen) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                    }\n                    oneofSeen[field.oneof.localName] = jsonKey;\n                    target = target[field.oneof.localName] = { case: localName };\n                    localName = \"value\";\n                }\n                if (field.repeated) {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (!Array.isArray(jsonValue)) {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetArray = target[localName];\n                    for (const jsonItem of jsonValue) {\n                        if (jsonItem === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);\n                        }\n                        let val;\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- \"map\" is invalid for repeated fields\n                        switch (field.kind) {\n                            case \"message\":\n                                val = field.T.fromJson(jsonItem, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.T, jsonItem, field.L);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        targetArray.push(val);\n                    }\n                }\n                else if (field.kind == \"map\") {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (Array.isArray(jsonValue) || typeof jsonValue != \"object\") {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetMap = target[localName];\n                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n                        if (jsonMapValue === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);\n                        }\n                        let val;\n                        switch (field.V.kind) {\n                            case \"message\":\n                                val = field.V.T.fromJson(jsonMapValue, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.V.T, jsonMapValue, LongType.BIGINT);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        try {\n                            targetMap[readScalar(field.K, field.K == ScalarType.BOOL\n                                ? jsonMapKey == \"true\"\n                                    ? true\n                                    : jsonMapKey == \"false\"\n                                        ? false\n                                        : jsonMapKey\n                                : jsonMapKey, LongType.BIGINT).toString()] = val;\n                        }\n                        catch (e) {\n                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                            if (e instanceof Error && e.message.length > 0) {\n                                m += `: ${e.message}`;\n                            }\n                            throw new Error(m);\n                        }\n                    }\n                }\n                else {\n                    switch (field.kind) {\n                        case \"message\":\n                            const messageType = field.T;\n                            if (jsonValue === null &&\n                                messageType.typeName != \"google.protobuf.Value\") {\n                                if (field.oneof) {\n                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field \"${jsonKey}\"`);\n                                }\n                                continue;\n                            }\n                            if (target[localName] instanceof Message) {\n                                target[localName].fromJson(jsonValue, options);\n                            }\n                            else {\n                                target[localName] = messageType.fromJson(jsonValue, options);\n                                if (messageType.fieldWrapper && !field.oneof) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                            break;\n                        case \"enum\":\n                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);\n                            if (enumValue !== undefined) {\n                                target[localName] = enumValue;\n                            }\n                            break;\n                        case \"scalar\":\n                            try {\n                                target[localName] = readScalar(field.T, jsonValue, field.L);\n                            }\n                            catch (e) {\n                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                if (e instanceof Error && e.message.length > 0) {\n                                    m += `: ${e.message}`;\n                                }\n                                throw new Error(m);\n                            }\n                            break;\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (const member of type.fields.byMember()) {\n                    let jsonValue;\n                    if (member.kind == \"oneof\") {\n                        const oneof = message[member.localName];\n                        if (oneof.value === undefined) {\n                            continue;\n                        }\n                        field = member.findField(oneof.case);\n                        if (!field) {\n                            throw \"oneof case not found: \" + oneof.case;\n                        }\n                        jsonValue = writeField(field, oneof.value, options);\n                    }\n                    else {\n                        field = member;\n                        jsonValue = writeField(field, message[field.localName], options);\n                    }\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar,\n        writeScalar,\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// May throw an error. If the error message is non-blank, it should be shown.\n// It is up to the caller to provide context.\nfunction readScalar(type, json, longType) {\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === null)\n                return 0.0;\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            if (json === null)\n                return 0;\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (json === null)\n                return false;\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (json === null)\n                return \"\";\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === null || json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields) {\n    if (json === null) {\n        // proto3 requires 0 to be default value for all enums\n        return 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n            if (value || ignoreUnknownFields) {\n                return value === null || value === void 0 ? void 0 : value.no;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\nfunction writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {\n    var _a;\n    if (value === undefined) {\n        return value;\n    }\n    if (value === 0 && !emitIntrinsicDefault) {\n        // proto3 requires 0 to be default value for all enums\n        return undefined;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value, emitIntrinsicDefault) {\n    if (value === undefined) {\n        return undefined;\n    }\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value != 0 || emitIntrinsicDefault ? value : undefined;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value !== 0 || emitIntrinsicDefault ? value : undefined;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value.length > 0 || emitIntrinsicDefault ? value : undefined;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value || emitIntrinsicDefault ? value : undefined;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            // We use implicit conversion with `value != 0` to catch both 0n and \"0\"\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return emitIntrinsicDefault || value != 0\n                ? value.toString(10)\n                : undefined;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return emitIntrinsicDefault || value.byteLength > 0\n                ? protoBase64.enc(value)\n                : undefined;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { wrapField } from \"./field-wrapper.js\";\nimport { assert } from \"./assert.js\";\nimport { makeJsonFormatCommon } from \"./json-format-common.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nexport function makeJsonFormatProto3() {\n    return makeJsonFormatCommon((writeEnum, writeScalar) => {\n        return function writeField(field, value, options) {\n            if (field.kind == \"map\") {\n                const jsonObj = {};\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            const val = writeScalar(field.V.T, entryValue, true);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                    case \"message\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            // JSON standard allows only (double quoted) string as property key\n                            jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                        }\n                        break;\n                    case \"enum\":\n                        const enumType = field.V.T;\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            assert(entryValue === undefined || typeof entryValue == \"number\");\n                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || Object.keys(jsonObj).length > 0\n                    ? jsonObj\n                    : undefined;\n            }\n            else if (field.repeated) {\n                const jsonArr = [];\n                switch (field.kind) {\n                    case \"scalar\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeScalar(field.T, value[i], true));\n                        }\n                        break;\n                    case \"enum\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));\n                        }\n                        break;\n                    case \"message\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(wrapField(field.T, value[i]).toJson(options));\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || jsonArr.length > 0\n                    ? jsonArr\n                    : undefined;\n            }\n            else {\n                switch (field.kind) {\n                    case \"scalar\":\n                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);\n                    case \"enum\":\n                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);\n                    case \"message\":\n                        return value !== undefined\n                            ? wrapField(field.T, value).toJson(options)\n                            : undefined;\n                }\n            }\n        };\n    });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\nimport { scalarEquals } from \"./scalars.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] === undefined) {\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !(val instanceof sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => val instanceof mt ? val : new mt(val));\n                        }\n                        else if (s[localName] !== undefined) {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = val instanceof mt ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (value instanceof Message) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix === undefined) {\n                return desc.name;\n            }\n            const name = desc.name.substring(sharedPrefix.length);\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { makeBinaryFormatProto3 } from \"./private/binary-format-proto3.js\";\nimport { makeJsonFormatProto3 } from \"./private/json-format-proto3.js\";\nimport { makeUtilCommon } from \"./private/util-common.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarDefaultValue } from \"./private/scalars.js\";\nimport { LongType, ScalarType } from \"./field.js\";\nimport { InternalOneofInfo } from \"./private/field.js\";\nimport { localFieldName, fieldJsonName } from \"./private/names.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList(fields) {\n        return new InternalFieldList(fields, normalizeFieldInfosProto3);\n    },\n    initFields(target) {\n        for (const member of target.getType().fields.byMember()) {\n            if (member.opt) {\n                continue;\n            }\n            const name = member.localName, t = target;\n            if (member.repeated) {\n                t[name] = [];\n                continue;\n            }\n            switch (member.kind) {\n                case \"oneof\":\n                    t[name] = { case: undefined };\n                    break;\n                case \"enum\":\n                    t[name] = 0;\n                    break;\n                case \"map\":\n                    t[name] = {};\n                    break;\n                case \"scalar\":\n                    t[name] = scalarDefaultValue(member.T, member.L); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n                    break;\n                case \"message\":\n                    // message fields are always optional in proto3\n                    break;\n            }\n        }\n    } }));\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nfunction normalizeFieldInfosProto3(fieldInfos) {\n    var _a, _b, _c, _d;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        // proto3 specific:\n        if (field.kind == \"message\") {\n            f.delimited = false;\n        }\n        // From the proto3 language guide:\n        // > In proto3, repeated fields of scalar numeric types are packed by default.\n        // This information is incomplete - according to the conformance tests, BOOL\n        // and ENUM are packed by default as well. This means only STRING and BYTES\n        // are not packed by default, which makes sense because they are length-delimited.\n        f.packed =\n            (_d = field.packed) !== null && _d !== void 0 ? _d : (field.kind == \"enum\" ||\n                (field.kind == \"scalar\" &&\n                    field.T != ScalarType.BYTES &&\n                    field.T != ScalarType.STRING));\n        r.push(f);\n    }\n    return r;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */\nexport var MethodKind;\n(function (MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */\nexport var MethodIdempotency;\n(function (MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n * @generated from message google.protobuf.Timestamp\n */\nexport class Timestamp extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Represents seconds of UTC time since Unix epoch\n         * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n         * 9999-12-31T23:59:59Z inclusive.\n         *\n         * @generated from field: int64 seconds = 1;\n         */\n        this.seconds = protoInt64.zero;\n        /**\n         * Non-negative fractions of a second at nanosecond resolution. Negative\n         * second values with fractions must still have non-negative nanos values\n         * that count forward in time. Must be from 0 to 999,999,999\n         * inclusive.\n         *\n         * @generated from field: int32 nanos = 2;\n         */\n        this.nanos = 0;\n        proto3.util.initPartial(data, this);\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${proto3.json.debug(json)}`);\n        }\n        const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        const ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        this.seconds = protoInt64.parse(ms / 1000);\n        this.nanos = 0;\n        if (matches[7]) {\n            this.nanos = (parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000);\n        }\n        return this;\n    }\n    toJson(options) {\n        const ms = Number(this.seconds) * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        if (this.nanos < 0) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative`);\n        }\n        let z = \"Z\";\n        if (this.nanos > 0) {\n            const nanosStr = (this.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") {\n                z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            }\n            else if (nanosStr.substring(6) === \"000\") {\n                z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            }\n            else {\n                z = \".\" + nanosStr + \"Z\";\n            }\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    toDate() {\n        return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));\n    }\n    static now() {\n        return Timestamp.fromDate(new Date());\n    }\n    static fromDate(date) {\n        const ms = date.getTime();\n        return new Timestamp({\n            seconds: protoInt64.parse(Math.floor(ms / 1000)),\n            nanos: (ms % 1000) * 1000000,\n        });\n    }\n    static fromBinary(bytes, options) {\n        return new Timestamp().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Timestamp().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Timestamp().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Timestamp, a, b);\n    }\n}\nTimestamp.runtime = proto3;\nTimestamp.typeName = \"google.protobuf.Timestamp\";\nTimestamp.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"seconds\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"nanos\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `Any` contains an arbitrary serialized protocol buffer message along with a\n * URL that describes the type of the serialized message.\n *\n * Protobuf library provides support to pack/unpack Any values in the form\n * of utility functions or additional generated methods of the Any type.\n *\n * Example 1: Pack and unpack a message in C++.\n *\n *     Foo foo = ...;\n *     Any any;\n *     any.PackFrom(foo);\n *     ...\n *     if (any.UnpackTo(&foo)) {\n *       ...\n *     }\n *\n * Example 2: Pack and unpack a message in Java.\n *\n *     Foo foo = ...;\n *     Any any = Any.pack(foo);\n *     ...\n *     if (any.is(Foo.class)) {\n *       foo = any.unpack(Foo.class);\n *     }\n *     // or ...\n *     if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n *       foo = any.unpack(Foo.getDefaultInstance());\n *     }\n *\n *  Example 3: Pack and unpack a message in Python.\n *\n *     foo = Foo(...)\n *     any = Any()\n *     any.Pack(foo)\n *     ...\n *     if any.Is(Foo.DESCRIPTOR):\n *       any.Unpack(foo)\n *       ...\n *\n *  Example 4: Pack and unpack a message in Go\n *\n *      foo := &pb.Foo{...}\n *      any, err := anypb.New(foo)\n *      if err != nil {\n *        ...\n *      }\n *      ...\n *      foo := &pb.Foo{}\n *      if err := any.UnmarshalTo(foo); err != nil {\n *        ...\n *      }\n *\n * The pack methods provided by protobuf library will by default use\n * 'type.googleapis.com/full.type.name' as the type URL and the unpack\n * methods only use the fully qualified type name after the last '/'\n * in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n * name \"y.z\".\n *\n * JSON\n * ====\n * The JSON representation of an `Any` value uses the regular\n * representation of the deserialized, embedded message, with an\n * additional field `@type` which contains the type URL. Example:\n *\n *     package google.profile;\n *     message Person {\n *       string first_name = 1;\n *       string last_name = 2;\n *     }\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.profile.Person\",\n *       \"firstName\": <string>,\n *       \"lastName\": <string>\n *     }\n *\n * If the embedded message type is well-known and has a custom JSON\n * representation, that representation will be embedded adding a field\n * `value` which holds the custom JSON in addition to the `@type`\n * field. Example (for message [google.protobuf.Duration][]):\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n *       \"value\": \"1.212s\"\n *     }\n *\n *\n * @generated from message google.protobuf.Any\n */\nexport class Any extends Message {\n    constructor(data) {\n        super();\n        /**\n         * A URL/resource name that uniquely identifies the type of the serialized\n         * protocol buffer message. This string must contain at least\n         * one \"/\" character. The last segment of the URL's path must represent\n         * the fully qualified name of the type (as in\n         * `path/google.protobuf.Duration`). The name should be in a canonical form\n         * (e.g., leading \".\" is not accepted).\n         *\n         * In practice, teams usually precompile into the binary all types that they\n         * expect it to use in the context of Any. However, for URLs which use the\n         * scheme `http`, `https`, or no scheme, one can optionally set up a type\n         * server that maps type URLs to message definitions as follows:\n         *\n         * * If no scheme is provided, `https` is assumed.\n         * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n         *   value in binary format, or produce an error.\n         * * Applications are allowed to cache lookup results based on the\n         *   URL, or have them precompiled into a binary to avoid any\n         *   lookup. Therefore, binary compatibility needs to be preserved\n         *   on changes to types. (Use versioned type names to manage\n         *   breaking changes.)\n         *\n         * Note: this functionality is not currently available in the official\n         * protobuf release, and it is not used for type URLs beginning with\n         * type.googleapis.com. As of May 2023, there are no widely used type server\n         * implementations and no plans to implement one.\n         *\n         * Schemes other than `http`, `https` (or the empty scheme) might be\n         * used with implementation specific semantics.\n         *\n         *\n         * @generated from field: string type_url = 1;\n         */\n        this.typeUrl = \"\";\n        /**\n         * Must be a valid serialized protocol buffer of the above specified type.\n         *\n         * @generated from field: bytes value = 2;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        var _a;\n        if (this.typeUrl === \"\") {\n            return {};\n        }\n        const typeName = this.typeUrlToName(this.typeUrl);\n        const messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot encode message google.protobuf.Any to JSON: \"${this.typeUrl}\" is not in the type registry`);\n        }\n        const message = messageType.fromBinary(this.value);\n        let json = message.toJson(options);\n        if (typeName.startsWith(\"google.protobuf.\") || (json === null || Array.isArray(json) || typeof json !== \"object\")) {\n            json = { value: json };\n        }\n        json[\"@type\"] = this.typeUrl;\n        return json;\n    }\n    fromJson(json, options) {\n        var _a;\n        if (json === null || Array.isArray(json) || typeof json != \"object\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? \"null\" : Array.isArray(json) ? \"array\" : typeof json}`);\n        }\n        if (Object.keys(json).length == 0) {\n            return this;\n        }\n        const typeUrl = json[\"@type\"];\n        if (typeof typeUrl != \"string\" || typeUrl == \"\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: \"@type\" is empty`);\n        }\n        const typeName = this.typeUrlToName(typeUrl), messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);\n        }\n        let message;\n        if (typeName.startsWith(\"google.protobuf.\") && Object.prototype.hasOwnProperty.call(json, \"value\")) {\n            message = messageType.fromJson(json[\"value\"], options);\n        }\n        else {\n            const copy = Object.assign({}, json);\n            delete copy[\"@type\"];\n            message = messageType.fromJson(copy, options);\n        }\n        this.packFrom(message);\n        return this;\n    }\n    packFrom(message) {\n        this.value = message.toBinary();\n        this.typeUrl = this.typeNameToUrl(message.getType().typeName);\n    }\n    unpackTo(target) {\n        if (!this.is(target.getType())) {\n            return false;\n        }\n        target.fromBinary(this.value);\n        return true;\n    }\n    unpack(registry) {\n        if (this.typeUrl === \"\") {\n            return undefined;\n        }\n        const messageType = registry.findMessage(this.typeUrlToName(this.typeUrl));\n        if (!messageType) {\n            return undefined;\n        }\n        return messageType.fromBinary(this.value);\n    }\n    is(type) {\n        if (this.typeUrl === '') {\n            return false;\n        }\n        const name = this.typeUrlToName(this.typeUrl);\n        let typeName = '';\n        if (typeof type === 'string') {\n            typeName = type;\n        }\n        else {\n            typeName = type.typeName;\n        }\n        return name === typeName;\n    }\n    typeNameToUrl(name) {\n        return `type.googleapis.com/${name}`;\n    }\n    typeUrlToName(url) {\n        if (!url.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        const slash = url.lastIndexOf(\"/\");\n        const name = slash >= 0 ? url.substring(slash + 1) : url;\n        if (!name.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        return name;\n    }\n    static pack(message) {\n        const any = new Any();\n        any.packFrom(message);\n        return any;\n    }\n    static fromBinary(bytes, options) {\n        return new Any().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Any().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Any().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Any, a, b);\n    }\n}\nAny.runtime = proto3;\nAny.typeName = \"google.protobuf.Any\";\nAny.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\nimport { ScalarType } from \"../../field.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\n/**\n * Wrapper message for `double`.\n *\n * The JSON representation for `DoubleValue` is JSON number.\n *\n * @generated from message google.protobuf.DoubleValue\n */\nexport class DoubleValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The double value.\n         *\n         * @generated from field: double value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.DOUBLE, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.DOUBLE, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.DoubleValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new DoubleValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DoubleValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DoubleValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(DoubleValue, a, b);\n    }\n}\nDoubleValue.runtime = proto3;\nDoubleValue.typeName = \"google.protobuf.DoubleValue\";\nDoubleValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n]);\nDoubleValue.fieldWrapper = {\n    wrapField(value) {\n        return new DoubleValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `float`.\n *\n * The JSON representation for `FloatValue` is JSON number.\n *\n * @generated from message google.protobuf.FloatValue\n */\nexport class FloatValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The float value.\n         *\n         * @generated from field: float value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.FLOAT, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.FLOAT, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.FloatValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new FloatValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FloatValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FloatValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(FloatValue, a, b);\n    }\n}\nFloatValue.runtime = proto3;\nFloatValue.typeName = \"google.protobuf.FloatValue\";\nFloatValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n]);\nFloatValue.fieldWrapper = {\n    wrapField(value) {\n        return new FloatValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int64`.\n *\n * The JSON representation for `Int64Value` is JSON string.\n *\n * @generated from message google.protobuf.Int64Value\n */\nexport class Int64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int64 value.\n         *\n         * @generated from field: int64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int64Value, a, b);\n    }\n}\nInt64Value.runtime = proto3;\nInt64Value.typeName = \"google.protobuf.Int64Value\";\nInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n]);\nInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint64`.\n *\n * The JSON representation for `UInt64Value` is JSON string.\n *\n * @generated from message google.protobuf.UInt64Value\n */\nexport class UInt64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint64 value.\n         *\n         * @generated from field: uint64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt64Value, a, b);\n    }\n}\nUInt64Value.runtime = proto3;\nUInt64Value.typeName = \"google.protobuf.UInt64Value\";\nUInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n]);\nUInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int32`.\n *\n * The JSON representation for `Int32Value` is JSON number.\n *\n * @generated from message google.protobuf.Int32Value\n */\nexport class Int32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int32 value.\n         *\n         * @generated from field: int32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int32Value, a, b);\n    }\n}\nInt32Value.runtime = proto3;\nInt32Value.typeName = \"google.protobuf.Int32Value\";\nInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\nInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint32`.\n *\n * The JSON representation for `UInt32Value` is JSON number.\n *\n * @generated from message google.protobuf.UInt32Value\n */\nexport class UInt32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint32 value.\n         *\n         * @generated from field: uint32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt32Value, a, b);\n    }\n}\nUInt32Value.runtime = proto3;\nUInt32Value.typeName = \"google.protobuf.UInt32Value\";\nUInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n]);\nUInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bool`.\n *\n * The JSON representation for `BoolValue` is JSON `true` and `false`.\n *\n * @generated from message google.protobuf.BoolValue\n */\nexport class BoolValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bool value.\n         *\n         * @generated from field: bool value = 1;\n         */\n        this.value = false;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BOOL, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BOOL, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BoolValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BoolValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BoolValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BoolValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BoolValue, a, b);\n    }\n}\nBoolValue.runtime = proto3;\nBoolValue.typeName = \"google.protobuf.BoolValue\";\nBoolValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n]);\nBoolValue.fieldWrapper = {\n    wrapField(value) {\n        return new BoolValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `string`.\n *\n * The JSON representation for `StringValue` is JSON string.\n *\n * @generated from message google.protobuf.StringValue\n */\nexport class StringValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The string value.\n         *\n         * @generated from field: string value = 1;\n         */\n        this.value = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.STRING, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.STRING, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.StringValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new StringValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new StringValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new StringValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(StringValue, a, b);\n    }\n}\nStringValue.runtime = proto3;\nStringValue.typeName = \"google.protobuf.StringValue\";\nStringValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\nStringValue.fieldWrapper = {\n    wrapField(value) {\n        return new StringValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bytes`.\n *\n * The JSON representation for `BytesValue` is JSON string.\n *\n * @generated from message google.protobuf.BytesValue\n */\nexport class BytesValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bytes value.\n         *\n         * @generated from field: bytes value = 1;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BYTES, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BYTES, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BytesValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BytesValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BytesValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BytesValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BytesValue, a, b);\n    }\n}\nBytesValue.runtime = proto3;\nBytesValue.typeName = \"google.protobuf.BytesValue\";\nBytesValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\nBytesValue.fieldWrapper = {\n    wrapField(value) {\n        return new BytesValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * codeToString returns the string representation of a Code.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeToString(value) {\n    const name = Code[value];\n    if (typeof name != \"string\") {\n        return value.toString();\n    }\n    return (name[0].toLowerCase() +\n        name.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c.toLowerCase()));\n}\nlet stringToCode;\n/**\n * codeFromString parses the string representation of a Code in snake_case.\n * For example, the string \"permission_denied\" parses into Code.PermissionDenied.\n *\n * If the given string cannot be parsed, the function returns undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromString(value) {\n    if (!stringToCode) {\n        stringToCode = {};\n        for (const value of Object.values(Code)) {\n            if (typeof value == \"string\") {\n                continue;\n            }\n            stringToCode[codeToString(value)] = value;\n        }\n    }\n    return stringToCode[value];\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"./code.js\";\nimport { Message } from \"@bufbuild/protobuf\";\nimport { codeToString } from \"./protocol-connect/code-string.js\";\n/**\n * ConnectError captures four pieces of information: a Code, an error\n * message, an optional cause of the error, and an optional collection of\n * arbitrary Protobuf messages called  \"details\".\n *\n * Because developer tools typically show just the error message, we prefix\n * it with the status code, so that the most important information is always\n * visible immediately.\n *\n * Error details are wrapped with google.protobuf.Any on the wire, so that\n * a server or middleware can attach arbitrary data to an error. Use the\n * method findDetails() to retrieve the details.\n */\nexport class ConnectError extends Error {\n    /**\n     * Create a new ConnectError.\n     * If no code is provided, code \"unknown\" is used.\n     * Outgoing details are only relevant for the server side - a service may\n     * raise an error with details, and it is up to the protocol implementation\n     * to encode and send the details along with error.\n     */\n    constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause) {\n        super(createMessage(message, code));\n        this.name = \"ConnectError\";\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.rawMessage = message;\n        this.code = code;\n        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});\n        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];\n        this.cause = cause;\n    }\n    /**\n     * Convert any value - typically a caught error into a ConnectError,\n     * following these rules:\n     * - If the value is already a ConnectError, return it as is.\n     * - If the value is an AbortError from the fetch API, return the message\n     *   of the AbortError with code Canceled.\n     * - For other Errors, return the error message with code Unknown by default.\n     * - For other values, return the values String representation as a message,\n     *   with the code Unknown by default.\n     * The original value will be used for the \"cause\" property for the new\n     * ConnectError.\n     */\n    static from(reason, code = Code.Unknown) {\n        if (reason instanceof ConnectError) {\n            return reason;\n        }\n        if (reason instanceof Error) {\n            if (reason.name == \"AbortError\") {\n                // Fetch requests can only be canceled with an AbortController.\n                // We detect that condition by looking at the name of the raised\n                // error object, and translate to the appropriate status code.\n                return new ConnectError(reason.message, Code.Canceled);\n            }\n            return new ConnectError(reason.message, code, undefined, undefined, reason);\n        }\n        return new ConnectError(String(reason), code, undefined, undefined, reason);\n    }\n    findDetails(typeOrRegistry) {\n        const registry = \"typeName\" in typeOrRegistry\n            ? {\n                findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined,\n            }\n            : typeOrRegistry;\n        const details = [];\n        for (const data of this.details) {\n            if (data instanceof Message) {\n                if (registry.findMessage(data.getType().typeName)) {\n                    details.push(data);\n                }\n                continue;\n            }\n            const type = registry.findMessage(data.type);\n            if (type) {\n                try {\n                    details.push(type.fromBinary(data.value));\n                }\n                catch (_) {\n                    // We silently give up if we are unable to parse the detail, because\n                    // that appears to be the least worst behavior.\n                    // It is very unlikely that a user surrounds a catch body handling the\n                    // error with another try-catch statement, and we do not want to\n                    // recommend doing so.\n                }\n            }\n        }\n        return details;\n    }\n}\n/**\n * Create an error message, prefixing the given code.\n */\nfunction createMessage(message, code) {\n    return message.length\n        ? `[${codeToString(code)}] ${message}`\n        : `[${codeToString(code)}]`;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message, protoBase64 } from \"@bufbuild/protobuf\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\n/**\n * Encode a single binary header value according to the Connect\n * and gRPC specifications.\n *\n * This function accepts raw binary data from a buffer, a string\n * with UTF-8 text, or a protobuf message. It encodes the input\n * with unpadded base64 and returns a string that can be used for\n * a header whose name ends with `-bin`.\n */\nexport function encodeBinaryHeader(value) {\n    let bytes;\n    if (value instanceof Message) {\n        bytes = value.toBinary();\n    }\n    else if (typeof value == \"string\") {\n        bytes = new TextEncoder().encode(value);\n    }\n    else {\n        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    }\n    return protoBase64.enc(bytes).replace(/=+$/, \"\");\n}\nexport function decodeBinaryHeader(value, type, options) {\n    try {\n        const bytes = protoBase64.dec(value);\n        if (type) {\n            return type.fromBinary(bytes, options);\n        }\n        return bytes;\n    }\n    catch (e) {\n        throw ConnectError.from(e, Code.DataLoss);\n    }\n}\n/**\n * Merge two or more Headers objects by appending all fields from\n * all inputs to a new Headers object.\n */\nexport function appendHeaders(...headers) {\n    const h = new Headers();\n    for (const e of headers) {\n        e.forEach((value, key) => {\n            h.append(key, value);\n        });\n    }\n    return h;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create any client for the given service.\n *\n * The given createMethod function is called for each method definition\n * of the service. The function it returns is added to the client object\n * as a method.\n */\nexport function makeAnyClient(service, createMethod) {\n    const client = {};\n    for (const [localName, methodInfo] of Object.entries(service.methods)) {\n        const method = createMethod(Object.assign(Object.assign({}, methodInfo), { localName,\n            service }));\n        if (method != null) {\n            client[localName] = method;\n        }\n    }\n    return client;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { compressedFlag } from \"./compression.js\";\n/**\n * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream\n * of bytes.\n *\n * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough\n * does not have the necessary availability at this time.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createEnvelopeReadableStream(stream) {\n    let reader;\n    let buffer = new Uint8Array(0);\n    function append(chunk) {\n        const n = new Uint8Array(buffer.length + chunk.length);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        buffer = n;\n    }\n    return new ReadableStream({\n        start() {\n            reader = stream.getReader();\n        },\n        async pull(controller) {\n            let header = undefined;\n            for (;;) {\n                if (header === undefined && buffer.byteLength >= 5) {\n                    let length = 0;\n                    for (let i = 1; i < 5; i++) {\n                        length = (length << 8) + buffer[i];\n                    }\n                    header = { flags: buffer[0], length };\n                }\n                if (header !== undefined && buffer.byteLength >= header.length + 5) {\n                    break;\n                }\n                const result = await reader.read();\n                if (result.done) {\n                    break;\n                }\n                append(result.value);\n            }\n            if (header === undefined) {\n                if (buffer.byteLength == 0) {\n                    controller.close();\n                    return;\n                }\n                controller.error(new ConnectError(\"premature end of stream\", Code.DataLoss));\n                return;\n            }\n            const data = buffer.subarray(5, 5 + header.length);\n            buffer = buffer.subarray(5 + header.length);\n            controller.enqueue({\n                flags: header.flags,\n                data,\n            });\n        },\n    });\n}\n/**\n * Compress an EnvelopedMessage.\n *\n * Raises Internal if an enveloped message is already compressed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeCompress(envelope, compression, compressMinBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        throw new ConnectError(\"invalid envelope, already compressed\", Code.Internal);\n    }\n    if (compression && data.byteLength >= compressMinBytes) {\n        data = await compression.compress(data);\n        flags = flags | compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Decompress an EnvelopedMessage.\n *\n * Raises InvalidArgument if an envelope is compressed, but compression is null.\n *\n * Relies on the provided Compression to raise ResourceExhausted if the\n * *decompressed* message size is larger than readMaxBytes. If the envelope is\n * not compressed, readMaxBytes is not honored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeDecompress(envelope, compression, readMaxBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        if (!compression) {\n            throw new ConnectError(\"received compressed envelope, but do not know how to decompress\", Code.InvalidArgument);\n        }\n        data = await compression.decompress(data, readMaxBytes);\n        flags = flags ^ compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Encode a single enveloped message.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelope(flags, data) {\n    const bytes = new Uint8Array(data.length + 5);\n    bytes.set(data, 5);\n    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    v.setUint8(0, flags); // first byte is flags\n    v.setUint32(1, data.length); // 4 bytes message length\n    return bytes;\n}\n/**\n * Encode a set of enveloped messages.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelopes(...envelopes) {\n    const len = envelopes.reduce((previousValue, currentValue) => previousValue + currentValue.data.length + 5, 0);\n    const bytes = new Uint8Array(len);\n    const v = new DataView(bytes.buffer);\n    let offset = 0;\n    for (const e of envelopes) {\n        v.setUint8(offset, e.flags); // first byte is flags\n        v.setUint32(offset + 1, e.data.length); // 4 bytes message length\n        bytes.set(e.data, offset + 5);\n        offset += e.data.length + 5;\n    }\n    return bytes;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nimport { Code } from \"../code.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { encodeEnvelope, envelopeCompress, envelopeDecompress, } from \"./envelope.js\";\nimport { assertReadMaxBytes } from \"./limit-io.js\";\nexport function pipeTo(source, ...rest) {\n    const [transforms, sink, opt] = pickTransformsAndSink(rest);\n    let iterable = source;\n    let abortable;\n    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n        iterable = abortable = makeIterableAbortable(iterable);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    iterable = pipe(iterable, ...transforms, { propagateDownStreamError: false });\n    return sink(iterable).catch((reason) => {\n        if (abortable) {\n            return abortable.abort(reason).then(() => Promise.reject(reason));\n        }\n        return Promise.reject(reason);\n    });\n}\n// pick transforms, the sink, and options from the pipeTo() rest parameter\nfunction pickTransformsAndSink(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    const sink = rest.pop();\n    return [rest, sink, opt];\n}\n/**\n * Creates an AsyncIterableSink that concatenates all elements from the input.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAll() {\n    return async function (iterable) {\n        var _a, e_1, _b, _c;\n        const all = [];\n        try {\n            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {\n                _c = iterable_1_1.value;\n                _d = false;\n                const chunk = _c;\n                all.push(chunk);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return all;\n    };\n}\n/**\n * Creates an AsyncIterableSink that concatenates all chunks from the input into\n * a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAllBytes(readMaxBytes, lengthHint) {\n    return async function (iterable) {\n        return await readAllBytes(iterable, readMaxBytes, lengthHint);\n    };\n}\nexport function pipe(source, ...rest) {\n    var _a;\n    return __asyncGenerator(this, arguments, function* pipe_1() {\n        const [transforms, opt] = pickTransforms(rest);\n        let abortable;\n        const sourceIt = source[Symbol.asyncIterator]();\n        const cachedSource = {\n            [Symbol.asyncIterator]() {\n                return sourceIt;\n            },\n        };\n        let iterable = cachedSource;\n        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n            iterable = abortable = makeIterableAbortable(iterable);\n        }\n        for (const t of transforms) {\n            iterable = t(iterable);\n        }\n        const it = iterable[Symbol.asyncIterator]();\n        try {\n            for (;;) {\n                const r = yield __await(it.next());\n                if (r.done === true) {\n                    break;\n                }\n                if (!abortable) {\n                    yield yield __await(r.value);\n                    continue;\n                }\n                try {\n                    yield yield __await(r.value);\n                }\n                catch (e) {\n                    yield __await(abortable.abort(e)); // propagate downstream error to the source\n                    throw e;\n                }\n            }\n        }\n        finally {\n            if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n                // Call return on the source iterable to indicate\n                // that we will no longer consume it and it should\n                // cleanup any allocated resources.\n                (_a = sourceIt.return) === null || _a === void 0 ? void 0 : _a.call(sourceIt).catch(() => {\n                    // return returns a promise, which we don't care about.\n                    //\n                    // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                    // this is to ensure error is caught and ignored.\n                });\n            }\n        }\n    });\n}\nfunction pickTransforms(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    return [rest, opt];\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given catchError function.\n *\n * The catchError function may return a final value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatch(catchError) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    const caught = yield __await(catchError(e));\n                    if (caught !== undefined) {\n                        yield yield __await(caught);\n                    }\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given function. Unlike transformCatch(), the given function\n * is also called when no error is raised.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatchFinally(catchFinally) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            let err;\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    err = e;\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n            const caught = yield __await(catchFinally(err));\n            if (caught !== undefined) {\n                yield yield __await(caught);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that appends a value.\n *\n * The element to append is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformAppend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_2, _b, _c;\n            try {\n                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true) {\n                    _c = iterable_2_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            const append = yield __await(provide());\n            if (append !== undefined) {\n                yield yield __await(append);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that prepends an element.\n *\n * The element to prepend is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformPrepend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_3, _b, _c;\n            const prepend = yield __await(provide());\n            if (prepend !== undefined) {\n                yield yield __await(prepend);\n            }\n            try {\n                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield __await(iterable_3.next()), _a = iterable_3_1.done, !_a; _d = true) {\n                    _c = iterable_3_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_3.return)) yield __await(_b.call(iterable_3));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that reads all bytes from the input, and\n * concatenates them to a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformReadAllBytes(readMaxBytes, lengthHint) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            yield yield __await(yield __await(readAllBytes(iterable, readMaxBytes, lengthHint)));\n        });\n    };\n}\nexport function transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {\n    if (endStreamFlag === undefined || endSerialization === undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_4, _b, _c;\n                try {\n                    for (var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield __await(iterable_4.next()), _a = iterable_4_1.done, !_a; _d = true) {\n                        _c = iterable_4_1.value;\n                        _d = false;\n                        const chunk = _c;\n                        const data = serialization.serialize(chunk);\n                        yield yield __await({ flags: 0, data });\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_4.return)) yield __await(_b.call(iterable_4));\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            });\n        };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_5, _b, _c;\n            try {\n                for (var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), _a = iterable_5_1.done, !_a; _d = true) {\n                    _c = iterable_5_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    let data;\n                    let flags = 0;\n                    if (chunk.end) {\n                        flags = flags | endStreamFlag;\n                        data = endSerialization.serialize(chunk.value);\n                    }\n                    else {\n                        data = serialization.serialize(chunk.value);\n                    }\n                    yield yield __await({ flags, data });\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_5.return)) yield __await(_b.call(iterable_5));\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n        });\n    };\n}\nexport function transformParseEnvelope(serialization, endStreamFlag, endSerialization) {\n    // code path always yields ParsedEnvelopedMessage<T, E>\n    if (endSerialization && endStreamFlag !== undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_6, _b, _c;\n                try {\n                    for (var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield __await(iterable_6.next()), _a = iterable_6_1.done, !_a; _d = true) {\n                        _c = iterable_6_1.value;\n                        _d = false;\n                        const { flags, data } = _c;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            yield yield __await({ value: endSerialization.parse(data), end: true });\n                        }\n                        else {\n                            yield yield __await({ value: serialization.parse(data), end: false });\n                        }\n                    }\n                }\n                catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_6.return)) yield __await(_b.call(iterable_6));\n                    }\n                    finally { if (e_6) throw e_6.error; }\n                }\n            });\n        };\n    }\n    // code path always yields T\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_7, _b, _c;\n            try {\n                for (var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield __await(iterable_7.next()), _a = iterable_7_1.done, !_a; _d = true) {\n                    _c = iterable_7_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    if (endStreamFlag !== undefined &&\n                        (flags & endStreamFlag) === endStreamFlag) {\n                        if (endSerialization === null) {\n                            throw new ConnectError(\"unexpected end flag\", Code.InvalidArgument);\n                        }\n                        // skips end-of-stream envelope\n                        continue;\n                    }\n                    yield yield __await(serialization.parse(data));\n                }\n            }\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_7.return)) yield __await(_b.call(iterable_7));\n                }\n                finally { if (e_7) throw e_7.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and compresses them if they are larger than compressMinBytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCompressEnvelope(compression, compressMinBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_8, _b, _c;\n            try {\n                for (var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield __await(iterable_8.next()), _a = iterable_8_1.done, !_a; _d = true) {\n                    _c = iterable_8_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeCompress(env, compression, compressMinBytes)));\n                }\n            }\n            catch (e_8_1) { e_8 = { error: e_8_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_8.return)) yield __await(_b.call(iterable_8));\n                }\n                finally { if (e_8) throw e_8.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and decompresses them using the given compression.\n *\n * The iterable raises an error if the decompressed payload of an enveloped\n * message is larger than readMaxBytes, or if no compression is provided.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformDecompressEnvelope(compression, readMaxBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_9, _b, _c;\n            try {\n                for (var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield __await(iterable_9.next()), _a = iterable_9_1.done, !_a; _d = true) {\n                    _c = iterable_9_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeDecompress(env, compression, readMaxBytes)));\n                }\n            }\n            catch (e_9_1) { e_9 = { error: e_9_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_9.return)) yield __await(_b.call(iterable_9));\n                }\n                finally { if (e_9) throw e_9.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes enveloped messages as a source,\n * and joins them into a stream of raw bytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformJoinEnvelopes() {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_10, _b, _c;\n            try {\n                for (var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield __await(iterable_10.next()), _a = iterable_10_1.done, !_a; _d = true) {\n                    _c = iterable_10_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    yield yield __await(encodeEnvelope(flags, data));\n                }\n            }\n            catch (e_10_1) { e_10 = { error: e_10_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_10.return)) yield __await(_b.call(iterable_10));\n                }\n                finally { if (e_10) throw e_10.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes raw bytes as a source, and splits\n * them into enveloped messages.\n *\n * The iterable raises an error\n * - if the payload of an enveloped message is larger than readMaxBytes,\n * - if the stream ended before an enveloped message fully arrived,\n * - or if the stream ended with extraneous data.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformSplitEnvelope(readMaxBytes) {\n    // append chunk to buffer, returning updated buffer\n    function append(buffer, chunk) {\n        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        return n;\n    }\n    // tuple 0: envelope, or undefined if incomplete\n    // tuple 1: remainder of the buffer\n    function shiftEnvelope(buffer, header) {\n        if (buffer.byteLength < 5 + header.length) {\n            return [undefined, buffer];\n        }\n        return [\n            { flags: header.flags, data: buffer.subarray(5, 5 + header.length) },\n            buffer.subarray(5 + header.length),\n        ];\n    }\n    // undefined: header is incomplete\n    function peekHeader(buffer) {\n        if (buffer.byteLength < 5) {\n            return undefined;\n        }\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        const length = view.getUint32(1); // 4 bytes message length\n        const flags = view.getUint8(0); // first byte is flags\n        return { length, flags };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_11, _b, _c;\n            let buffer = new Uint8Array(0);\n            try {\n                for (var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield __await(iterable_11.next()), _a = iterable_11_1.done, !_a; _d = true) {\n                    _c = iterable_11_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    buffer = append(buffer, chunk);\n                    for (;;) {\n                        const header = peekHeader(buffer);\n                        if (!header) {\n                            break;\n                        }\n                        assertReadMaxBytes(readMaxBytes, header.length, true);\n                        let env;\n                        [env, buffer] = shiftEnvelope(buffer, header);\n                        if (!env) {\n                            break;\n                        }\n                        yield yield __await(env);\n                    }\n                }\n            }\n            catch (e_11_1) { e_11 = { error: e_11_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_11.return)) yield __await(_b.call(iterable_11));\n                }\n                finally { if (e_11) throw e_11.error; }\n            }\n            if (buffer.byteLength > 0) {\n                const header = peekHeader(buffer);\n                let message = \"protocol error: incomplete envelope\";\n                if (header) {\n                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;\n                }\n                throw new ConnectError(message, Code.InvalidArgument);\n            }\n        });\n    };\n}\n/**\n * Reads all bytes from the source, and concatenates them to a single Uint8Array.\n *\n * Raises an error if:\n * - more than readMaxBytes are read\n * - lengthHint is a positive integer, but larger than readMaxBytes\n * - lengthHint is a positive integer, and the source contains more or less bytes\n *   than promised\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function readAllBytes(iterable, readMaxBytes, lengthHint) {\n    var _a, e_12, _b, _c, _d, e_13, _e, _f;\n    const [ok, hint] = parseLengthHint(lengthHint);\n    if (ok) {\n        if (hint > readMaxBytes) {\n            assertReadMaxBytes(readMaxBytes, hint, true);\n        }\n        const buffer = new Uint8Array(hint);\n        let offset = 0;\n        try {\n            for (var _g = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = await iterable_12.next(), _a = iterable_12_1.done, !_a; _g = true) {\n                _c = iterable_12_1.value;\n                _g = false;\n                const chunk = _c;\n                if (offset + chunk.byteLength > hint) {\n                    throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, Code.InvalidArgument);\n                }\n                buffer.set(chunk, offset);\n                offset += chunk.byteLength;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (!_g && !_a && (_b = iterable_12.return)) await _b.call(iterable_12);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        if (offset < hint) {\n            throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, Code.InvalidArgument);\n        }\n        return buffer;\n    }\n    const chunks = [];\n    let count = 0;\n    try {\n        for (var _h = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _d = iterable_13_1.done, !_d; _h = true) {\n            _f = iterable_13_1.value;\n            _h = false;\n            const chunk = _f;\n            count += chunk.byteLength;\n            assertReadMaxBytes(readMaxBytes, count);\n            chunks.push(chunk);\n        }\n    }\n    catch (e_13_1) { e_13 = { error: e_13_1 }; }\n    finally {\n        try {\n            if (!_h && !_d && (_e = iterable_13.return)) await _e.call(iterable_13);\n        }\n        finally { if (e_13) throw e_13.error; }\n    }\n    const all = new Uint8Array(count);\n    let offset = 0;\n    for (let chunk = chunks.shift(); chunk; chunk = chunks.shift()) {\n        all.set(chunk, offset);\n        offset += chunk.byteLength;\n    }\n    return all;\n}\n// parse the lengthHint argument of readAllBytes()\nfunction parseLengthHint(lengthHint) {\n    if (lengthHint === undefined || lengthHint === null) {\n        return [false, 0];\n    }\n    const n = typeof lengthHint == \"string\" ? parseInt(lengthHint, 10) : lengthHint;\n    if (!Number.isSafeInteger(n) || n < 0) {\n        return [false, n];\n    }\n    return [true, n];\n}\n/**\n * Wait for the first element of an iterable without modifying the iterable.\n * This consumes the first element, but pushes it back on the stack.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function untilFirst(iterable) {\n    const it = iterable[Symbol.asyncIterator]();\n    let first = await it.next();\n    return {\n        [Symbol.asyncIterator]() {\n            const w = {\n                async next() {\n                    if (first !== null) {\n                        const n = first;\n                        first = null;\n                        return n;\n                    }\n                    return await it.next();\n                },\n            };\n            if (it.throw !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly\n                w.throw = (e) => it.throw(e);\n            }\n            if (it.return !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly\n                w.return = (value) => it.return(value);\n            }\n            return w;\n        },\n    };\n}\n/**\n * Wrap the given iterable and return an iterable with an abort() method.\n *\n * This function exists purely for convenience. Where one would typically have\n * to access the iterator directly, advance through all elements, and call\n * AsyncIterator.throw() to notify the upstream iterable, this function allows\n * to use convenient for-await loops and still notify the upstream iterable:\n *\n * ```ts\n * const abortable = makeIterableAbortable(iterable);\n * for await (const ele of abortable) {\n *   await abortable.abort(\"ERR\");\n * }\n * ```\n * There are a couple of limitations of this function:\n * - the given async iterable must implement throw\n * - the async iterable cannot be re-use\n * - if source catches errors and yields values for them, they are ignored, and\n *   the source may still dangle\n *\n * There are four possible ways an async function* can handle yield errors:\n * 1. don't catch errors at all - Abortable.abort() will resolve \"rethrown\"\n * 2. catch errors and rethrow - Abortable.abort() will resolve \"rethrown\"\n * 3. catch errors and return - Abortable.abort() will resolve \"completed\"\n * 4. catch errors and yield a value - Abortable.abort() will resolve \"caught\"\n *\n * Note that catching errors and yielding a value is problematic, and it should\n * be documented that this may leave the source in a dangling state.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function makeIterableAbortable(iterable) {\n    const innerCandidate = iterable[Symbol.asyncIterator]();\n    if (innerCandidate.throw === undefined) {\n        throw new Error(\"AsyncIterable does not implement throw\");\n    }\n    const inner = innerCandidate;\n    let aborted;\n    let resultPromise;\n    let it = {\n        next() {\n            resultPromise = inner.next().finally(() => {\n                resultPromise = undefined;\n            });\n            return resultPromise;\n        },\n        throw(e) {\n            return inner.throw(e);\n        },\n    };\n    if (innerCandidate.return !== undefined) {\n        it = Object.assign(Object.assign({}, it), { return(value) {\n                return inner.return(value);\n            } });\n    }\n    let used = false;\n    return {\n        abort(reason) {\n            if (aborted) {\n                return aborted.state;\n            }\n            const f = () => {\n                return inner.throw(reason).then((r) => (r.done === true ? \"completed\" : \"caught\"), () => \"rethrown\");\n            };\n            if (resultPromise) {\n                aborted = { reason, state: resultPromise.then(f, f) };\n                return aborted.state;\n            }\n            aborted = { reason, state: f() };\n            return aborted.state;\n        },\n        [Symbol.asyncIterator]() {\n            if (used) {\n                throw new Error(\"AsyncIterable cannot be re-used\");\n            }\n            used = true;\n            return it;\n        },\n    };\n}\n/**\n * Create a new WritableIterable.\n */\nexport function createWritableIterable() {\n    // We start with two queues to capture the read and write attempts.\n    //\n    // The writes and reads each check of their counterpart is\n    // already available and either interact/add themselves to the queue.\n    const readQueue = [];\n    const writeQueue = [];\n    let err = undefined;\n    let nextResolve;\n    let nextReject;\n    let nextPromise = new Promise((resolve, reject) => {\n        nextResolve = resolve;\n        nextReject = reject;\n    });\n    let closed = false;\n    // drain the readQueue in case of error/writer is closed by sending a\n    // done result.\n    function drain() {\n        for (const next of readQueue.splice(0, readQueue.length)) {\n            next({ done: true, value: undefined });\n        }\n    }\n    return {\n        close() {\n            closed = true;\n            drain();\n        },\n        async write(payload) {\n            if (closed) {\n                throw err !== null && err !== void 0 ? err : new Error(\"cannot write, WritableIterable already closed\");\n            }\n            const read = readQueue.shift();\n            if (read === undefined) {\n                // We didn't find a pending read so we add the payload to the write queue.\n                writeQueue.push(payload);\n            }\n            else {\n                // We found a pending read so we respond with the payload.\n                read({ done: false, value: payload });\n                if (readQueue.length > 0) {\n                    // If there are more in the read queue we can mark the write as complete.\n                    // as the error reporting is not guaranteed to be sequential and therefore cannot\n                    // to linked to a specific write.\n                    return;\n                }\n            }\n            // We await the next call for as many times as there are items in the queue + 1\n            //\n            // If there are no items in the write queue that means write happened and we just have\n            // to wait for one more call likewise if we are the nth write in the queue we\n            // have to wait for n writes to complete and one more.\n            const limit = writeQueue.length + 1;\n            for (let i = 0; i < limit; i++) {\n                await nextPromise;\n            }\n        },\n        [Symbol.asyncIterator]() {\n            return {\n                next() {\n                    // Resolve the nextPromise to indicate\n                    // pending writes that a read attempt has been made\n                    // after their write.\n                    //\n                    // We also need to reset the promise for future writes.\n                    nextResolve();\n                    nextPromise = new Promise((resolve, reject) => {\n                        nextResolve = resolve;\n                        nextReject = reject;\n                    });\n                    const write = writeQueue.shift();\n                    if (write !== undefined) {\n                        // We found a pending write so response with the payload.\n                        return Promise.resolve({ done: false, value: write });\n                    }\n                    if (closed) {\n                        return Promise.resolve({ done: true, value: undefined });\n                    }\n                    // We return a promise immediately that is either resolved/rejected\n                    // as writes happen.\n                    let readResolve;\n                    const readPromise = new Promise((resolve) => (readResolve = resolve));\n                    readQueue.push(readResolve); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    return readPromise;\n                },\n                throw(throwErr) {\n                    err = throwErr;\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    // This will reject all pending writes.\n                    nextReject(err);\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n                return() {\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    // Resolve once for the write awaiting confirmation.\n                    nextResolve();\n                    // Reject all future writes.\n                    nextPromise = Promise.reject(new Error(\"cannot write, consumer called return\"));\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n            };\n        },\n    };\n}\n/**\n * Create an asynchronous iterable from an array.\n *\n * @private Internal code, does not follow semantic versioning.\n */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport function createAsyncIterable(items) {\n    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {\n        yield __await(yield* __asyncDelegator(__asyncValues(items)));\n    });\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodKind } from \"@bufbuild/protobuf\";\nimport { makeAnyClient } from \"./any-client.js\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\nimport { createAsyncIterable } from \"./protocol/async-iterable.js\";\n/**\n * Create a PromiseClient for the given service, invoking RPCs through the\n * given transport.\n */\nexport function createPromiseClient(service, transport) {\n    return makeAnyClient(service, (method) => {\n        switch (method.kind) {\n            case MethodKind.Unary:\n                return createUnaryFn(transport, service, method);\n            case MethodKind.ServerStreaming:\n                return createServerStreamingFn(transport, service, method);\n            case MethodKind.ClientStreaming:\n                return createClientStreamingFn(transport, service, method);\n            case MethodKind.BiDiStreaming:\n                return createBiDiStreamingFn(transport, service, method);\n            default:\n                return null;\n        }\n    });\n}\nexport function createUnaryFn(transport, service, method) {\n    return async function (input, options) {\n        var _a, _b;\n        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        return response.message;\n    };\n}\nexport function createServerStreamingFn(transport, service, method) {\n    return function (input, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([input]), options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nexport function createClientStreamingFn(transport, service, method) {\n    return async function (request, options) {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);\n        let singleMessage;\n        try {\n            for (var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                _c = _h.value;\n                _f = false;\n                const message = _c;\n                singleMessage = message;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (!singleMessage) {\n            throw new ConnectError(\"protocol error: missing response message\", Code.Internal);\n        }\n        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);\n        return singleMessage;\n    };\n}\nexport function createBiDiStreamingFn(transport, service, method) {\n    return function (request, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction handleStreamResponse(stream, options) {\n    const it = (function () {\n        var _a, _b;\n        return __asyncGenerator(this, arguments, function* () {\n            const response = yield __await(stream);\n            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n            yield __await(yield* __asyncDelegator(__asyncValues(response.message)));\n            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        });\n    })()[Symbol.asyncIterator]();\n    // Create a new iterable to omit throw/return.\n    return {\n        [Symbol.asyncIterator]: () => ({\n            next: () => it.next(),\n        }),\n    };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * Create an AbortController that is automatically aborted if one of the given\n * signals is aborted.\n *\n * For convenience, the linked AbortSignals can be undefined.\n *\n * If the controller or any of the signals is aborted, all event listeners are\n * removed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createLinkedAbortController(...signals) {\n    const controller = new AbortController();\n    const sa = signals\n        .filter((s) => s !== undefined)\n        .concat(controller.signal);\n    for (const signal of sa) {\n        if (signal.aborted) {\n            onAbort.apply(signal);\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n        if (!controller.signal.aborted) {\n            controller.abort(getAbortSignalReason(this));\n        }\n        for (const signal of sa) {\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n    return controller;\n}\n/**\n * Create a deadline signal. The returned object contains an AbortSignal, but\n * also a cleanup function to stop the timer, which must be called once the\n * calling code is no longer interested in the signal.\n *\n * Ideally, we would simply use AbortSignal.timeout(), but it is not widely\n * available yet.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createDeadlineSignal(timeoutMs) {\n    const controller = new AbortController();\n    const listener = () => {\n        controller.abort(new ConnectError(\"the operation timed out\", Code.DeadlineExceeded));\n    };\n    let timeoutId;\n    if (timeoutMs !== undefined) {\n        if (timeoutMs <= 0)\n            listener();\n        else\n            timeoutId = setTimeout(listener, timeoutMs);\n    }\n    return {\n        signal: controller.signal,\n        cleanup: () => clearTimeout(timeoutId),\n    };\n}\n/**\n * Returns the reason why an AbortSignal was aborted. Returns undefined if the\n * signal has not been aborted.\n *\n * The property AbortSignal.reason is not widely available. This function\n * returns an AbortError if the signal is aborted, but reason is undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function getAbortSignalReason(signal) {\n    if (!signal.aborted) {\n        return undefined;\n    }\n    if (signal.reason !== undefined) {\n        return signal.reason;\n    }\n    // AbortSignal.reason is available in Node.js v16, v18, and later,\n    // and in all browsers since early 2022.\n    const e = new Error(\"This operation was aborted\");\n    e.name = \"AbortError\";\n    return e;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * createContextValues creates a new ContextValues.\n */\nexport function createContextValues() {\n    return {\n        get(key) {\n            return key.id in this ? this[key.id] : key.defaultValue;\n        },\n        set(key, value) {\n            this[key.id] = value;\n            return this;\n        },\n        delete(key) {\n            delete this[key.id];\n            return this;\n        },\n    };\n}\n/**\n * createContextKey creates a new ContextKey.\n */\nexport function createContextKey(defaultValue, options) {\n    return { id: Symbol(options === null || options === void 0 ? void 0 : options.description), defaultValue };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * trailerFlag indicates that the data in a EnvelopedMessage\n * is a set of trailers of the gRPC-web protocol.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const trailerFlag = 0b10000000;\n/**\n * Parse a gRPC-web trailer, a set of header fields separated by CRLF.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerParse(data) {\n    const headers = new Headers();\n    const lines = new TextDecoder().decode(data).split(\"\\r\\n\");\n    for (const line of lines) {\n        if (line === \"\") {\n            continue;\n        }\n        const i = line.indexOf(\":\");\n        if (i > 0) {\n            const name = line.substring(0, i).trim();\n            const value = line.substring(i + 1).trim();\n            headers.append(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * Serialize a Headers object as a gRPC-web trailer.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerSerialize(trailer) {\n    const lines = [];\n    trailer.forEach((value, key) => {\n        lines.push(`${key}: ${value}\\r\\n`);\n    });\n    return new TextEncoder().encode(lines.join(\"\"));\n}\n/**\n * Create a Serialization object that serializes a gRPC-web trailer, a Headers\n * object that is serialized as a set of header fields, separated by CRLF.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createTrailerSerialization() {\n    return {\n        serialize: trailerSerialize,\n        parse: trailerParse,\n    };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport const headerContentType = \"Content-Type\";\nexport const headerEncoding = \"Grpc-Encoding\";\nexport const headerAcceptEncoding = \"Grpc-Accept-Encoding\";\nexport const headerTimeout = \"Grpc-Timeout\";\nexport const headerGrpcStatus = \"Grpc-Status\";\nexport const headerGrpcMessage = \"Grpc-Message\";\nexport const headerStatusDetailsBin = \"Grpc-Status-Details-Bin\";\nexport const headerMessageType = \"Grpc-Message-Type\";\nexport const headerUserAgent = \"User-Agent\";\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport { headerContentType, headerEncoding, headerAcceptEncoding, headerTimeout, headerGrpcStatus, headerGrpcMessage, headerStatusDetailsBin, headerUserAgent, } from \"../protocol-grpc/headers.js\";\n/**\n * gRPC-web does not use the standard header User-Agent.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const headerXUserAgent = \"X-User-Agent\";\n/**\n * The canonical grpc/grpc-web JavaScript implementation sets\n * this request header with value \"1\".\n * Some servers may rely on the header to identify gRPC-web\n * requests. For example the proxy by improbable:\n * https://github.com/improbable-eng/grpc-web/blob/53aaf4cdc0fede7103c1b06f0cfc560c003a5c41/go/grpcweb/wrapper.go#L231\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const headerXGrpcWeb = \"X-Grpc-Web\";\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Regular Expression that matches any valid gRPC-web Content-Type header value.\n * Note that this includes application/grpc-web-text with the additional base64\n * encoding.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeRegExp = /^application\\/grpc-web(-text)?(?:\\+(?:(json)(?:; ?charset=utf-?8)?|proto))?$/i;\nexport const contentTypeProto = \"application/grpc-web+proto\";\nexport const contentTypeJson = \"application/grpc-web+json\";\n/**\n * Parse a gRPC-web Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function parseContentType(contentType) {\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);\n    if (!match) {\n        return undefined;\n    }\n    const text = !!match[1];\n    const binary = !match[2];\n    return { text, binary };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Any, Message, proto3 } from \"@bufbuild/protobuf\";\n/**\n * The `Status` type defines a logical error model that is suitable for different\n * programming environments, including REST APIs and RPC APIs. It is used by\n * [gRPC](https://github.com/grpc). The error model is designed to be:\n *\n * - Simple to use and understand for most users\n * - Flexible enough to meet unexpected needs\n *\n * # Overview\n *\n * The `Status` message contains three pieces of data: error code, error message,\n * and error details. The error code should be an enum value of\n * [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The\n * error message should be a developer-facing English message that helps\n * developers *understand* and *resolve* the error. If a localized user-facing\n * error message is needed, put the localized message in the error details or\n * localize it in the client. The optional error details may contain arbitrary\n * information about the error. There is a predefined set of error detail types\n * in the package `google.rpc` which can be used for common error conditions.\n *\n * # Language mapping\n *\n * The `Status` message is the logical representation of the error model, but it\n * is not necessarily the actual wire format. When the `Status` message is\n * exposed in different client libraries and different wire protocols, it can be\n * mapped differently. For example, it will likely be mapped to some exceptions\n * in Java, but more likely mapped to some error codes in C.\n *\n * # Other uses\n *\n * The error model and the `Status` message can be used in a variety of\n * environments, either with or without APIs, to provide a\n * consistent developer experience across different environments.\n *\n * Example uses of this error model include:\n *\n * - Partial errors. If a service needs to return partial errors to the client,\n *     it may embed the `Status` in the normal response to indicate the partial\n *     errors.\n *\n * - Workflow errors. A typical workflow has multiple steps. Each step may\n *     have a `Status` message for error reporting purpose.\n *\n * - Batch operations. If a client uses batch request and batch response, the\n *     `Status` message should be used directly inside batch response, one for\n *     each error sub-response.\n *\n * - Asynchronous operations. If an API call embeds asynchronous operation\n *     results in its response, the status of those operations should be\n *     represented directly using the `Status` message.\n *\n * - Logging. If some API errors are stored in logs, the message `Status` could\n *     be used directly after any stripping needed for security/privacy reasons.\n *\n * @generated from message google.rpc.Status\n */\nexport class Status extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n         *\n         * @generated from field: int32 code = 1;\n         */\n        this.code = 0;\n        /**\n         * A developer-facing error message, which should be in English. Any\n         * user-facing error message should be localized and sent in the\n         * [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n         *\n         * @generated from field: string message = 2;\n         */\n        this.message = \"\";\n        /**\n         * A list of messages that carry the error details.  There will be a\n         * common set of message types for APIs to use.\n         *\n         * @generated from field: repeated google.protobuf.Any details = 3;\n         */\n        this.details = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Status().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Status().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Status().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Status, a, b);\n    }\n}\nStatus.runtime = proto3;\nStatus.typeName = \"google.rpc.Status\";\nStatus.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"code\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"details\", kind: \"message\", T: Any, repeated: true },\n]);\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Any, Message } from \"@bufbuild/protobuf\";\nimport { Status } from \"./gen/status_pb.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { decodeBinaryHeader, encodeBinaryHeader } from \"../http-headers.js\";\nimport { Code } from \"../code.js\";\nimport { headerGrpcMessage, headerGrpcStatus, headerStatusDetailsBin, } from \"./headers.js\";\n/**\n * The value of the Grpc-Status header or trailer in case of success.\n * Used by the gRPC and gRPC-web protocols.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const grpcStatusOk = \"0\";\n/**\n * Sets the fields \"grpc-status\" and \"grpc-message\" in the given\n * Headers object.\n * If an error is given and contains error details, the function\n * will also set the field \"grpc-status-details-bin\" with an encoded\n * google.rpc.Status message including the error details.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function setTrailerStatus(target, error) {\n    if (error) {\n        target.set(headerGrpcStatus, error.code.toString(10));\n        target.set(headerGrpcMessage, encodeURIComponent(error.rawMessage));\n        if (error.details.length > 0) {\n            const status = new Status({\n                code: error.code,\n                message: error.rawMessage,\n                details: error.details.map((value) => value instanceof Message\n                    ? Any.pack(value)\n                    : new Any({\n                        typeUrl: `type.googleapis.com/${value.type}`,\n                        value: value.value,\n                    })),\n            });\n            target.set(headerStatusDetailsBin, encodeBinaryHeader(status));\n        }\n    }\n    else {\n        target.set(headerGrpcStatus, grpcStatusOk.toString());\n    }\n    return target;\n}\n/**\n * Find an error status in the given Headers object, which can be either\n * a trailer, or a header (as allowed for so-called trailers-only responses).\n * The field \"grpc-status-details-bin\" is inspected, and if not present,\n * the fields \"grpc-status\" and \"grpc-message\" are used.\n * Returns an error only if the gRPC status code is > 0.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function findTrailerError(headerOrTrailer) {\n    // TODO\n    // let code: Code;\n    // let message: string = \"\";\n    var _a;\n    // Prefer the protobuf-encoded data to the grpc-status header.\n    const statusBytes = headerOrTrailer.get(headerStatusDetailsBin);\n    if (statusBytes != null) {\n        const status = decodeBinaryHeader(statusBytes, Status);\n        if (status.code == 0) {\n            return undefined;\n        }\n        const error = new ConnectError(status.message, status.code, headerOrTrailer);\n        error.details = status.details.map((any) => ({\n            type: any.typeUrl.substring(any.typeUrl.lastIndexOf(\"/\") + 1),\n            value: any.value,\n        }));\n        return error;\n    }\n    const grpcStatus = headerOrTrailer.get(headerGrpcStatus);\n    if (grpcStatus != null) {\n        if (grpcStatus === grpcStatusOk) {\n            return undefined;\n        }\n        const code = parseInt(grpcStatus, 10);\n        if (code in Code) {\n            return new ConnectError(decodeURIComponent((_a = headerOrTrailer.get(headerGrpcMessage)) !== null && _a !== void 0 ? _a : \"\"), code, headerOrTrailer);\n        }\n        return new ConnectError(`invalid grpc-status: ${grpcStatus}`, Code.Internal, headerOrTrailer);\n    }\n    return undefined;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a URL for the given RPC. This simply adds the qualified\n * service name, a slash, and the method name to the path of the given\n * baseUrl.\n *\n * For example, the baseUri https://example.com and method \"Say\" from\n * the service example.ElizaService results in:\n * https://example.com/example.ElizaService/Say\n *\n * This format is used by the protocols Connect, gRPC and Twirp.\n *\n * Note that this function also accepts a protocol-relative baseUrl.\n * If given an empty string or \"/\" as a baseUrl, it returns just the\n * path.\n */\nexport function createMethodUrl(baseUrl, service, method) {\n    const s = typeof service == \"string\" ? service : service.typeName;\n    const m = typeof method == \"string\" ? method : method.name;\n    return baseUrl.toString().replace(/\\/?$/, `/${s}/${m}`);\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"@bufbuild/protobuf\";\n/**\n *  Takes a partial protobuf messages of the\n *  specified message type as input, and returns full instances.\n */\nexport function normalize(type, message) {\n    return message instanceof Message ? message : new type(message);\n}\n/**\n * Takes an AsyncIterable of partial protobuf messages of the\n * specified message type as input, and yields full instances.\n */\nexport function normalizeIterable(messageType, input) {\n    function transform(result) {\n        if (result.done === true) {\n            return result;\n        }\n        return {\n            done: result.done,\n            value: normalize(messageType, result.value),\n        };\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            const it = input[Symbol.asyncIterator]();\n            const res = {\n                next: () => it.next().then(transform),\n            };\n            if (it.throw !== undefined) {\n                res.throw = (e) => it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            if (it.return !== undefined) {\n                res.return = (v) => it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            return res;\n        },\n    };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { assertReadMaxBytes, assertWriteMaxBytes } from \"./limit-io.js\";\n/**\n * Sets default JSON serialization options for connect-es.\n *\n * With standard protobuf JSON serialization, unknown JSON fields are\n * rejected by default. In connect-es, unknown JSON fields are ignored\n * by default.\n */\nexport function getJsonOptions(options) {\n    var _a;\n    const o = Object.assign({}, options);\n    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : (o.ignoreUnknownFields = true);\n    return o;\n}\n/**\n * Create an object that provides convenient access to request and response\n * message serialization for a given method.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {\n    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);\n    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);\n    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);\n    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);\n    return {\n        getI(useBinaryFormat) {\n            return useBinaryFormat ? inputBinary : inputJson;\n        },\n        getO(useBinaryFormat) {\n            return useBinaryFormat ? outputBinary : outputJson;\n        },\n    };\n}\n/**\n * Returns functions to normalize and serialize the input message\n * of an RPC, and to parse the output message of an RPC.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {\n    const input = useBinaryFormat\n        ? createBinarySerialization(method.I, binaryOptions)\n        : createJsonSerialization(method.I, jsonOptions);\n    const output = useBinaryFormat\n        ? createBinarySerialization(method.O, binaryOptions)\n        : createJsonSerialization(method.O, jsonOptions);\n    return { parse: output.parse, serialize: input.serialize };\n}\n/**\n * Apply I/O limits to a Serialization object, returning a new object.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function limitSerialization(serialization, limitOptions) {\n    return {\n        serialize(data) {\n            const bytes = serialization.serialize(data);\n            assertWriteMaxBytes(limitOptions.writeMaxBytes, bytes.byteLength);\n            return bytes;\n        },\n        parse(data) {\n            assertReadMaxBytes(limitOptions.readMaxBytes, data.byteLength, true);\n            return serialization.parse(data);\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf binary format.\n */\nexport function createBinarySerialization(messageType, options) {\n    return {\n        parse(data) {\n            try {\n                return messageType.fromBinary(data, options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`parse binary: ${m}`, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                return data.toBinary(options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`serialize binary: ${m}`, Code.Internal);\n            }\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf canonical JSON encoding.\n *\n * By default, unknown fields are ignored.\n */\nexport function createJsonSerialization(messageType, options) {\n    var _a, _b;\n    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();\n    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();\n    const o = getJsonOptions(options);\n    return {\n        parse(data) {\n            try {\n                const json = textDecoder.decode(data);\n                return messageType.fromJsonString(json, o);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                const json = data.toJsonString(o);\n                return textEncoder.encode(json);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.Internal);\n            }\n        },\n    };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { createDeadlineSignal, createLinkedAbortController, getAbortSignalReason, } from \"./signals.js\";\nimport { normalize, normalizeIterable } from \"./normalize.js\";\n/**\n * Runs a unary method with the given interceptors. Note that this function\n * is only used when implementing a Transport.\n */\nexport function runUnaryCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalize(opt.req.method.I, opt.req.message), signal });\n    return next(req).then((res) => {\n        done();\n        return res;\n    }, abort);\n}\n/**\n * Runs a server-streaming method with the given interceptors. Note that this\n * function is only used when implementing a Transport.\n */\nexport function runStreamingCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });\n    let doneCalled = false;\n    // Call return on the request iterable to indicate\n    // that we will no longer consume it and it should\n    // cleanup any allocated resources.\n    signal.addEventListener(\"abort\", function () {\n        var _a, _b;\n        const it = opt.req.message[Symbol.asyncIterator]();\n        // If the signal is aborted due to an error, we want to throw\n        // the error to the request iterator.\n        if (!doneCalled) {\n            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(() => {\n                // throw returns a promise, which we don't care about.\n                //\n                // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                // this is to ensure error is caught and ignored.\n            });\n        }\n        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {\n            // return returns a promise, which we don't care about.\n            //\n            // Uncaught promises are thrown at sometime/somewhere by the event loop,\n            // this is to ensure error is caught and ignored.\n        });\n    });\n    return next(req).then((res) => {\n        return Object.assign(Object.assign({}, res), { message: {\n                [Symbol.asyncIterator]() {\n                    const it = res.message[Symbol.asyncIterator]();\n                    return {\n                        next() {\n                            return it.next().then((r) => {\n                                if (r.done == true) {\n                                    doneCalled = true;\n                                    done();\n                                }\n                                return r;\n                            }, abort);\n                        },\n                        // We deliberately omit throw/return.\n                    };\n                },\n            } });\n    }, abort);\n}\n/**\n * Create an AbortSignal for Transport implementations. The signal is available\n * in UnaryRequest and StreamingRequest, and is triggered when the call is\n * aborted (via a timeout or explicit cancellation), errored (e.g. when reading\n * an error from the server from the wire), or finished successfully.\n *\n * Transport implementations can pass the signal to HTTP clients to ensure that\n * there are no unused connections leak.\n *\n * Returns a tuple:\n * [0]: The signal, which is also aborted if the optional deadline is reached.\n * [1]: Function to call if the Transport encountered an error.\n * [2]: Function to call if the Transport finished without an error.\n */\nfunction setupSignal(opt) {\n    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);\n    const controller = createLinkedAbortController(opt.signal, signal);\n    return [\n        controller.signal,\n        function abort(reason) {\n            // We peek at the deadline signal because fetch() will throw an error on\n            // abort that discards the signal reason.\n            const e = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);\n            controller.abort(e);\n            cleanup();\n            return Promise.reject(e);\n        },\n        function done() {\n            cleanup();\n            controller.abort();\n        },\n    ];\n}\n/**\n * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps\n * it with each of the given interceptors, returning a new UnaryFn or\n * ServerStreamingFn.\n */\nfunction applyInterceptors(next, interceptors) {\n    var _a;\n    return ((_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (n, i) => i(n), next)) !== null && _a !== void 0 ? _a : next);\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Asserts that the fetch API is available.\n */\nexport function assertFetchApi() {\n    try {\n        new Headers();\n    }\n    catch (_) {\n        throw new Error(\"connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.\");\n    }\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { findTrailerError } from \"./trailer-status.js\";\n/**\n * Validates a trailer for the gRPC and the gRPC-web protocol.\n * Throws a ConnectError if the trailer contains an error status.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function validateTrailer(trailer, header) {\n    const err = findTrailerError(trailer);\n    if (err) {\n        header.forEach((value, key) => {\n            err.metadata.append(key, value);\n        });\n        throw err;\n    }\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { headerAcceptEncoding, headerContentType, headerEncoding, headerTimeout, headerXGrpcWeb, headerUserAgent, headerXUserAgent, } from \"./headers.js\";\nimport { contentTypeJson, contentTypeProto } from \"./content-type.js\";\n/**\n * Creates headers for a gRPC-web request.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent) {\n    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});\n    // Note that we do not support the grpc-web-text format.\n    // https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\n    result.set(headerContentType, useBinaryFormat ? contentTypeProto : contentTypeJson);\n    result.set(headerXGrpcWeb, \"1\");\n    // Note that we do not strictly comply with gRPC user agents.\n    // We use \"connect-es/1.2.3\" where gRPC would use \"grpc-es/1.2.3\".\n    // See https://github.com/grpc/grpc/blob/c462bb8d485fc1434ecfae438823ca8d14cf3154/doc/PROTOCOL-HTTP2.md#user-agents\n    result.set(headerXUserAgent, \"connect-es/1.2.0\");\n    if (setUserAgent) {\n        result.set(headerUserAgent, \"connect-es/1.2.0\");\n    }\n    if (timeoutMs !== undefined) {\n        result.set(headerTimeout, `${timeoutMs}m`);\n    }\n    return result;\n}\n/**\n * Creates headers for a gRPC-web request with compression.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeaderWithCompression(useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression, setUserAgent) {\n    const result = requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent);\n    if (sendCompression != null) {\n        result.set(headerEncoding, sendCompression.name);\n    }\n    if (acceptCompression.length > 0) {\n        result.set(headerAcceptEncoding, acceptCompression.map((c) => c.name).join(\",\"));\n    }\n    return result;\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * Determine the gRPC-web error code for the given HTTP status code.\n * See https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromHttpStatus(httpStatus) {\n    switch (httpStatus) {\n        case 400: // Bad Request\n            return Code.Internal;\n        case 401: // Unauthorized\n            return Code.Unauthenticated;\n        case 403: // Forbidden\n            return Code.PermissionDenied;\n        case 404: // Not Found\n            return Code.Unimplemented;\n        case 429: // Too Many Requests\n            return Code.Unavailable;\n        case 502: // Bad Gateway\n            return Code.Unavailable;\n        case 503: // Service Unavailable\n            return Code.Unavailable;\n        case 504: // Gateway Timeout\n            return Code.Unavailable;\n        default:\n            // 200 is UNKNOWN because there should be a grpc-status in case of truly OK response.\n            return Code.Unknown;\n    }\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { headerEncoding, headerGrpcMessage, headerGrpcStatus, } from \"./headers.js\";\nimport { codeFromHttpStatus } from \"../protocol-grpc/http-status.js\";\nimport { findTrailerError } from \"../protocol-grpc/trailer-status.js\";\n/**\n * Validates response status and header for the gRPC-web protocol.\n *\n * Throws a ConnectError if the header contains an error status,\n * or if the HTTP status indicates an error.\n *\n * Returns an object that indicates whether a gRPC status was found\n * in the response header. In this case, clients can not expect a\n * trailer.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function validateResponse(status, headers) {\n    var _a;\n    // For compatibility with the `grpc-web` package, we treat all HTTP status\n    // codes in the 200 range as valid, not just HTTP 200.\n    if (status >= 200 && status < 300) {\n        const err = findTrailerError(headers);\n        if (err) {\n            throw err;\n        }\n        return { foundStatus: headers.has(headerGrpcStatus) };\n    }\n    throw new ConnectError(decodeURIComponent((_a = headers.get(headerGrpcMessage)) !== null && _a !== void 0 ? _a : `HTTP ${status}`), codeFromHttpStatus(status), headers);\n}\n/**\n * Validates response status and header for the gRPC-web protocol.\n * This function is identical to validateResponse(), but also verifies\n * that a given encoding header is acceptable.\n *\n * Returns an object with the response compression, and a boolean\n * indicating whether a gRPC status was found in the response header\n * (in this case, clients can not expect a trailer).\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function validateResponseWithCompression(acceptCompression, status, headers) {\n    const { foundStatus } = validateResponse(status, headers);\n    let compression;\n    const encoding = headers.get(headerEncoding);\n    if (encoding !== null && encoding.toLowerCase() !== \"identity\") {\n        compression = acceptCompression.find((c) => c.name === encoding);\n        if (!compression) {\n            throw new ConnectError(`unsupported response encoding \"${encoding}\"`, Code.InvalidArgument, headers);\n        }\n    }\n    return {\n        foundStatus,\n        compression,\n    };\n}\n","// Copyright 2021-2023 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodKind } from \"@bufbuild/protobuf\";\nimport { createContextValues } from \"@connectrpc/connect\";\nimport { createClientMethodSerializers, createEnvelopeReadableStream, createMethodUrl, encodeEnvelope, runStreamingCall, runUnaryCall, } from \"@connectrpc/connect/protocol\";\nimport { requestHeader, trailerFlag, trailerParse, validateResponse, validateTrailer, } from \"@connectrpc/connect/protocol-grpc-web\";\nimport { assertFetchApi } from \"./assert-fetch-api.js\";\n/**\n * Create a Transport for the gRPC-web protocol. The protocol encodes\n * trailers in the response body and makes unary and server-streaming\n * methods available to web browsers. It uses the fetch API to make\n * HTTP requests.\n *\n * Note that this transport does not implement the grpc-web-text format,\n * which applies base64 encoding to the request and response bodies to\n * support reading streaming responses from an XMLHttpRequest.\n */\nexport function createGrpcWebTransport(options) {\n    var _a;\n    assertFetchApi();\n    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : true;\n    return {\n        async unary(service, method, signal, timeoutMs, header, message, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            timeoutMs =\n                timeoutMs === undefined\n                    ? options.defaultTimeoutMs\n                    : timeoutMs <= 0\n                        ? undefined\n                        : timeoutMs;\n            return await runUnaryCall({\n                interceptors: options.interceptors,\n                signal,\n                timeoutMs,\n                req: {\n                    stream: false,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(useBinaryFormat, timeoutMs, header, false),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message,\n                },\n                next: async (req) => {\n                    var _a;\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: encodeEnvelope(0, serialize(req.message)) }));\n                    validateResponse(response.status, response.headers);\n                    if (!response.body) {\n                        throw \"missing response body\";\n                    }\n                    const reader = createEnvelopeReadableStream(response.body).getReader();\n                    let trailer;\n                    let message;\n                    for (;;) {\n                        const r = await reader.read();\n                        if (r.done) {\n                            break;\n                        }\n                        const { flags, data } = r.value;\n                        if (flags === trailerFlag) {\n                            if (trailer !== undefined) {\n                                throw \"extra trailer\";\n                            }\n                            // Unary responses require exactly one response message, but in\n                            // case of an error, it is perfectly valid to have a response body\n                            // that only contains error trailers.\n                            trailer = trailerParse(data);\n                            continue;\n                        }\n                        if (message !== undefined) {\n                            throw \"extra message\";\n                        }\n                        message = parse(data);\n                    }\n                    if (trailer === undefined) {\n                        throw \"missing trailer\";\n                    }\n                    validateTrailer(trailer, response.headers);\n                    if (message === undefined) {\n                        throw \"missing message\";\n                    }\n                    return {\n                        stream: false,\n                        header: response.headers,\n                        message,\n                        trailer,\n                    };\n                },\n            });\n        },\n        async stream(service, method, signal, timeoutMs, header, input, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            function parseResponseBody(body, foundStatus, trailerTarget, header) {\n                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {\n                    const reader = createEnvelopeReadableStream(body).getReader();\n                    if (foundStatus) {\n                        // A grpc-status: 0 response header was present. This is a \"trailers-only\"\n                        // response (a response without a body and no trailers).\n                        //\n                        // The spec seems to disallow a trailers-only response for status 0 - we are\n                        // lenient and only verify that the body is empty.\n                        //\n                        // > [...] Trailers-Only is permitted for calls that produce an immediate error.\n                        // See https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md\n                        if (!(yield __await(reader.read())).done) {\n                            throw \"extra data for trailers-only\";\n                        }\n                        return yield __await(void 0);\n                    }\n                    let trailerReceived = false;\n                    for (;;) {\n                        const result = yield __await(reader.read());\n                        if (result.done) {\n                            break;\n                        }\n                        const { flags, data } = result.value;\n                        if ((flags & trailerFlag) === trailerFlag) {\n                            if (trailerReceived) {\n                                throw \"extra trailer\";\n                            }\n                            trailerReceived = true;\n                            const trailer = trailerParse(data);\n                            validateTrailer(trailer, header);\n                            trailer.forEach((value, key) => trailerTarget.set(key, value));\n                            continue;\n                        }\n                        if (trailerReceived) {\n                            throw \"extra message\";\n                        }\n                        yield yield __await(parse(data));\n                        continue;\n                    }\n                    if (!trailerReceived) {\n                        throw \"missing trailer\";\n                    }\n                });\n            }\n            async function createRequestBody(input) {\n                if (method.kind != MethodKind.ServerStreaming) {\n                    throw \"The fetch API does not support streaming request bodies\";\n                }\n                const r = await input[Symbol.asyncIterator]().next();\n                if (r.done == true) {\n                    throw \"missing request message\";\n                }\n                return encodeEnvelope(0, serialize(r.value));\n            }\n            timeoutMs =\n                timeoutMs === undefined\n                    ? options.defaultTimeoutMs\n                    : timeoutMs <= 0\n                        ? undefined\n                        : timeoutMs;\n            return runStreamingCall({\n                interceptors: options.interceptors,\n                signal,\n                timeoutMs,\n                req: {\n                    stream: true,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(useBinaryFormat, timeoutMs, header, false),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message: input,\n                },\n                next: async (req) => {\n                    var _a;\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));\n                    const { foundStatus } = validateResponse(fRes.status, fRes.headers);\n                    if (!fRes.body) {\n                        throw \"missing response body\";\n                    }\n                    const trailer = new Headers();\n                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, foundStatus, trailer, fRes.headers) });\n                    return res;\n                },\n            });\n        },\n    };\n}\n","//\n// Copyright 2022 The Yorkie Authors. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.6.0 with parameter \"target=js+dts,js_import_style=module\"\n// @generated from file src/api/yorkie/v1/resources.proto (package yorkie.v1, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3, StringValue, Timestamp } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from enum yorkie.v1.ValueType\n */\nexport const ValueType = proto3.makeEnum(\n  \"yorkie.v1.ValueType\",\n  [\n    {no: 0, name: \"VALUE_TYPE_NULL\", localName: \"NULL\"},\n    {no: 1, name: \"VALUE_TYPE_BOOLEAN\", localName: \"BOOLEAN\"},\n    {no: 2, name: \"VALUE_TYPE_INTEGER\", localName: \"INTEGER\"},\n    {no: 3, name: \"VALUE_TYPE_LONG\", localName: \"LONG\"},\n    {no: 4, name: \"VALUE_TYPE_DOUBLE\", localName: \"DOUBLE\"},\n    {no: 5, name: \"VALUE_TYPE_STRING\", localName: \"STRING\"},\n    {no: 6, name: \"VALUE_TYPE_BYTES\", localName: \"BYTES\"},\n    {no: 7, name: \"VALUE_TYPE_DATE\", localName: \"DATE\"},\n    {no: 8, name: \"VALUE_TYPE_JSON_OBJECT\", localName: \"JSON_OBJECT\"},\n    {no: 9, name: \"VALUE_TYPE_JSON_ARRAY\", localName: \"JSON_ARRAY\"},\n    {no: 10, name: \"VALUE_TYPE_TEXT\", localName: \"TEXT\"},\n    {no: 11, name: \"VALUE_TYPE_INTEGER_CNT\", localName: \"INTEGER_CNT\"},\n    {no: 12, name: \"VALUE_TYPE_LONG_CNT\", localName: \"LONG_CNT\"},\n    {no: 13, name: \"VALUE_TYPE_TREE\", localName: \"TREE\"},\n  ],\n);\n\n/**\n * @generated from enum yorkie.v1.DocEventType\n */\nexport const DocEventType = proto3.makeEnum(\n  \"yorkie.v1.DocEventType\",\n  [\n    {no: 0, name: \"DOC_EVENT_TYPE_DOCUMENT_CHANGED\", localName: \"DOCUMENT_CHANGED\"},\n    {no: 1, name: \"DOC_EVENT_TYPE_DOCUMENT_WATCHED\", localName: \"DOCUMENT_WATCHED\"},\n    {no: 2, name: \"DOC_EVENT_TYPE_DOCUMENT_UNWATCHED\", localName: \"DOCUMENT_UNWATCHED\"},\n    {no: 3, name: \"DOC_EVENT_TYPE_DOCUMENT_BROADCAST\", localName: \"DOCUMENT_BROADCAST\"},\n  ],\n);\n\n/**\n * ///////////////////////////////////////\n * Messages for Snapshot               //\n * ///////////////////////////////////////\n *\n * @generated from message yorkie.v1.Snapshot\n */\nexport const Snapshot = proto3.makeMessageType(\n  \"yorkie.v1.Snapshot\",\n  () => [\n    { no: 1, name: \"root\", kind: \"message\", T: JSONElement },\n    { no: 2, name: \"presences\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: Presence} },\n  ],\n);\n\n/**\n * ChangePack is a message that contains all changes that occurred in a document.\n * It is used to synchronize changes between clients and servers.\n *\n * @generated from message yorkie.v1.ChangePack\n */\nexport const ChangePack = proto3.makeMessageType(\n  \"yorkie.v1.ChangePack\",\n  () => [\n    { no: 1, name: \"document_key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"checkpoint\", kind: \"message\", T: Checkpoint },\n    { no: 3, name: \"snapshot\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 4, name: \"changes\", kind: \"message\", T: Change, repeated: true },\n    { no: 5, name: \"min_synced_ticket\", kind: \"message\", T: TimeTicket },\n    { no: 6, name: \"is_removed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Change\n */\nexport const Change = proto3.makeMessageType(\n  \"yorkie.v1.Change\",\n  () => [\n    { no: 1, name: \"id\", kind: \"message\", T: ChangeID },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"operations\", kind: \"message\", T: Operation, repeated: true },\n    { no: 4, name: \"presence_change\", kind: \"message\", T: PresenceChange },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.ChangeID\n */\nexport const ChangeID = proto3.makeMessageType(\n  \"yorkie.v1.ChangeID\",\n  () => [\n    { no: 1, name: \"client_seq\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"server_seq\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, L: 1 /* LongType.STRING */ },\n    { no: 3, name: \"lamport\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, L: 1 /* LongType.STRING */ },\n    { no: 4, name: \"actor_id\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Operation\n */\nexport const Operation = proto3.makeMessageType(\n  \"yorkie.v1.Operation\",\n  () => [\n    { no: 1, name: \"set\", kind: \"message\", T: Operation_Set, oneof: \"body\" },\n    { no: 2, name: \"add\", kind: \"message\", T: Operation_Add, oneof: \"body\" },\n    { no: 3, name: \"move\", kind: \"message\", T: Operation_Move, oneof: \"body\" },\n    { no: 4, name: \"remove\", kind: \"message\", T: Operation_Remove, oneof: \"body\" },\n    { no: 5, name: \"edit\", kind: \"message\", T: Operation_Edit, oneof: \"body\" },\n    { no: 6, name: \"select\", kind: \"message\", T: Operation_Select, oneof: \"body\" },\n    { no: 7, name: \"style\", kind: \"message\", T: Operation_Style, oneof: \"body\" },\n    { no: 8, name: \"increase\", kind: \"message\", T: Operation_Increase, oneof: \"body\" },\n    { no: 9, name: \"tree_edit\", kind: \"message\", T: Operation_TreeEdit, oneof: \"body\" },\n    { no: 10, name: \"tree_style\", kind: \"message\", T: Operation_TreeStyle, oneof: \"body\" },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Set\n */\nexport const Operation_Set = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Set\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"value\", kind: \"message\", T: JSONElementSimple },\n    { no: 4, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Set\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Add\n */\nexport const Operation_Add = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Add\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"prev_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"value\", kind: \"message\", T: JSONElementSimple },\n    { no: 4, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Add\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Move\n */\nexport const Operation_Move = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Move\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"prev_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Move\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Remove\n */\nexport const Operation_Remove = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Remove\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Remove\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Edit\n */\nexport const Operation_Edit = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Edit\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"from\", kind: \"message\", T: TextNodePos },\n    { no: 3, name: \"to\", kind: \"message\", T: TextNodePos },\n    { no: 4, name: \"created_at_map_by_actor\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: TimeTicket} },\n    { no: 5, name: \"content\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n    { no: 7, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ],\n  {localName: \"Operation_Edit\"},\n);\n\n/**\n * NOTE(hackerwins): Select Operation is not used in the current version.\n * In the previous version, it was used to represent selection of Text.\n * However, it has been replaced by Presence now. It is retained for backward\n * compatibility purposes.\n *\n * @generated from message yorkie.v1.Operation.Select\n */\nexport const Operation_Select = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Select\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"from\", kind: \"message\", T: TextNodePos },\n    { no: 3, name: \"to\", kind: \"message\", T: TextNodePos },\n    { no: 4, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Select\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Style\n */\nexport const Operation_Style = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Style\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"from\", kind: \"message\", T: TextNodePos },\n    { no: 3, name: \"to\", kind: \"message\", T: TextNodePos },\n    { no: 4, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 5, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n    { no: 6, name: \"created_at_map_by_actor\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: TimeTicket} },\n  ],\n  {localName: \"Operation_Style\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.Increase\n */\nexport const Operation_Increase = proto3.makeMessageType(\n  \"yorkie.v1.Operation.Increase\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"value\", kind: \"message\", T: JSONElementSimple },\n    { no: 3, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_Increase\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.TreeEdit\n */\nexport const Operation_TreeEdit = proto3.makeMessageType(\n  \"yorkie.v1.Operation.TreeEdit\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"from\", kind: \"message\", T: TreePos },\n    { no: 3, name: \"to\", kind: \"message\", T: TreePos },\n    { no: 4, name: \"created_at_map_by_actor\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: TimeTicket} },\n    { no: 5, name: \"contents\", kind: \"message\", T: TreeNodes, repeated: true },\n    { no: 7, name: \"split_level\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 6, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"Operation_TreeEdit\"},\n);\n\n/**\n * @generated from message yorkie.v1.Operation.TreeStyle\n */\nexport const Operation_TreeStyle = proto3.makeMessageType(\n  \"yorkie.v1.Operation.TreeStyle\",\n  () => [\n    { no: 1, name: \"parent_created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"from\", kind: \"message\", T: TreePos },\n    { no: 3, name: \"to\", kind: \"message\", T: TreePos },\n    { no: 4, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 5, name: \"executed_at\", kind: \"message\", T: TimeTicket },\n    { no: 6, name: \"attributes_to_remove\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 7, name: \"created_at_map_by_actor\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: TimeTicket} },\n  ],\n  {localName: \"Operation_TreeStyle\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElementSimple\n */\nexport const JSONElementSimple = proto3.makeMessageType(\n  \"yorkie.v1.JSONElementSimple\",\n  () => [\n    { no: 1, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"type\", kind: \"enum\", T: proto3.getEnumType(ValueType) },\n    { no: 5, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement\n */\nexport const JSONElement = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement\",\n  () => [\n    { no: 1, name: \"json_object\", kind: \"message\", T: JSONElement_JSONObject, oneof: \"body\" },\n    { no: 2, name: \"json_array\", kind: \"message\", T: JSONElement_JSONArray, oneof: \"body\" },\n    { no: 3, name: \"primitive\", kind: \"message\", T: JSONElement_Primitive, oneof: \"body\" },\n    { no: 5, name: \"text\", kind: \"message\", T: JSONElement_Text, oneof: \"body\" },\n    { no: 6, name: \"counter\", kind: \"message\", T: JSONElement_Counter, oneof: \"body\" },\n    { no: 7, name: \"tree\", kind: \"message\", T: JSONElement_Tree, oneof: \"body\" },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.JSONObject\n */\nexport const JSONElement_JSONObject = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.JSONObject\",\n  () => [\n    { no: 1, name: \"nodes\", kind: \"message\", T: RHTNode, repeated: true },\n    { no: 2, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_JSONObject\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.JSONArray\n */\nexport const JSONElement_JSONArray = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.JSONArray\",\n  () => [\n    { no: 1, name: \"nodes\", kind: \"message\", T: RGANode, repeated: true },\n    { no: 2, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_JSONArray\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.Primitive\n */\nexport const JSONElement_Primitive = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.Primitive\",\n  () => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(ValueType) },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 5, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_Primitive\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.Text\n */\nexport const JSONElement_Text = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.Text\",\n  () => [\n    { no: 1, name: \"nodes\", kind: \"message\", T: TextNode, repeated: true },\n    { no: 2, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_Text\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.Counter\n */\nexport const JSONElement_Counter = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.Counter\",\n  () => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(ValueType) },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 5, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_Counter\"},\n);\n\n/**\n * @generated from message yorkie.v1.JSONElement.Tree\n */\nexport const JSONElement_Tree = proto3.makeMessageType(\n  \"yorkie.v1.JSONElement.Tree\",\n  () => [\n    { no: 1, name: \"nodes\", kind: \"message\", T: TreeNode, repeated: true },\n    { no: 2, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"moved_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n  ],\n  {localName: \"JSONElement_Tree\"},\n);\n\n/**\n * @generated from message yorkie.v1.RHTNode\n */\nexport const RHTNode = proto3.makeMessageType(\n  \"yorkie.v1.RHTNode\",\n  () => [\n    { no: 1, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"element\", kind: \"message\", T: JSONElement },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.RGANode\n */\nexport const RGANode = proto3.makeMessageType(\n  \"yorkie.v1.RGANode\",\n  () => [\n    { no: 1, name: \"next\", kind: \"message\", T: RGANode },\n    { no: 2, name: \"element\", kind: \"message\", T: JSONElement },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.NodeAttr\n */\nexport const NodeAttr = proto3.makeMessageType(\n  \"yorkie.v1.NodeAttr\",\n  () => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"updated_at\", kind: \"message\", T: TimeTicket },\n    { no: 3, name: \"is_removed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TextNode\n */\nexport const TextNode = proto3.makeMessageType(\n  \"yorkie.v1.TextNode\",\n  () => [\n    { no: 1, name: \"id\", kind: \"message\", T: TextNodeID },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n    { no: 4, name: \"ins_prev_id\", kind: \"message\", T: TextNodeID },\n    { no: 5, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: NodeAttr} },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TextNodeID\n */\nexport const TextNodeID = proto3.makeMessageType(\n  \"yorkie.v1.TextNodeID\",\n  () => [\n    { no: 1, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"offset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TreeNode\n */\nexport const TreeNode = proto3.makeMessageType(\n  \"yorkie.v1.TreeNode\",\n  () => [\n    { no: 1, name: \"id\", kind: \"message\", T: TreeNodeID },\n    { no: 2, name: \"type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"removed_at\", kind: \"message\", T: TimeTicket },\n    { no: 5, name: \"ins_prev_id\", kind: \"message\", T: TreeNodeID },\n    { no: 6, name: \"ins_next_id\", kind: \"message\", T: TreeNodeID },\n    { no: 7, name: \"depth\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 8, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"message\", T: NodeAttr} },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TreeNodes\n */\nexport const TreeNodes = proto3.makeMessageType(\n  \"yorkie.v1.TreeNodes\",\n  () => [\n    { no: 1, name: \"content\", kind: \"message\", T: TreeNode, repeated: true },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TreeNodeID\n */\nexport const TreeNodeID = proto3.makeMessageType(\n  \"yorkie.v1.TreeNodeID\",\n  () => [\n    { no: 1, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"offset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TreePos\n */\nexport const TreePos = proto3.makeMessageType(\n  \"yorkie.v1.TreePos\",\n  () => [\n    { no: 1, name: \"parent_id\", kind: \"message\", T: TreeNodeID },\n    { no: 2, name: \"left_sibling_id\", kind: \"message\", T: TreeNodeID },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.User\n */\nexport const User = proto3.makeMessageType(\n  \"yorkie.v1.User\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"created_at\", kind: \"message\", T: Timestamp },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Project\n */\nexport const Project = proto3.makeMessageType(\n  \"yorkie.v1.Project\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"public_key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"secret_key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"auth_webhook_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"auth_webhook_methods\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 7, name: \"client_deactivate_threshold\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"created_at\", kind: \"message\", T: Timestamp },\n    { no: 9, name: \"updated_at\", kind: \"message\", T: Timestamp },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.UpdatableProjectFields\n */\nexport const UpdatableProjectFields = proto3.makeMessageType(\n  \"yorkie.v1.UpdatableProjectFields\",\n  () => [\n    { no: 1, name: \"name\", kind: \"message\", T: StringValue },\n    { no: 2, name: \"auth_webhook_url\", kind: \"message\", T: StringValue },\n    { no: 3, name: \"auth_webhook_methods\", kind: \"message\", T: UpdatableProjectFields_AuthWebhookMethods },\n    { no: 4, name: \"client_deactivate_threshold\", kind: \"message\", T: StringValue },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.UpdatableProjectFields.AuthWebhookMethods\n */\nexport const UpdatableProjectFields_AuthWebhookMethods = proto3.makeMessageType(\n  \"yorkie.v1.UpdatableProjectFields.AuthWebhookMethods\",\n  () => [\n    { no: 1, name: \"methods\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ],\n  {localName: \"UpdatableProjectFields_AuthWebhookMethods\"},\n);\n\n/**\n * @generated from message yorkie.v1.DocumentSummary\n */\nexport const DocumentSummary = proto3.makeMessageType(\n  \"yorkie.v1.DocumentSummary\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"snapshot\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"created_at\", kind: \"message\", T: Timestamp },\n    { no: 5, name: \"accessed_at\", kind: \"message\", T: Timestamp },\n    { no: 6, name: \"updated_at\", kind: \"message\", T: Timestamp },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.PresenceChange\n */\nexport const PresenceChange = proto3.makeMessageType(\n  \"yorkie.v1.PresenceChange\",\n  () => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(PresenceChange_ChangeType) },\n    { no: 2, name: \"presence\", kind: \"message\", T: Presence },\n  ],\n);\n\n/**\n * @generated from enum yorkie.v1.PresenceChange.ChangeType\n */\nexport const PresenceChange_ChangeType = proto3.makeEnum(\n  \"yorkie.v1.PresenceChange.ChangeType\",\n  [\n    {no: 0, name: \"CHANGE_TYPE_UNSPECIFIED\", localName: \"UNSPECIFIED\"},\n    {no: 1, name: \"CHANGE_TYPE_PUT\", localName: \"PUT\"},\n    {no: 2, name: \"CHANGE_TYPE_DELETE\", localName: \"DELETE\"},\n    {no: 3, name: \"CHANGE_TYPE_CLEAR\", localName: \"CLEAR\"},\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Presence\n */\nexport const Presence = proto3.makeMessageType(\n  \"yorkie.v1.Presence\",\n  () => [\n    { no: 1, name: \"data\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.Checkpoint\n */\nexport const Checkpoint = proto3.makeMessageType(\n  \"yorkie.v1.Checkpoint\",\n  () => [\n    { no: 1, name: \"server_seq\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, L: 1 /* LongType.STRING */ },\n    { no: 2, name: \"client_seq\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TextNodePos\n */\nexport const TextNodePos = proto3.makeMessageType(\n  \"yorkie.v1.TextNodePos\",\n  () => [\n    { no: 1, name: \"created_at\", kind: \"message\", T: TimeTicket },\n    { no: 2, name: \"offset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"relative_offset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.TimeTicket\n */\nexport const TimeTicket = proto3.makeMessageType(\n  \"yorkie.v1.TimeTicket\",\n  () => [\n    { no: 1, name: \"lamport\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, L: 1 /* LongType.STRING */ },\n    { no: 2, name: \"delimiter\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"actor_id\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DocEventBody\n */\nexport const DocEventBody = proto3.makeMessageType(\n  \"yorkie.v1.DocEventBody\",\n  () => [\n    { no: 1, name: \"topic\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"payload\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DocEvent\n */\nexport const DocEvent = proto3.makeMessageType(\n  \"yorkie.v1.DocEvent\",\n  () => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(DocEventType) },\n    { no: 2, name: \"publisher\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"body\", kind: \"message\", T: DocEventBody },\n  ],\n);\n\n","//\n// Copyright 2020 The Yorkie Authors. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.6.0 with parameter \"target=js+dts,js_import_style=module\"\n// @generated from file src/api/yorkie/v1/yorkie.proto (package yorkie.v1, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { ChangePack, DocEvent } from \"./resources_pb.js\";\n\n/**\n * @generated from message yorkie.v1.ActivateClientRequest\n */\nexport const ActivateClientRequest = proto3.makeMessageType(\n  \"yorkie.v1.ActivateClientRequest\",\n  () => [\n    { no: 1, name: \"client_key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.ActivateClientResponse\n */\nexport const ActivateClientResponse = proto3.makeMessageType(\n  \"yorkie.v1.ActivateClientResponse\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DeactivateClientRequest\n */\nexport const DeactivateClientRequest = proto3.makeMessageType(\n  \"yorkie.v1.DeactivateClientRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DeactivateClientResponse\n */\nexport const DeactivateClientResponse = proto3.makeMessageType(\n  \"yorkie.v1.DeactivateClientResponse\",\n  [],\n);\n\n/**\n * @generated from message yorkie.v1.AttachDocumentRequest\n */\nexport const AttachDocumentRequest = proto3.makeMessageType(\n  \"yorkie.v1.AttachDocumentRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.AttachDocumentResponse\n */\nexport const AttachDocumentResponse = proto3.makeMessageType(\n  \"yorkie.v1.AttachDocumentResponse\",\n  () => [\n    { no: 1, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DetachDocumentRequest\n */\nexport const DetachDocumentRequest = proto3.makeMessageType(\n  \"yorkie.v1.DetachDocumentRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"change_pack\", kind: \"message\", T: ChangePack },\n    { no: 4, name: \"remove_if_not_attached\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.DetachDocumentResponse\n */\nexport const DetachDocumentResponse = proto3.makeMessageType(\n  \"yorkie.v1.DetachDocumentResponse\",\n  () => [\n    { no: 2, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.WatchDocumentRequest\n */\nexport const WatchDocumentRequest = proto3.makeMessageType(\n  \"yorkie.v1.WatchDocumentRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.WatchDocumentResponse\n */\nexport const WatchDocumentResponse = proto3.makeMessageType(\n  \"yorkie.v1.WatchDocumentResponse\",\n  () => [\n    { no: 1, name: \"initialization\", kind: \"message\", T: WatchDocumentResponse_Initialization, oneof: \"body\" },\n    { no: 2, name: \"event\", kind: \"message\", T: DocEvent, oneof: \"body\" },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.WatchDocumentResponse.Initialization\n */\nexport const WatchDocumentResponse_Initialization = proto3.makeMessageType(\n  \"yorkie.v1.WatchDocumentResponse.Initialization\",\n  () => [\n    { no: 1, name: \"client_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ],\n  {localName: \"WatchDocumentResponse_Initialization\"},\n);\n\n/**\n * @generated from message yorkie.v1.RemoveDocumentRequest\n */\nexport const RemoveDocumentRequest = proto3.makeMessageType(\n  \"yorkie.v1.RemoveDocumentRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.RemoveDocumentResponse\n */\nexport const RemoveDocumentResponse = proto3.makeMessageType(\n  \"yorkie.v1.RemoveDocumentResponse\",\n  () => [\n    { no: 1, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.PushPullChangesRequest\n */\nexport const PushPullChangesRequest = proto3.makeMessageType(\n  \"yorkie.v1.PushPullChangesRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"change_pack\", kind: \"message\", T: ChangePack },\n    { no: 4, name: \"push_only\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.PushPullChangesResponse\n */\nexport const PushPullChangesResponse = proto3.makeMessageType(\n  \"yorkie.v1.PushPullChangesResponse\",\n  () => [\n    { no: 1, name: \"change_pack\", kind: \"message\", T: ChangePack },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.BroadcastRequest\n */\nexport const BroadcastRequest = proto3.makeMessageType(\n  \"yorkie.v1.BroadcastRequest\",\n  () => [\n    { no: 1, name: \"client_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"document_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"topic\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"payload\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message yorkie.v1.BroadcastResponse\n */\nexport const BroadcastResponse = proto3.makeMessageType(\n  \"yorkie.v1.BroadcastResponse\",\n  [],\n);\n\n","//\n// Copyright 2020 The Yorkie Authors. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-connect-es v1.2.0 with parameter \"target=js+dts,js_import_style=module\"\n// @generated from file src/api/yorkie/v1/yorkie.proto (package yorkie.v1, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ActivateClientRequest, ActivateClientResponse, AttachDocumentRequest, AttachDocumentResponse, BroadcastRequest, BroadcastResponse, DeactivateClientRequest, DeactivateClientResponse, DetachDocumentRequest, DetachDocumentResponse, PushPullChangesRequest, PushPullChangesResponse, RemoveDocumentRequest, RemoveDocumentResponse, WatchDocumentRequest, WatchDocumentResponse } from \"./yorkie_pb.js\";\nimport { MethodKind } from \"@bufbuild/protobuf\";\n\n/**\n * Yorkie is a service that provides a API for SDKs.\n *\n * @generated from service yorkie.v1.YorkieService\n */\nexport const YorkieService = {\n  typeName: \"yorkie.v1.YorkieService\",\n  methods: {\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.ActivateClient\n     */\n    activateClient: {\n      name: \"ActivateClient\",\n      I: ActivateClientRequest,\n      O: ActivateClientResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.DeactivateClient\n     */\n    deactivateClient: {\n      name: \"DeactivateClient\",\n      I: DeactivateClientRequest,\n      O: DeactivateClientResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.AttachDocument\n     */\n    attachDocument: {\n      name: \"AttachDocument\",\n      I: AttachDocumentRequest,\n      O: AttachDocumentResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.DetachDocument\n     */\n    detachDocument: {\n      name: \"DetachDocument\",\n      I: DetachDocumentRequest,\n      O: DetachDocumentResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.RemoveDocument\n     */\n    removeDocument: {\n      name: \"RemoveDocument\",\n      I: RemoveDocumentRequest,\n      O: RemoveDocumentResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.PushPullChanges\n     */\n    pushPullChanges: {\n      name: \"PushPullChanges\",\n      I: PushPullChangesRequest,\n      O: PushPullChangesResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.WatchDocument\n     */\n    watchDocument: {\n      name: \"WatchDocument\",\n      I: WatchDocumentRequest,\n      O: WatchDocumentResponse,\n      kind: MethodKind.ServerStreaming,\n    },\n    /**\n     * @generated from rpc yorkie.v1.YorkieService.Broadcast\n     */\n    broadcast: {\n      name: \"Broadcast\",\n      I: BroadcastRequest,\n      O: BroadcastResponse,\n      kind: MethodKind.Unary,\n    },\n  }\n};\n\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum Code {\n  // Ok is returned when the operation completed successfully.\n  Ok = 'ok',\n\n  // ClientNotActive is returned when the client is not active.\n  ClientNotActive = 'client-not-active',\n\n  // Unimplemented is returned when the operation is not implemented.\n  Unimplemented = 'unimplemented',\n\n  // Unsupported is returned when the operation is not supported.\n  Unsupported = 'unsupported',\n\n  // DocumentNotAttached is returned when the document is not attached.\n  DocumentNotAttached = 'document-not-attached',\n\n  // DocumentNotDetached is returned when the document is not detached.\n  DocumentNotDetached = 'document-not-detached',\n\n  // DocumentRemoved is returned when the document is removed.\n  DocumentRemoved = 'document-removed',\n\n  // InvalidObjectKey is returned when the object key is invalid.\n  InvalidObjectKey = 'invalid-object-key',\n\n  // InvalidArgument is returned when the argument is invalid.\n  InvalidArgument = 'invalid-argument',\n}\n\n/**\n * `YorkieError` is an error returned by a Yorkie operation.\n */\nexport class YorkieError extends Error {\n  name = 'YorkieError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n    this.toString = (): string =>\n      `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * `deepcopy` returns a deep copy of the given object.\n */\nexport function deepcopy<T>(object: T): T {\n  if (object instanceof Map) {\n    const pairs = Array.from(object);\n    return new Map(JSON.parse(JSON.stringify(pairs))) as unknown as T;\n  }\n\n  return JSON.parse(JSON.stringify(object));\n}\n\n/**\n `isEmpty` returns whether parameter object is empty or not \n */\nexport const isEmpty = (object: object) => {\n  if (!object) {\n    return true;\n  }\n\n  return Object.entries(object).length === 0;\n};\n\n/**\n * `stringifyObjectValues` makes values of attributes to JSON parsable string.\n */\nexport const stringifyObjectValues = <A extends object>(\n  attributes: A,\n): Record<string, string> => {\n  const attrs: Record<string, string> = {};\n  for (const [key, value] of Object.entries(attributes)) {\n    attrs[key] = JSON.stringify(value);\n  }\n  return attrs;\n};\n\n/**\n `parseObjectValues` returns the JSON parsable string values to the origin states.\n */\nexport const parseObjectValues = <A extends object>(\n  attrs: Record<string, string>,\n): A => {\n  const attributes: Record<string, unknown> = {};\n  for (const [key, value] of Object.entries(attrs)) {\n    attributes[key] = JSON.parse(value);\n  }\n  return attributes as A;\n};\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepcopy } from '@yorkie-js-sdk/src/util/object';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\n\n/**\n * `PresenceChangeType` represents the type of presence change.\n */\nexport enum PresenceChangeType {\n  Put = 'put',\n  Clear = 'clear',\n}\n\n/**\n * `PresenceChange` represents the change of presence.\n */\nexport type PresenceChange<P extends Indexable> =\n  | { type: PresenceChangeType.Put; presence: P }\n  | { type: PresenceChangeType.Clear };\n\n/**\n * `Presence` represents a proxy for the Presence to be manipulated from the outside.\n */\nexport class Presence<P extends Indexable> {\n  private context: ChangeContext;\n  private presence: P;\n\n  constructor(changeContext: ChangeContext, presence: P) {\n    this.context = changeContext;\n    this.presence = presence;\n  }\n\n  /**\n   * `set` updates the presence based on the partial presence.\n   */\n  public set(presence: Partial<P>, option?: { addToHistory: boolean }) {\n    for (const key of Object.keys(presence)) {\n      this.presence[key as keyof P] = presence[key]!;\n    }\n\n    this.context.setPresenceChange({\n      type: PresenceChangeType.Put,\n      presence: deepcopy(this.presence),\n    });\n\n    this.context.setReversePresence(presence, option);\n  }\n\n  /**\n   * `get` returns the presence value of the given key.\n   */\n  public get<K extends keyof P>(key: K): P[K] {\n    return this.presence[key];\n  }\n\n  /**\n   * `clear` clears the presence.\n   * @internal\n   */\n  public clear() {\n    this.presence = {} as P;\n\n    this.context.setPresenceChange({\n      type: PresenceChangeType.Clear,\n    });\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * `ActorID` is used to identify who is making changes to the document.\n * It is a hexadecimal string and should be generated by a unique value.\n *\n * @public\n */\nexport type ActorID = string;\n\n/**\n * `InitialActorID` is the initial value of ActorID.\n */\nexport const InitialActorID = '000000000000000000000000';\n\n/**\n * `MaxActorID` is the maximum value of ActorID.\n */\nexport const MaxActorID = 'FFFFFFFFFFFFFFFFFFFFFFFF';\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\nimport { Comparator } from '@yorkie-js-sdk/src/util/comparator';\nimport {\n  ActorID,\n  InitialActorID,\n  MaxActorID,\n} from '@yorkie-js-sdk/src/document/time/actor_id';\n\nexport const TicketComparator: Comparator<TimeTicket> = (\n  p1: TimeTicket,\n  p2: TimeTicket,\n) => {\n  return p1.compare(p2);\n};\n\n/**\n * `TimeTicketStruct` is a structure represents the meta data of the ticket.\n * It is used to serialize and deserialize the ticket.\n */\nexport type TimeTicketStruct = {\n  lamport: string;\n  delimiter: number;\n  actorID: ActorID;\n};\n\n/**\n * `TimeTicket` is a timestamp of the logical clock. Ticket is immutable.\n * It is created by `ChangeID`.\n *\n * @public\n */\nexport class TimeTicket {\n  private lamport: Long;\n  private delimiter: number;\n  private actorID: ActorID;\n\n  constructor(lamport: Long, delimiter: number, actorID: string) {\n    this.lamport = lamport;\n    this.delimiter = delimiter;\n    this.actorID = actorID;\n  }\n\n  /**\n   * `of` creates an instance of Ticket.\n   */\n  public static of(\n    lamport: Long,\n    delimiter: number,\n    actorID: string,\n  ): TimeTicket {\n    return new TimeTicket(lamport, delimiter, actorID);\n  }\n\n  /**\n   * `fromStruct` creates an instance of Ticket from the struct.\n   */\n  public static fromStruct(struct: TimeTicketStruct): TimeTicket {\n    return TimeTicket.of(\n      Long.fromString(struct.lamport, true),\n      struct.delimiter,\n      struct.actorID,\n    );\n  }\n\n  /**\n   * `toIDString` returns the lamport string for this Ticket.\n   */\n  public toIDString(): string {\n    return `${this.lamport.toString()}:${this.actorID}:${this.delimiter}`;\n  }\n\n  /**\n   * `toStruct` returns the structure of this Ticket.\n   */\n  public toStruct(): TimeTicketStruct {\n    return {\n      lamport: this.getLamportAsString(),\n      delimiter: this.getDelimiter(),\n      actorID: this.getActorID(),\n    };\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of the ticket\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    return `${this.lamport.toString()}:${this.actorID.slice(-2)}:${\n      this.delimiter\n    }`;\n  }\n\n  /**\n   * `setActor` creates a new instance of Ticket with the given actorID.\n   */\n  public setActor(actorID: ActorID): TimeTicket {\n    return new TimeTicket(this.lamport, this.delimiter, actorID);\n  }\n\n  /**\n   * `getLamportAsString` returns the lamport string.\n   */\n  public getLamportAsString(): string {\n    return this.lamport.toString();\n  }\n\n  /**\n   * `getLamport` returns the lamport.\n   */\n  public getLamport(): Long {\n    return this.lamport;\n  }\n\n  /**\n   * `getDelimiter` returns delimiter.\n   */\n  public getDelimiter(): number {\n    return this.delimiter;\n  }\n\n  /**\n   * `getActorID` returns actorID.\n   */\n  public getActorID(): string {\n    return this.actorID;\n  }\n\n  /**\n   * `after` returns whether the given ticket was created later.\n   */\n  public after(other: TimeTicket): boolean {\n    return this.compare(other) > 0;\n  }\n\n  /**\n   * `equals` returns whether the given ticket was created.\n   */\n  public equals(other: TimeTicket): boolean {\n    return this.compare(other) === 0;\n  }\n\n  /**\n   * `compare` returns an integer comparing two Ticket.\n   *  The result will be 0 if id==other, -1 if `id < other`, and +1 if `id > other`.\n   *  If the receiver or argument is nil, it would panic at runtime.\n   */\n  public compare(other: TimeTicket): number {\n    if (this.lamport.greaterThan(other.lamport)) {\n      return 1;\n    } else if (other.lamport.greaterThan(this.lamport)) {\n      return -1;\n    }\n\n    const compare = this.actorID.localeCompare(other.actorID);\n    if (compare !== 0) {\n      return compare;\n    }\n\n    if (this.delimiter > other.delimiter) {\n      return 1;\n    } else if (other.delimiter > this.delimiter) {\n      return -1;\n    }\n\n    return 0;\n  }\n}\n\nexport const InitialDelimiter = 0;\nexport const MaxDelemiter = 4294967295; // UInt32 MAX_VALUE\nexport const MaxLamport = Long.MAX_VALUE;\n\nexport const InitialTimeTicket = new TimeTicket(\n  Long.fromNumber(0),\n  InitialDelimiter,\n  InitialActorID,\n);\n\nexport const NextTimeTicket = new TimeTicket(\n  Long.fromNumber(1),\n  InitialDelimiter + 1,\n  InitialActorID,\n);\n\nexport const MaxTimeTicket = new TimeTicket(\n  MaxLamport,\n  MaxDelemiter,\n  MaxActorID,\n);\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogLevel {\n  Trivial,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal,\n}\n\nlet level = LogLevel.Info;\n\n/**\n * `setLogLevel` sets log level.\n */\nexport function setLogLevel(l: LogLevel): void {\n  level = l;\n}\n\nexport const logger = {\n  trivial: (...messages: Array<unknown>): void => {\n    if (level > LogLevel.Trivial) {\n      return;\n    }\n\n    if (typeof console != 'undefined') {\n      console.log('YORKIE T:', ...messages);\n    }\n  },\n\n  debug: (...messages: Array<unknown>): void => {\n    if (level > LogLevel.Debug) {\n      return;\n    }\n\n    if (typeof console != 'undefined') {\n      console.log('YORKIE D:', ...messages);\n    }\n  },\n\n  info: (...messages: Array<unknown>): void => {\n    if (level > LogLevel.Info) {\n      return;\n    }\n\n    if (typeof console != 'undefined') {\n      console.log('YORKIE I:', ...messages);\n    }\n  },\n\n  warn: (...messages: Array<unknown>): void => {\n    if (level > LogLevel.Warn) {\n      return;\n    }\n\n    if (typeof console != 'undefined') {\n      if (typeof console.warn !== 'undefined') {\n        console.warn('YORKIE W:', ...messages);\n      } else {\n        console.log('YORKIE W:', ...messages);\n      }\n    }\n  },\n\n  error: (...messages: Array<unknown>): void => {\n    if (level > LogLevel.Error) {\n      return;\n    }\n\n    if (typeof console != 'undefined') {\n      if (typeof console.error !== 'undefined') {\n        console.error('YORKIE E:', ...messages);\n      } else {\n        console.log('YORKIE E:', ...messages);\n      }\n    }\n  },\n\n  fatal: (message: string, ...messages: Array<unknown>): void => {\n    if (typeof console != 'undefined') {\n      if (typeof console.error !== 'undefined') {\n        console.error('YORKIE F:', ...messages);\n      } else {\n        console.log('YORKIE F:', ...messages);\n      }\n    }\n\n    throw new Error(`YORKIE F: ${message}`);\n  },\n\n  isEnabled: (l: LogLevel): boolean => {\n    return level <= l;\n  },\n};\n","/**\n * `EscapeString` escapes the given string.\n */\nexport function escapeString(str: string): string {\n  return str.replace(/[\"'\\\\\\n\\r\\f\\b\\t\\u2028\\u2029]/g, function (character) {\n    switch (character) {\n      case '\"':\n      case '\\\\':\n        return '\\\\' + character;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\f':\n        return '\\\\f';\n      case '\\b':\n        return '\\\\b';\n      case '\\t':\n        return '\\\\t';\n      case '\\u2028':\n        return '\\\\u2028';\n      case '\\u2029':\n        return '\\\\u2029';\n      default:\n        return character;\n    }\n  });\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `CRDTElement` represents an element that has `TimeTicket`s.\n *\n * @internal\n */\nexport abstract class CRDTElement {\n  private createdAt: TimeTicket;\n  private movedAt?: TimeTicket;\n  private removedAt?: TimeTicket;\n\n  constructor(createdAt: TimeTicket) {\n    this.createdAt = createdAt;\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of this element.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n\n  /**\n   * `getID` returns the creation time of this element.\n   */\n  public getID(): TimeTicket {\n    return this.createdAt;\n  }\n\n  /**\n   * `getMovedAt` returns the move time of this element.\n   */\n  public getMovedAt(): TimeTicket | undefined {\n    return this.movedAt;\n  }\n\n  /**\n   * `getRemovedAt` returns the removal time of this element.\n   */\n  public getRemovedAt(): TimeTicket | undefined {\n    return this.removedAt;\n  }\n\n  /**\n   * `getPositionedAt` returns the time of this element when it was positioned\n   * in the document by undo/redo or move operation.\n   */\n  public getPositionedAt(): TimeTicket {\n    if (!this.movedAt) {\n      return this.createdAt;\n    }\n\n    return this.movedAt;\n  }\n\n  /**\n   * `setMovedAt` sets the move time of this element.\n   */\n  public setMovedAt(movedAt?: TimeTicket): boolean {\n    if (!this.movedAt || (movedAt && movedAt.after(this.movedAt))) {\n      this.movedAt = movedAt;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * `setRemovedAt` sets the remove time of this element.\n   */\n  public setRemovedAt(removedAt?: TimeTicket): void {\n    this.removedAt = removedAt;\n  }\n\n  /**\n   * `remove` removes this element.\n   */\n  public remove(removedAt?: TimeTicket): boolean {\n    if (\n      removedAt &&\n      removedAt.after(this.getPositionedAt()) &&\n      (!this.removedAt || removedAt.after(this.removedAt))\n    ) {\n      // NOTE(chacha912): If it's a CRDTContainer, removedAt is marked only on\n      // the top-level element, without marking all descendant elements. This\n      // enhances the speed of deletion.\n      this.removedAt = removedAt;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * `isRemoved` check if this element was removed.\n   */\n  public isRemoved(): boolean {\n    return !!this.removedAt;\n  }\n\n  abstract toJSON(): string;\n  abstract toSortedJSON(): string;\n  abstract toJSForTest(): Devtools.JSONElement;\n  abstract deepcopy(): CRDTElement;\n}\n\n/**\n *\n * `CRDTContainer` represents CRDTArray or CRDtObject.\n */\nexport abstract class CRDTContainer extends CRDTElement {\n  constructor(createdAt: TimeTicket) {\n    super(createdAt);\n  }\n\n  /**\n   * `subPathOf` returns the sub path of the given element.\n   */\n  abstract subPathOf(createdAt: TimeTicket): string | undefined;\n\n  abstract purge(element: CRDTElement): void;\n\n  abstract delete(createdAt: TimeTicket, executedAt: TimeTicket): CRDTElement;\n\n  abstract getDescendants(\n    callback: (elem: CRDTElement, parent: CRDTContainer) => boolean,\n  ): void;\n\n  /**\n   * `get` returns the element of the given key or index. This method is called\n   * by users. So it should return undefined if the element is removed.\n   */\n  abstract get(keyOrIndex: string | number): CRDTElement | undefined;\n\n  /**\n   * `getByID` returns the element of the given creation time. This method is\n   * called by internal. So it should return the element even if the element is\n   * removed.\n   */\n  abstract getByID(createdAt: TimeTicket): CRDTElement | undefined;\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\n\n/**\n * `ElementRHTNode` is a node of ElementRHT.\n */\nexport class ElementRHTNode {\n  private strKey: string;\n  private value: CRDTElement;\n\n  constructor(strKey: string, value: CRDTElement) {\n    this.strKey = strKey;\n    this.value = value;\n  }\n\n  /**\n   * `of` creates a instance of ElementRHTNode.\n   */\n  public static of(strKey: string, value: CRDTElement): ElementRHTNode {\n    return new ElementRHTNode(strKey, value);\n  }\n\n  /**\n   * `isRemoved` checks whether this value was removed.\n   */\n  public isRemoved(): boolean {\n    return this.value.isRemoved();\n  }\n\n  /**\n   * `getStrKey` returns the key of this node.\n   */\n  public getStrKey(): string {\n    return this.strKey;\n  }\n\n  /**\n   * `getValue` return the value(element) of this node\n   */\n  public getValue(): CRDTElement {\n    return this.value;\n  }\n\n  /**\n   * `remove` removes a value base on removing time.\n   */\n  public remove(removedAt: TimeTicket): boolean {\n    return this.value.remove(removedAt);\n  }\n}\n\n/**\n * ElementRHT is a hashtable with logical clock(Replicated hashtable)\n *\n */\nexport class ElementRHT {\n  private nodeMapByKey: Map<string, ElementRHTNode>;\n  private nodeMapByCreatedAt: Map<string, ElementRHTNode>;\n\n  constructor() {\n    this.nodeMapByKey = new Map();\n    this.nodeMapByCreatedAt = new Map();\n  }\n\n  /**\n   * `create` creates an instance of ElementRHT.\n   */\n  public static create(): ElementRHT {\n    return new ElementRHT();\n  }\n\n  /**\n   * `set` sets the value of the given key.\n   */\n  public set(\n    key: string,\n    value: CRDTElement,\n    executedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    let removed;\n    const node = this.nodeMapByKey.get(key);\n    if (node != null && !node.isRemoved() && node.remove(executedAt)) {\n      removed = node.getValue();\n    }\n\n    const newNode = ElementRHTNode.of(key, value);\n    this.nodeMapByCreatedAt.set(value.getCreatedAt().toIDString(), newNode);\n    if (node == null || executedAt.after(node.getValue().getPositionedAt())) {\n      this.nodeMapByKey.set(key, newNode);\n      value.setMovedAt(executedAt);\n    }\n    return removed;\n  }\n\n  /**\n   * `delete` deletes the Element of the given key.\n   */\n  public delete(createdAt: TimeTicket, executedAt: TimeTicket): CRDTElement {\n    if (!this.nodeMapByCreatedAt.has(createdAt.toIDString())) {\n      logger.fatal(`fail to find ${createdAt.toIDString()}`);\n    }\n\n    const node = this.nodeMapByCreatedAt.get(createdAt.toIDString())!;\n    node.remove(executedAt);\n    return node.getValue();\n  }\n\n  /**\n   * `subPathOf` returns the sub path of the given element.\n   */\n  public subPathOf(createdAt: TimeTicket): string | undefined {\n    const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    if (!node) {\n      return;\n    }\n\n    return node.getStrKey();\n  }\n\n  /**\n   * `purge` physically purge child element.\n   */\n  public purge(element: CRDTElement): void {\n    const node = this.nodeMapByCreatedAt.get(\n      element.getCreatedAt().toIDString(),\n    );\n    if (!node) {\n      logger.fatal(`fail to find ${element.getCreatedAt().toIDString()}`);\n      return;\n    }\n\n    const nodeByKey = this.nodeMapByKey.get(node.getStrKey());\n    if (node === nodeByKey) {\n      this.nodeMapByKey.delete(nodeByKey.getStrKey());\n    }\n\n    this.nodeMapByCreatedAt.delete(node.getValue().getCreatedAt().toIDString());\n  }\n\n  /**\n   * `deleteByKey` deletes the Element of the given key and removed time.\n   */\n  public deleteByKey(\n    key: string,\n    removedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    const node = this.nodeMapByKey.get(key);\n    if (node == null) {\n      return;\n    }\n\n    if (!node.remove(removedAt)) {\n      return;\n    }\n\n    return node.getValue();\n  }\n\n  /**\n   * `has` returns whether the element exists of the given key or not.\n   */\n  public has(key: string): boolean {\n    const node = this.nodeMapByKey.get(key);\n    if (node == null) {\n      return false;\n    }\n    return !node.isRemoved();\n  }\n\n  /**\n   * `getByID` returns the node of the given createdAt.\n   */\n  public getByID(createdAt: TimeTicket): ElementRHTNode | undefined {\n    return this.nodeMapByCreatedAt.get(createdAt.toIDString());\n  }\n\n  /**\n   * `get` returns the node of the given key.\n   */\n  public get(key: string): ElementRHTNode | undefined {\n    const node = this.nodeMapByKey.get(key);\n    if (!node || node.isRemoved()) {\n      return;\n    }\n\n    return node;\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public *[Symbol.iterator](): IterableIterator<ElementRHTNode> {\n    for (const [, node] of this.nodeMapByKey) {\n      yield node;\n    }\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { escapeString } from '@yorkie-js-sdk/src/document/json/strings';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport {\n  CRDTContainer,\n  CRDTElement,\n} from '@yorkie-js-sdk/src/document/crdt/element';\nimport { ElementRHT } from '@yorkie-js-sdk/src/document/crdt/element_rht';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `CRDTObject` represents an object data type, but unlike regular JSON,\n * it has `TimeTicket`s which are created by logical clock.\n *\n */\nexport class CRDTObject extends CRDTContainer {\n  private memberNodes: ElementRHT;\n\n  constructor(createdAt: TimeTicket, memberNodes: ElementRHT) {\n    super(createdAt);\n    this.memberNodes = memberNodes;\n  }\n\n  /**\n   * `create` creates a new instance of CRDTObject.\n   */\n  public static create(\n    createdAt: TimeTicket,\n    value?: { [key: string]: CRDTElement },\n  ): CRDTObject {\n    if (!value) {\n      return new CRDTObject(createdAt, ElementRHT.create());\n    }\n\n    const memberNodes = ElementRHT.create();\n    for (const [k, v] of Object.entries(value)) {\n      memberNodes.set(k, v.deepcopy(), v.getCreatedAt());\n    }\n    return new CRDTObject(createdAt, memberNodes);\n  }\n\n  /**\n   * `subPathOf` returns the sub path of the given element.\n   */\n  public subPathOf(createdAt: TimeTicket): string | undefined {\n    return this.memberNodes.subPathOf(createdAt);\n  }\n\n  /**\n   * `purge` physically purges the given element.\n   */\n  public purge(value: CRDTElement): void {\n    this.memberNodes.purge(value);\n  }\n\n  /**\n   * `set` sets the given element of the given key.\n   */\n  public set(\n    key: string,\n    value: CRDTElement,\n    executedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    return this.memberNodes.set(key, value, executedAt);\n  }\n\n  /**\n   * `delete` deletes the element of the given key.\n   */\n  public delete(createdAt: TimeTicket, executedAt: TimeTicket): CRDTElement {\n    return this.memberNodes.delete(createdAt, executedAt);\n  }\n\n  /**\n   * `deleteByKey` deletes the element of the given key and execution time.\n   */\n  public deleteByKey(\n    key: string,\n    executedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    return this.memberNodes.deleteByKey(key, executedAt);\n  }\n\n  /**\n   * `get` returns the value of the given key.\n   */\n  public get(key: string): CRDTElement | undefined {\n    const node = this.memberNodes.get(key);\n    return node?.getValue();\n  }\n\n  /**\n   * `getByID` returns the element of the given createAt.\n   */\n  public getByID(createdAt: TimeTicket): CRDTElement | undefined {\n    const node = this.memberNodes.getByID(createdAt);\n    return node?.getValue();\n  }\n\n  /**\n   * `has` returns whether the element exists of the given key or not.\n   */\n  public has(key: string): boolean {\n    return this.memberNodes.has(key);\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this object.\n   */\n  public toJSON(): string {\n    const json = [];\n    for (const [key, value] of this) {\n      json.push(`\"${escapeString(key)}\":${value.toJSON()}`);\n    }\n    return `{${json.join(',')}}`;\n  }\n\n  /**\n   * `toJS` returns the JavaScript object of this object.\n   */\n  public toJS(): any {\n    return JSON.parse(this.toJSON());\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    const values: Devtools.ContainerValue = {};\n    for (const [key, elem] of this) {\n      const { createdAt, value, type } = elem.toJSForTest();\n      values[key] = {\n        key,\n        createdAt,\n        value,\n        type,\n      };\n    }\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: values,\n      type: 'YORKIE_OBJECT',\n    };\n  }\n\n  /**\n   * `getKeys` returns array of keys in this object.\n   */\n  public getKeys(): Array<string> {\n    const keys = Array<string>();\n    for (const [key] of this) {\n      keys.push(key);\n    }\n\n    return keys;\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this object.\n   */\n  public toSortedJSON(): string {\n    const keys = Array<string>();\n    for (const [key] of this) {\n      keys.push(key);\n    }\n\n    const json = [];\n    for (const key of keys.sort()) {\n      const node = this.memberNodes.get(key)?.getValue();\n      json.push(`\"${escapeString(key)}\":${node!.toSortedJSON()}`);\n    }\n\n    return `{${json.join(',')}}`;\n  }\n\n  /**\n   * `getRHT` RHTNodes returns the RHTPQMap nodes.\n   */\n  public getRHT(): ElementRHT {\n    return this.memberNodes;\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTObject {\n    const clone = CRDTObject.create(this.getCreatedAt());\n    for (const node of this.memberNodes) {\n      clone.memberNodes.set(\n        node.getStrKey(),\n        node.getValue().deepcopy(),\n        this.getPositionedAt(),\n      );\n    }\n    clone.remove(this.getRemovedAt());\n    return clone;\n  }\n\n  /**\n   * `getDescendants` returns the descendants of this object by traversing.\n   */\n  public getDescendants(\n    callback: (elem: CRDTElement, parent: CRDTContainer) => boolean,\n  ): void {\n    for (const node of this.memberNodes) {\n      const element = node.getValue();\n      if (callback(element, this)) {\n        return;\n      }\n\n      if (element instanceof CRDTContainer) {\n        element.getDescendants(callback);\n      }\n    }\n  }\n\n  /**\n   * eslint-disable-next-line jsdoc/require-jsdoc\n   * @internal\n   */\n  public *[Symbol.iterator](): IterableIterator<[string, CRDTElement]> {\n    const keySet = new Set<string>();\n    for (const node of this.memberNodes) {\n      if (!keySet.has(node.getStrKey())) {\n        keySet.add(node.getStrKey());\n        if (!node.isRemoved()) {\n          yield [node.getStrKey(), node.getValue()];\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { TreeNode } from '@yorkie-js-sdk/src/document/crdt/tree';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\n\n/**\n * `OpSource` represents the source of the operation. It is used to handle\n * corner cases in the operations created by undo/redo allow the removed\n * elements when executing them.\n */\nexport enum OpSource {\n  Local = 'local',\n  Remote = 'remote',\n  UndoRedo = 'undoredo',\n}\n\n/**\n * `OperationInfo` represents the information of an operation.\n * It is used to inform to the user what kind of operation was executed.\n */\nexport type OperationInfo =\n  | TextOperationInfo\n  | CounterOperationInfo\n  | ArrayOperationInfo\n  | ObjectOperationInfo\n  | TreeOperationInfo;\n\n/**\n * `TextOperationInfo` represents the OperationInfo for the yorkie.Text.\n */\nexport type TextOperationInfo = EditOpInfo | StyleOpInfo;\n\n/**\n * `CounterOperationInfo` represents the OperationInfo for the yorkie.Counter.\n */\nexport type CounterOperationInfo = IncreaseOpInfo;\n\n/**\n * `ArrayOperationInfo` represents the OperationInfo for the JSONArray.\n */\nexport type ArrayOperationInfo = AddOpInfo | RemoveOpInfo | MoveOpInfo;\n\n/**\n * `ObjectOperationInfo` represents the OperationInfo for the JSONObject.\n */\nexport type ObjectOperationInfo = SetOpInfo | RemoveOpInfo;\n\n/**\n * `TreeOperationInfo` represents the OperationInfo for the yorkie.Tree.\n */\nexport type TreeOperationInfo = TreeEditOpInfo | TreeStyleOpInfo;\n\n/**\n * `AddOpInfo` represents the information of the add operation.\n */\nexport type AddOpInfo = {\n  type: 'add';\n  path: string;\n  index: number;\n};\n\n/**\n * `MoveOpInfo` represents the information of the move operation.\n */\nexport type MoveOpInfo = {\n  type: 'move';\n  path: string;\n  previousIndex: number;\n  index: number;\n};\n\n/**\n * `SetOpInfo` represents the information of the set operation.\n */\nexport type SetOpInfo = {\n  type: 'set';\n  path: string;\n  key: string;\n};\n\n/**\n * `RemoveOpInfo` represents the information of the remove operation.\n */\nexport type RemoveOpInfo = {\n  type: 'remove';\n  path: string;\n  key?: string;\n  index?: number;\n};\n\n/**\n * `IncreaseOpInfo` represents the information of the increase operation.\n */\nexport type IncreaseOpInfo = {\n  type: 'increase';\n  path: string;\n  value: number;\n};\n\n/**\n * `EditOpInfo` represents the information of the edit operation.\n */\nexport type EditOpInfo = {\n  type: 'edit';\n  path: string;\n  from: number;\n  to: number;\n  value: {\n    attributes: Indexable;\n    content: string;\n  };\n};\n\n/**\n * `StyleOpInfo` represents the information of the style operation.\n */\nexport type StyleOpInfo = {\n  type: 'style';\n  path: string;\n  from: number;\n  to: number;\n  value: {\n    attributes: Indexable;\n  };\n};\n\n/**\n * `TreeEditOpInfo` represents the information of the tree edit operation.\n */\nexport type TreeEditOpInfo = {\n  type: 'tree-edit';\n  path: string;\n  from: number;\n  to: number;\n  value?: Array<TreeNode>;\n  splitLevel?: number;\n  fromPath: Array<number>;\n  toPath: Array<number>;\n};\n\n/**\n * `TreeStyleOpInfo` represents the information of the tree style operation.\n */\nexport type TreeStyleOpInfo = {\n  type: 'tree-style';\n  path: string;\n  from: number;\n  to: number;\n  fromPath: Array<number>;\n  toPath: Array<number>;\n  value: {\n    attributes?: Indexable;\n    attributesToRemove?: Array<string>;\n  };\n};\n\n/**\n * `ExecutionResult` represents the result of operation execution.\n */\nexport type ExecutionResult = {\n  opInfos: Array<OperationInfo>;\n  // TODO(chacha912): After implementing all of the reverseOperation,\n  // we change the type to non-optional.\n  reverseOp?: Operation;\n};\n\n/**\n * `Operation` represents an operation to be executed on a document.\n */\nexport abstract class Operation {\n  private parentCreatedAt: TimeTicket;\n  // NOTE(Hyemmie): `executedAt` variable is undefined if this operation is not executed yet.\n  private executedAt?: TimeTicket;\n\n  constructor(parentCreatedAt: TimeTicket, executedAt?: TimeTicket) {\n    this.parentCreatedAt = parentCreatedAt;\n    this.executedAt = executedAt;\n  }\n\n  /**\n   * `getParentCreatedAt` returns the creation time of the target element to\n   * execute the operation.\n   */\n  public getParentCreatedAt(): TimeTicket {\n    return this.parentCreatedAt;\n  }\n\n  /**\n   * `getExecutedAt` returns execution time of this operation.\n   */\n  public getExecutedAt(): TimeTicket {\n    // NOTE(chacha912): When an operation is in the undo/redo stack,\n    // it doesn't have an executedAt yet. The executedAt is set when\n    // the operation is executed through undo or redo.\n    if (!this.executedAt) {\n      throw new Error(`executedAt has not been set yet`);\n    }\n    return this.executedAt;\n  }\n\n  /**\n   * `setActor` sets the given actor to this operation.\n   */\n  public setActor(actorID: ActorID): void {\n    if (this.executedAt) {\n      this.executedAt = this.executedAt.setActor(actorID);\n    }\n  }\n\n  /**\n   * `setExecutedAt` sets the executedAt.\n   */\n  public setExecutedAt(executedAt: TimeTicket): void {\n    this.executedAt = executedAt;\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public abstract getEffectedCreatedAt(): TimeTicket;\n\n  /**\n   * `toTestString` returns a string containing the meta data for debugging purpose.\n   */\n  public abstract toTestString(): string;\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public abstract execute(\n    root: CRDTRoot,\n    source: OpSource,\n  ): ExecutionResult | undefined;\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\n\n/**\n * `SplayNode` is a node of SplayTree.\n */\nexport abstract class SplayNode<V> {\n  protected value: V;\n\n  private left?: SplayNode<V>;\n  private right?: SplayNode<V>;\n  private parent?: SplayNode<V>;\n  private weight!: number;\n\n  constructor(value: V) {\n    this.value = value;\n    this.initWeight();\n  }\n\n  abstract getLength(): number;\n\n  /**\n   * `getNodeString` returns a string of weight and value of this node.\n   */\n  public getNodeString(): string {\n    return `${this.weight}${this.value}`;\n  }\n\n  /**\n   * `getValue` returns value of this node.\n   */\n  public getValue(): V {\n    return this.value;\n  }\n\n  /**\n   * `getLeftWeight` returns left weight of this node.\n   */\n  public getLeftWeight(): number {\n    return !this.hasLeft() ? 0 : this.left!.getWeight();\n  }\n\n  /**\n   * `getRightWeight` returns right weight of this node.\n   */\n  public getRightWeight(): number {\n    return !this.hasRight() ? 0 : this.right!.getWeight();\n  }\n\n  /**\n   * `getWeight` returns weight of this node.\n   */\n  public getWeight(): number {\n    return this.weight;\n  }\n\n  /**\n   * `getLeft` returns a left node.\n   */\n  public getLeft(): SplayNode<V> | undefined {\n    return this.left;\n  }\n\n  /**\n   * `getRight` returns a right node.\n   */\n  public getRight(): SplayNode<V> | undefined {\n    return this.right;\n  }\n\n  /**\n   * `getParent` returns parent of this node.\n   */\n  public getParent(): SplayNode<V> | undefined {\n    return this.parent;\n  }\n\n  /**\n   * `hasLeft` check if the left node exists\n   */\n  public hasLeft(): boolean {\n    return !!this.left;\n  }\n\n  /**\n   * `hasRight` check if the right node exists\n   */\n  public hasRight(): boolean {\n    return !!this.right;\n  }\n\n  /**\n   * `hasParent` check if the parent node exists\n   */\n  public hasParent(): boolean {\n    return !!this.parent;\n  }\n\n  /**\n   * `setLeft` sets a left node.\n   */\n  public setLeft(left?: SplayNode<V>): void {\n    this.left = left;\n  }\n\n  /**\n   * `setRight` sets a right node.\n   */\n  public setRight(right?: SplayNode<V>): void {\n    this.right = right;\n  }\n\n  /**\n   * `setParent` sets a parent node.\n   */\n  public setParent(parent?: SplayNode<V>): void {\n    this.parent = parent;\n  }\n\n  /**\n   * `unlink` unlink parent, right and left node.\n   */\n  public unlink(): void {\n    this.parent = undefined;\n    this.right = undefined;\n    this.left = undefined;\n  }\n\n  /**\n   * `hasLinks` checks if parent, right and left node exists.\n   */\n  public hasLinks(): boolean {\n    return this.hasParent() || this.hasLeft() || this.hasRight();\n  }\n\n  /**\n   * `increaseWeight` increases weight.\n   */\n  public increaseWeight(weight: number): void {\n    this.weight! += weight;\n  }\n\n  /**\n   * `initWeight` sets initial weight of this node.\n   */\n  public initWeight(): void {\n    this.weight = this.getLength();\n  }\n}\n\n/**\n * SplayTree is weighted binary search tree which is based on Splay tree.\n * original paper on Splay Trees:\n * @see https://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf\n */\nexport class SplayTree<V> {\n  private root?: SplayNode<V>;\n\n  constructor(root?: SplayNode<V>) {\n    this.root = root;\n  }\n\n  /**\n   * `length` returns the size of this tree.\n   */\n  public get length(): number {\n    return this.root ? this.root.getWeight() : 0;\n  }\n\n  /**\n   * `find` returns the Node and offset of the given index.\n   */\n  public find(pos: number): [SplayNode<V> | undefined, number] {\n    if (!this.root || pos < 0) {\n      return [undefined, 0];\n    }\n\n    let node = this.root;\n    for (;;) {\n      if (node.hasLeft() && pos <= node.getLeftWeight()) {\n        node = node.getLeft()!;\n      } else if (\n        node.hasRight() &&\n        node.getLeftWeight() + node.getLength() < pos\n      ) {\n        pos -= node.getLeftWeight() + node.getLength();\n        node = node.getRight()!;\n      } else {\n        pos -= node.getLeftWeight();\n        break;\n      }\n    }\n    if (pos > node.getLength()) {\n      logger.fatal(\n        `out of index range: pos: ${pos} > node.length: ${node.getLength()}`,\n      );\n    }\n    return [node, pos];\n  }\n\n  /**\n   * Find the index of the given node in BST.\n   *\n   * @param node - the given node\n   * @returns the index of given node\n   */\n  public indexOf(node: SplayNode<V>): number {\n    if (!node || (node !== this.root && !node.hasLinks())) {\n      return -1;\n    }\n\n    let index = 0;\n    let current: SplayNode<V> | undefined = node;\n    let prev: SplayNode<V> | undefined;\n    while (current) {\n      if (!prev || prev === current.getRight()) {\n        index +=\n          current.getLength() +\n          (current.hasLeft() ? current.getLeftWeight() : 0);\n      }\n      prev = current;\n      current = current.getParent();\n    }\n    return index - node.getLength();\n  }\n\n  /**\n   * `getRoot` returns root of this tree.\n   */\n  public getRoot(): SplayNode<V> {\n    return this.root!;\n  }\n\n  /**\n   * `insert` inserts the node at the last.\n   */\n  public insert(newNode: SplayNode<V>): SplayNode<V> {\n    return this.insertAfter(this.root, newNode);\n  }\n\n  /**\n   * `insertAfter` inserts the node after the given previous node.\n   */\n  public insertAfter(\n    target: SplayNode<V> | undefined,\n    newNode: SplayNode<V>,\n  ): SplayNode<V> {\n    // TODO(Eithea): Consider moving the code below to insert()\n    if (!target) {\n      this.root = newNode;\n      return newNode;\n    }\n\n    this.splayNode(target);\n    this.root = newNode;\n    newNode.setRight(target.getRight());\n    if (target.hasRight()) {\n      target.getRight()!.setParent(newNode);\n    }\n    newNode.setLeft(target);\n    target.setParent(newNode);\n    target.setRight();\n    this.updateWeight(target);\n    this.updateWeight(newNode);\n\n    return newNode;\n  }\n\n  /**\n   * `updateWeight` recalculates the weight of this node with the value and children.\n   */\n  public updateWeight(node: SplayNode<V>): void {\n    node.initWeight();\n\n    if (node.hasLeft()) {\n      node.increaseWeight(node.getLeftWeight());\n    }\n    if (node.hasRight()) {\n      node.increaseWeight(node.getRightWeight());\n    }\n  }\n\n  private updateTreeWeight(node: SplayNode<V>): void {\n    while (node) {\n      this.updateWeight(node);\n      node = node.getParent()!;\n    }\n  }\n\n  /**\n   * `splayNode` moves the given node to the root.\n   */\n  public splayNode(node: SplayNode<V> | undefined): void {\n    if (!node) {\n      return;\n    }\n\n    for (;;) {\n      if (this.isLeftChild(node.getParent()) && this.isRightChild(node)) {\n        // zig-zag\n        this.rotateLeft(node);\n        this.rotateRight(node);\n      } else if (\n        this.isRightChild(node.getParent()) &&\n        this.isLeftChild(node)\n      ) {\n        // zig-zag\n        this.rotateRight(node);\n        this.rotateLeft(node);\n      } else if (this.isLeftChild(node.getParent()) && this.isLeftChild(node)) {\n        // zig-zig\n        this.rotateRight(node.getParent()!);\n        this.rotateRight(node);\n      } else if (\n        this.isRightChild(node.getParent()) &&\n        this.isRightChild(node)\n      ) {\n        // zig-zig\n        this.rotateLeft(node.getParent()!);\n        this.rotateLeft(node);\n      } else {\n        // zig\n        if (this.isLeftChild(node)) {\n          this.rotateRight(node);\n        } else if (this.isRightChild(node)) {\n          this.rotateLeft(node);\n        }\n        this.updateWeight(node);\n        return;\n      }\n    }\n  }\n\n  /**\n   * `delete` deletes target node of this tree.\n   */\n  public delete(node: SplayNode<V>): void {\n    this.splayNode(node);\n\n    const leftTree = new SplayTree(node.getLeft());\n    if (leftTree.root) {\n      leftTree.root.setParent();\n    }\n\n    const rightTree = new SplayTree(node.getRight());\n    if (rightTree.root) {\n      rightTree.root.setParent();\n    }\n\n    if (leftTree.root) {\n      const rightmostNode = leftTree.getRightmost();\n      leftTree.splayNode(rightmostNode);\n      leftTree.root.setRight(rightTree.root);\n      if (rightTree.root) {\n        rightTree.root.setParent(leftTree.root);\n      }\n      this.root = leftTree.root;\n    } else {\n      this.root = rightTree.root;\n    }\n\n    node.unlink();\n    if (this.root) {\n      this.updateWeight(this.root);\n    }\n  }\n\n  /**\n   * `deleteRange` separates the range between given 2 boundaries from this Tree.\n   * This function separates the range to delete as a subtree\n   * by splaying outer boundary nodes.\n   * leftBoundary must exist because of 0-indexed initial dummy node of tree,\n   * but rightBoundary can be nil means range to delete includes the end of tree.\n   * Refer to the design document in https://github.com/yorkie-team/yorkie/tree/main/design\n   */\n  public deleteRange(\n    leftBoundary: SplayNode<V>,\n    rightBoundary: SplayNode<V> | undefined,\n  ): void {\n    if (!rightBoundary) {\n      this.splayNode(leftBoundary);\n      this.cutOffRight(leftBoundary);\n      return;\n    }\n    this.splayNode(leftBoundary);\n    this.splayNode(rightBoundary);\n    if (rightBoundary.getLeft() != leftBoundary) {\n      this.rotateRight(leftBoundary);\n    }\n    this.cutOffRight(leftBoundary);\n  }\n\n  private cutOffRight(root: SplayNode<V>): void {\n    const nodesToFreeWeight: Array<SplayNode<V>> = [];\n    this.traversePostorder(root.getRight(), nodesToFreeWeight);\n    for (const node of nodesToFreeWeight) {\n      node.initWeight();\n    }\n    this.updateTreeWeight(root);\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of the Node\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    const metaString: Array<SplayNode<V>> = [];\n    this.traverseInorder(this.root!, metaString);\n    return metaString\n      .map((n) => `[${n.getWeight()},${n.getLength()}]${n.getValue() || ''}`)\n      .join('');\n  }\n\n  /**\n   * `checkWeight` returns false when there is an incorrect weight node.\n   * for debugging purpose.\n   */\n  public checkWeight(): boolean {\n    const nodes: Array<SplayNode<V>> = [];\n    this.traverseInorder(this.root!, nodes);\n    for (const node of nodes) {\n      if (\n        node.getWeight() !=\n        node.getLength() + node.getLeftWeight() + node.getRightWeight()\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private getRightmost(): SplayNode<V> {\n    let node = this.root!;\n    while (node.hasRight()) {\n      node = node.getRight()!;\n    }\n    return node;\n  }\n\n  private traverseInorder(\n    node: SplayNode<V> | undefined,\n    stack: Array<SplayNode<V>>,\n  ): void {\n    if (!node) {\n      return;\n    }\n\n    this.traverseInorder(node.getLeft(), stack);\n    stack.push(node);\n    this.traverseInorder(node.getRight(), stack);\n  }\n\n  private traversePostorder(\n    node: SplayNode<V> | undefined,\n    stack: Array<SplayNode<V>>,\n  ): void {\n    if (!node) {\n      return;\n    }\n\n    this.traversePostorder(node.getLeft(), stack);\n    this.traversePostorder(node.getRight(), stack);\n    stack.push(node);\n  }\n\n  private rotateLeft(pivot: SplayNode<V>): void {\n    const root = pivot.getParent()!;\n    if (root.hasParent()) {\n      if (root === root.getParent()!.getLeft()) {\n        root.getParent()!.setLeft(pivot);\n      } else {\n        root.getParent()!.setRight(pivot);\n      }\n    } else {\n      this.root = pivot;\n    }\n    pivot.setParent(root.getParent());\n\n    root.setRight(pivot.getLeft());\n    if (root.hasRight()) {\n      root.getRight()!.setParent(root);\n    }\n\n    pivot.setLeft(root);\n    pivot.getLeft()!.setParent(pivot);\n\n    this.updateWeight(root);\n    this.updateWeight(pivot);\n  }\n\n  private rotateRight(pivot: SplayNode<V>): void {\n    const root = pivot.getParent()!;\n    if (root.hasParent()) {\n      if (root === root.getParent()!.getLeft()) {\n        root.getParent()!.setLeft(pivot);\n      } else {\n        root.getParent()!.setRight(pivot);\n      }\n    } else {\n      this.root = pivot;\n    }\n    pivot.setParent(root.getParent());\n\n    root.setLeft(pivot.getRight());\n    if (root.hasLeft()) {\n      root.getLeft()!.setParent(root);\n    }\n\n    pivot.setRight(root);\n    pivot.getRight()!.setParent(pivot);\n\n    this.updateWeight(root);\n    this.updateWeight(pivot);\n  }\n\n  private isLeftChild(node?: SplayNode<V>): boolean {\n    if (node && node.hasParent()) {\n      return node.getParent()!.getLeft() === node;\n    }\n    return false;\n  }\n\n  private isRightChild(node?: SplayNode<V>): boolean {\n    if (node && node.hasParent()) {\n      return node.getParent()!.getRight() === node;\n    }\n    return false;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { escapeString } from '@yorkie-js-sdk/src/document/json/strings';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\nexport enum PrimitiveType {\n  Null,\n  Boolean,\n  Integer,\n  Long,\n  Double,\n  String,\n  Bytes,\n  Date,\n}\n\n/**\n * `PrimitiveValue` represents a value of primitive type. Only values of type\n * included in `PrimitiveValue` can be set to the document.\n */\nexport type PrimitiveValue =\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  null | boolean | number | Long | string | Uint8Array | Date;\n\n/**\n * `Primitive` represents primitive data type including logical clock.\n * It has a type and a value.\n */\nexport class Primitive extends CRDTElement {\n  private valueType: PrimitiveType;\n  private value: PrimitiveValue;\n\n  constructor(value: PrimitiveValue, createdAt: TimeTicket) {\n    super(createdAt);\n    this.valueType = Primitive.getPrimitiveType(value)!;\n    this.value = value === undefined ? null : value;\n  }\n\n  /**\n   * `of` creates a new instance of Primitive.\n   */\n  public static of(value: PrimitiveValue, createdAt: TimeTicket): Primitive {\n    return new Primitive(value, createdAt);\n  }\n\n  /**\n   * `valueFromBytes` parses the given bytes into value.\n   */\n  public static valueFromBytes(\n    primitiveType: PrimitiveType,\n    bytes: Uint8Array,\n  ): PrimitiveValue {\n    switch (primitiveType) {\n      case PrimitiveType.Null:\n        return null;\n      case PrimitiveType.Boolean:\n        return bytes[0] ? true : false;\n      case PrimitiveType.Integer:\n        return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);\n      case PrimitiveType.Double: {\n        const view = new DataView(bytes.buffer);\n        bytes.forEach(function (b, i) {\n          view.setUint8(i, b);\n        });\n        return view.getFloat64(0, true);\n      }\n      case PrimitiveType.String:\n        return new TextDecoder('utf-8').decode(bytes);\n      case PrimitiveType.Long:\n        return Long.fromBytesLE(Array.from(bytes));\n      case PrimitiveType.Bytes:\n        return bytes;\n      case PrimitiveType.Date:\n        return new Date(Long.fromBytesLE(Array.from(bytes), true).toNumber());\n      default:\n        throw new YorkieError(\n          Code.Unimplemented,\n          `unimplemented type: ${primitiveType}`,\n        );\n    }\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of the value.\n   */\n  public toJSON(): string {\n    if (this.valueType === PrimitiveType.String) {\n      return `\"${escapeString(this.value as string)}\"`;\n    }\n\n    // TODO(hackerwins): We need to consider the case where the value is\n    // a byte array and a date.\n    return `${this.value}`;\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of the value.\n   */\n  public toSortedJSON(): string {\n    return this.toJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: this.value,\n      type: 'YORKIE_PRIMITIVE',\n    };\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): Primitive {\n    const primitive = Primitive.of(this.value, this.getCreatedAt());\n    primitive.setMovedAt(this.getMovedAt());\n    primitive.setRemovedAt(this.getRemovedAt());\n    return primitive;\n  }\n\n  /**\n   * `getType` returns the type of the value.\n   */\n  public getType(): PrimitiveType {\n    return this.valueType!;\n  }\n\n  /**\n   * `getPrimitiveType` returns the primitive type of the value.\n   */\n  public static getPrimitiveType(value: unknown): PrimitiveType | undefined {\n    switch (typeof value) {\n      case 'undefined':\n        return PrimitiveType.Null;\n      case 'boolean':\n        return PrimitiveType.Boolean;\n      case 'number':\n        if (this.isInteger(value)) {\n          return PrimitiveType.Integer;\n        } else {\n          return PrimitiveType.Double;\n        }\n      case 'string':\n        return PrimitiveType.String;\n      case 'object':\n        if (value === null) {\n          return PrimitiveType.Null;\n        } else if (value instanceof Long) {\n          return PrimitiveType.Long;\n        } else if (value instanceof Uint8Array) {\n          return PrimitiveType.Bytes;\n        } else if (value instanceof Date) {\n          return PrimitiveType.Date;\n        }\n    }\n\n    return;\n  }\n\n  /**\n   * `isSupport` check if the given value is supported type.\n   */\n  public static isSupport(value: unknown): boolean {\n    const primitiveType = Primitive.getPrimitiveType(value);\n    if (primitiveType === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * `isInteger` checks if the given number is integer.\n   */\n  public static isInteger(num: number): boolean {\n    return num % 1 === 0;\n  }\n\n  /**\n   * `isNumericType` checks numeric type by JSONPrimitive\n   */\n  public isNumericType(): boolean {\n    const t = this.valueType;\n    return (\n      t === PrimitiveType.Integer ||\n      t === PrimitiveType.Long ||\n      t === PrimitiveType.Double\n    );\n  }\n\n  /**\n   * `getValue` returns the value of Primitive.\n   */\n  public getValue(): PrimitiveValue {\n    return this.value;\n  }\n\n  /**\n   * `toBytes` creates an array representing the value.\n   */\n  public toBytes(): Uint8Array {\n    switch (this.valueType) {\n      case PrimitiveType.Null: {\n        return new Uint8Array();\n      }\n      case PrimitiveType.Boolean: {\n        const boolVal = this.value as boolean;\n        return boolVal ? new Uint8Array([1]) : new Uint8Array([0]);\n      }\n      case PrimitiveType.Integer: {\n        const intVal = this.value as number;\n        return new Uint8Array([\n          intVal & 0xff,\n          (intVal >> 8) & 0xff,\n          (intVal >> 16) & 0xff,\n          (intVal >> 24) & 0xff,\n        ]);\n      }\n      case PrimitiveType.Double: {\n        const doubleVal = this.value as number;\n        const uint8Array = new Uint8Array(8);\n        const view = new DataView(uint8Array.buffer);\n        view.setFloat64(0, doubleVal, true);\n        return uint8Array;\n      }\n      case PrimitiveType.String: {\n        return new TextEncoder().encode(this.value as string);\n      }\n      case PrimitiveType.Long: {\n        const longVal = this.value as Long;\n        const longToBytes = longVal.toBytesLE();\n        return Uint8Array.from(longToBytes);\n      }\n      case PrimitiveType.Bytes: {\n        const bytesVal = this.value as Uint8Array;\n        return bytesVal;\n      }\n      case PrimitiveType.Date: {\n        const dateVal = this.value as Date;\n        const dateToBytes = Long.fromNumber(\n          dateVal.getTime(),\n          true,\n        ).toBytesLE();\n        return Uint8Array.from(dateToBytes);\n      }\n      default:\n        throw new YorkieError(\n          Code.Unimplemented,\n          `unimplemented type: ${this.valueType}`,\n        );\n    }\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { SplayNode, SplayTree } from '@yorkie-js-sdk/src/util/splay_tree';\nimport {\n  InitialTimeTicket,\n  TimeTicket,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { Primitive } from '@yorkie-js-sdk/src/document/crdt/primitive';\n\n/**\n * `RGATreeListNode` is a node of RGATreeList.\n */\nclass RGATreeListNode extends SplayNode<CRDTElement> {\n  private prev?: RGATreeListNode;\n  private next?: RGATreeListNode;\n\n  constructor(value: CRDTElement) {\n    super(value);\n    this.value = value;\n  }\n\n  /**\n   * `createAfter` creates a new node after the given node.\n   */\n  public static createAfter(\n    prev: RGATreeListNode,\n    value: CRDTElement,\n  ): RGATreeListNode {\n    const newNode = new RGATreeListNode(value);\n    const prevNext = prev.next;\n    prev.next = newNode;\n    newNode.prev = prev;\n    newNode.next = prevNext;\n    if (prevNext) {\n      prevNext.prev = newNode;\n    }\n\n    return newNode;\n  }\n\n  /**\n   * `remove` removes value based on removing time.\n   */\n  public remove(removedAt: TimeTicket): boolean {\n    return this.value.remove(removedAt);\n  }\n\n  /**\n   * `getCreatedAt` returns creation time of this value\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.value.getCreatedAt();\n  }\n\n  /**\n   * `getPositionedAt` returns the time of this element when it was positioned\n   * in the array.\n   */\n  public getPositionedAt(): TimeTicket {\n    return this.value.getPositionedAt();\n  }\n\n  /**\n   * `release` releases prev and next node.\n   */\n  public release(): void {\n    if (this.prev) {\n      this.prev.next = this.next;\n    }\n    if (this.next) {\n      this.next.prev = this.prev;\n    }\n    this.prev = undefined;\n    this.next = undefined;\n  }\n\n  /**\n   * `getLength` returns the length of this node.\n   */\n  public getLength(): number {\n    return this.value.isRemoved() ? 0 : 1;\n  }\n\n  /**\n   * `getPrev` returns a previous node.\n   */\n  public getPrev(): RGATreeListNode | undefined {\n    return this.prev;\n  }\n\n  /**\n   * `getNext` returns a next node.\n   */\n  public getNext(): RGATreeListNode | undefined {\n    return this.next;\n  }\n\n  /**\n   * `getValue` returns a element value.\n   */\n  public getValue(): CRDTElement {\n    return this.value;\n  }\n\n  /**\n   * `isRemoved` checks if the value was removed.\n   */\n  public isRemoved(): boolean {\n    return this.value.isRemoved();\n  }\n}\n\n/**\n * `RGATreeList` is a replicated growable array.\n *\n * @internal\n */\nexport class RGATreeList {\n  private dummyHead: RGATreeListNode;\n  private last: RGATreeListNode;\n  private nodeMapByIndex: SplayTree<CRDTElement>;\n  private nodeMapByCreatedAt: Map<string, RGATreeListNode>;\n\n  constructor() {\n    const dummyValue = Primitive.of(0, InitialTimeTicket);\n    dummyValue.setRemovedAt(InitialTimeTicket);\n    this.dummyHead = new RGATreeListNode(dummyValue);\n    this.last = this.dummyHead;\n    this.nodeMapByIndex = new SplayTree();\n    this.nodeMapByCreatedAt = new Map();\n\n    this.nodeMapByIndex.insert(this.dummyHead);\n    this.nodeMapByCreatedAt.set(\n      this.dummyHead.getCreatedAt().toIDString(),\n      this.dummyHead,\n    );\n  }\n\n  /**\n   * `create` creates instance of RGATreeList.\n   */\n  public static create(): RGATreeList {\n    return new RGATreeList();\n  }\n\n  /**\n   * `length` returns size of RGATreeList.\n   */\n  public get length(): number {\n    return this.nodeMapByIndex.length;\n  }\n\n  /**\n   * `findNextBeforeExecutedAt` returns the node by the given createdAt and\n   * executedAt. It passes through nodes created after executedAt from the\n   * given node and returns the next node.\n   * @param createdAt - created time\n   * @param executedAt - executed time\n   * @returns next node\n   */\n  private findNextBeforeExecutedAt(\n    createdAt: TimeTicket,\n    executedAt: TimeTicket,\n  ): RGATreeListNode {\n    let node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    if (!node) {\n      logger.fatal(`cant find the given node: ${createdAt.toIDString()}`);\n    }\n\n    while (\n      node!.getNext() &&\n      node!.getNext()!.getPositionedAt().after(executedAt)\n    ) {\n      node = node!.getNext();\n    }\n\n    return node!;\n  }\n\n  private release(node: RGATreeListNode): void {\n    if (this.last === node) {\n      this.last = node.getPrev()!;\n    }\n\n    node.release();\n    this.nodeMapByIndex.delete(node);\n    this.nodeMapByCreatedAt.delete(node.getValue().getCreatedAt().toIDString());\n  }\n\n  /**\n   * `insertAfter` adds a new node with the value after the given node.\n   */\n  public insertAfter(\n    prevCreatedAt: TimeTicket,\n    value: CRDTElement,\n    executedAt: TimeTicket = value.getCreatedAt(),\n  ): void {\n    const prevNode = this.findNextBeforeExecutedAt(prevCreatedAt, executedAt);\n    const newNode = RGATreeListNode.createAfter(prevNode, value);\n    if (prevNode === this.last) {\n      this.last = newNode;\n    }\n\n    this.nodeMapByIndex.insertAfter(prevNode, newNode);\n    this.nodeMapByCreatedAt.set(newNode.getCreatedAt().toIDString(), newNode);\n  }\n\n  /**\n   * `moveAfter` moves the given `createdAt` element\n   * after the `prevCreatedAt` element.\n   */\n  public moveAfter(\n    prevCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt: TimeTicket,\n  ): void {\n    const prevNode = this.nodeMapByCreatedAt.get(prevCreatedAt.toIDString());\n    if (!prevNode) {\n      logger.fatal(`cant find the given node: ${prevCreatedAt.toIDString()}`);\n    }\n\n    const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    if (!node) {\n      logger.fatal(`cant find the given node: ${createdAt.toIDString()}`);\n    }\n\n    if (\n      prevNode !== node &&\n      (!node!.getValue().getMovedAt() ||\n        executedAt.after(node!.getValue().getMovedAt()!))\n    ) {\n      this.release(node!);\n      this.insertAfter(prevNode!.getCreatedAt(), node!.getValue(), executedAt);\n      node!.getValue().setMovedAt(executedAt);\n    }\n  }\n\n  /**\n   * `insert` adds the given element after the last node.\n   */\n  public insert(value: CRDTElement): void {\n    this.insertAfter(this.last.getCreatedAt(), value);\n  }\n\n  /**\n   * `getByID` returns the element of the given creation time.\n   */\n  public getByID(createdAt: TimeTicket): RGATreeListNode | undefined {\n    return this.nodeMapByCreatedAt.get(createdAt.toIDString());\n  }\n\n  /**\n   * `subPathOf` returns the sub path of the given element.\n   */\n  public subPathOf(createdAt: TimeTicket): string | undefined {\n    const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    if (!node) {\n      return;\n    }\n    return String(this.nodeMapByIndex.indexOf(node));\n  }\n\n  /**\n   * `purge` physically purges element.\n   */\n  public purge(element: CRDTElement): void {\n    const node = this.nodeMapByCreatedAt.get(\n      element.getCreatedAt().toIDString(),\n    );\n    if (!node) {\n      logger.fatal(\n        `fail to find the given createdAt: ${element\n          .getCreatedAt()\n          .toIDString()}`,\n      );\n    }\n    this.release(node!);\n  }\n\n  /**\n   * `getByIndex` returns node of the given index.\n   */\n  public getByIndex(idx: number): RGATreeListNode | undefined {\n    if (idx >= this.length) {\n      return;\n    }\n\n    const [node, offset] = this.nodeMapByIndex.find(idx);\n    let rgaNode = node as RGATreeListNode | undefined;\n\n    if ((idx === 0 && node === this.dummyHead) || offset > 0) {\n      do {\n        if (rgaNode) {\n          rgaNode = rgaNode.getNext();\n        }\n      } while (rgaNode && rgaNode.isRemoved());\n    }\n\n    return rgaNode;\n  }\n\n  /**\n   * `getPrevCreatedAt` returns a creation time of the previous node.\n   */\n  public getPrevCreatedAt(createdAt: TimeTicket): TimeTicket {\n    let node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    do {\n      node = node!.getPrev()!;\n    } while (this.dummyHead !== node && node.isRemoved());\n    return node.getValue().getCreatedAt();\n  }\n\n  /**\n   * `delete` deletes the node of the given creation time.\n   */\n  public delete(createdAt: TimeTicket, editedAt: TimeTicket): CRDTElement {\n    const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());\n    const alreadyRemoved = node!.isRemoved();\n    if (node!.remove(editedAt) && !alreadyRemoved) {\n      this.nodeMapByIndex.splayNode(node);\n    }\n    return node!.getValue();\n  }\n\n  /**\n   * `deleteByIndex` deletes the node of the given index.\n   */\n  public deleteByIndex(\n    index: number,\n    editedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    const node = this.getByIndex(index);\n    if (!node) {\n      return;\n    }\n\n    if (node.remove(editedAt)) {\n      this.nodeMapByIndex.splayNode(node);\n    }\n    return node.getValue();\n  }\n\n  /**\n   * `getHead` returns the value of head elements.\n   */\n  public getHead(): CRDTElement {\n    return this.dummyHead.getValue();\n  }\n\n  /**\n   * `getLast` returns the value of last elements.\n   */\n  public getLast(): CRDTElement {\n    return this.last.getValue();\n  }\n\n  /**\n   * `getLastCreatedAt` returns the creation time of last element.\n   */\n  public getLastCreatedAt(): TimeTicket {\n    return this.last.getCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a String containing the meta data of the node id\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    const json = [];\n\n    for (const node of this) {\n      const elem = `${node.getCreatedAt().toIDString()}:${node\n        .getValue()\n        .toJSON()}`;\n      if (node.isRemoved()) {\n        json.push(`{${elem}}`);\n      } else {\n        json.push(`[${elem}]`);\n      }\n    }\n\n    return json.join('');\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public *[Symbol.iterator](): IterableIterator<RGATreeListNode> {\n    let node = this.dummyHead.getNext();\n    while (node) {\n      yield node;\n      node = node.getNext();\n    }\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport {\n  CRDTContainer,\n  CRDTElement,\n} from '@yorkie-js-sdk/src/document/crdt/element';\nimport { RGATreeList } from '@yorkie-js-sdk/src/document/crdt/rga_tree_list';\nimport * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `CRDTArray` represents an array data type containing `CRDTElement`s.\n *\n * @internal\n */\nexport class CRDTArray extends CRDTContainer {\n  private elements: RGATreeList;\n\n  constructor(createdAt: TimeTicket, elements: RGATreeList) {\n    super(createdAt);\n    this.elements = elements;\n  }\n\n  /**\n   * `create` creates a new instance of Array.\n   */\n  public static create(\n    createdAt: TimeTicket,\n    value?: Array<CRDTElement>,\n  ): CRDTArray {\n    if (!value) {\n      return new CRDTArray(createdAt, RGATreeList.create());\n    }\n\n    const elements = RGATreeList.create();\n    for (const v of value) {\n      elements.insertAfter(elements.getLastCreatedAt(), v.deepcopy());\n    }\n    return new CRDTArray(createdAt, elements);\n  }\n\n  /**\n   * `subPathOf` returns the sub path of the given element.\n   */\n  public subPathOf(createdAt: TimeTicket): string | undefined {\n    return this.elements.subPathOf(createdAt);\n  }\n\n  /**\n   * `purge` physically purge the given element.\n   */\n  public purge(element: CRDTElement): void {\n    this.elements.purge(element);\n  }\n\n  /**\n   * `insertAfter` adds a new node after the the given node.\n   */\n  public insertAfter(prevCreatedAt: TimeTicket, value: CRDTElement): void {\n    this.elements.insertAfter(prevCreatedAt, value);\n  }\n\n  /**\n   * `moveAfter` moves the given `createdAt` element after the `prevCreatedAt`.\n   */\n  public moveAfter(\n    prevCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt: TimeTicket,\n  ): void {\n    this.elements.moveAfter(prevCreatedAt, createdAt, executedAt);\n  }\n\n  /**\n   * `get` returns the element of the given index.\n   */\n  public get(index: number): CRDTElement | undefined {\n    const node = this.elements.getByIndex(index);\n    return node?.getValue();\n  }\n\n  /**\n   * `getByID` returns the element of the given createAt.\n   */\n  public getByID(createdAt: TimeTicket): CRDTElement | undefined {\n    const node = this.elements.getByID(createdAt);\n    return node?.getValue();\n  }\n\n  /**\n   * `getHead` returns dummy head element.\n   */\n  public getHead(): CRDTElement {\n    return this.elements.getHead();\n  }\n\n  /**\n   * `getLast` returns last element.\n   */\n  public getLast(): CRDTElement {\n    return this.elements.getLast();\n  }\n\n  /**\n   * `getPrevCreatedAt` returns the creation time of the previous node.\n   */\n  public getPrevCreatedAt(createdAt: TimeTicket): TimeTicket {\n    return this.elements.getPrevCreatedAt(createdAt);\n  }\n\n  /**\n   * `delete` deletes the element of the given creation time.\n   */\n  public delete(createdAt: TimeTicket, editedAt: TimeTicket): CRDTElement {\n    return this.elements.delete(createdAt, editedAt);\n  }\n\n  /**\n   * `deleteByIndex` deletes the element of given index and editedAt.\n   */\n  public deleteByIndex(\n    index: number,\n    editedAt: TimeTicket,\n  ): CRDTElement | undefined {\n    return this.elements.deleteByIndex(index, editedAt);\n  }\n\n  /**\n   * `getLastCreatedAt` get last created element.\n   */\n  public getLastCreatedAt(): TimeTicket {\n    return this.elements.getLastCreatedAt();\n  }\n\n  /**\n   * `length` returns length of this elements.\n   */\n  public get length(): number {\n    return this.elements.length;\n  }\n\n  /**\n   * eslint-disable-next-line jsdoc/require-jsdoc\n   * @internal\n   */\n  public *[Symbol.iterator](): IterableIterator<CRDTElement> {\n    for (const node of this.elements) {\n      if (!node.isRemoved()) {\n        yield node.getValue();\n      }\n    }\n  }\n\n  /**\n   * `toTestString` returns a String containing the meta data of this value\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    return this.elements.toTestString();\n  }\n\n  /**\n   * `getDescendants` traverse the descendants of this array.\n   */\n  public getDescendants(\n    callback: (elem: CRDTElement, parent: CRDTContainer) => boolean,\n  ): void {\n    for (const node of this.elements) {\n      const element = node.getValue();\n      if (callback(element, this)) {\n        return;\n      }\n\n      if (element instanceof CRDTContainer) {\n        element.getDescendants(callback);\n      }\n    }\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this array.\n   */\n  public toJSON(): string {\n    const json = [];\n    for (const value of this) {\n      json.push(value.toJSON());\n    }\n    return `[${json.join(',')}]`;\n  }\n\n  /**\n   * `toJS` return the javascript object of this array.\n   */\n  public toJS(): any {\n    return JSON.parse(this.toJSON());\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    const values: Devtools.ContainerValue = {};\n    for (let i = 0; i < this.length; i++) {\n      const { createdAt, value, type } = this.get(i)!.toJSForTest();\n      values[i] = {\n        key: String(i),\n        createdAt,\n        value,\n        type,\n      };\n    }\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: values,\n      type: 'YORKIE_ARRAY',\n    };\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this array.\n   */\n  public toSortedJSON(): string {\n    return this.toJSON();\n  }\n\n  /**\n   * `getElements` returns an array of elements contained in this RGATreeList.\n   */\n  public getElements(): RGATreeList {\n    return this.elements;\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTArray {\n    const clone = CRDTArray.create(this.getCreatedAt());\n    for (const node of this.elements) {\n      clone.elements.insertAfter(\n        clone.getLastCreatedAt(),\n        node.getValue().deepcopy(),\n      );\n    }\n    clone.remove(this.getRemovedAt());\n    return clone;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport {\n  OpSource,\n  Operation,\n  OperationInfo,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport {\n  CRDTContainer,\n  CRDTElement,\n} from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport { SetOperation } from '@yorkie-js-sdk/src/document/operation/set_operation';\n\n/**\n * `RemoveOperation` is an operation that removes an element from `CRDTContainer`.\n */\nexport class RemoveOperation extends Operation {\n  private createdAt: TimeTicket;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt?: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.createdAt = createdAt;\n  }\n\n  /**\n   * `create` creates a new instance of RemoveOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt?: TimeTicket,\n  ): RemoveOperation {\n    return new RemoveOperation(parentCreatedAt, createdAt, executedAt);\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(\n    root: CRDTRoot,\n    source: OpSource,\n  ): ExecutionResult | undefined {\n    const container = root.findByCreatedAt(\n      this.getParentCreatedAt(),\n    ) as CRDTContainer;\n    if (!container) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(container instanceof CRDTContainer)) {\n      logger.fatal(`only object and array can execute remove: ${container}`);\n    }\n\n    // NOTE(chacha912): Handle cases where operation cannot be executed during undo and redo.\n    if (source === OpSource.UndoRedo) {\n      let parent: CRDTElement | undefined = container.getByID(this.createdAt);\n      while (parent) {\n        if (parent.getRemovedAt()) {\n          return;\n        }\n        parent = root.findElementPairByCreatedAt(parent.getCreatedAt())?.parent;\n      }\n    }\n    const key = container.subPathOf(this.createdAt);\n    const reverseOp = this.toReverseOperation(container);\n\n    const elem = container.delete(this.createdAt, this.getExecutedAt());\n    root.registerRemovedElement(elem);\n\n    const opInfos: Array<OperationInfo> =\n      container instanceof CRDTArray\n        ? [\n            {\n              type: 'remove',\n              path: root.createPath(this.getParentCreatedAt()),\n              index: Number(key),\n            },\n          ]\n        : [\n            {\n              type: 'remove',\n              path: root.createPath(this.getParentCreatedAt()),\n              key,\n            },\n          ];\n\n    return { opInfos, reverseOp };\n  }\n\n  /**\n   * `toReverseOperation` returns the reverse operation of this operation.\n   */\n  private toReverseOperation(\n    parentObject: CRDTContainer,\n  ): Operation | undefined {\n    // TODO(Hyemmie): consider CRDTArray\n    if (parentObject instanceof CRDTObject) {\n      const key = parentObject.subPathOf(this.createdAt);\n      if (key !== undefined) {\n        const value = parentObject.get(key);\n        if (value !== undefined) {\n          return SetOperation.create(\n            key,\n            value.deepcopy(),\n            this.getParentCreatedAt(),\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    return `${this.getParentCreatedAt().toTestString()}.REMOVE.${this.createdAt.toTestString()}`;\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of the target element.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport {\n  OpSource,\n  Operation,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { RemoveOperation } from '@yorkie-js-sdk/src/document/operation/remove_operation';\n\n/**\n * `SetOperation` represents an operation that stores the value corresponding to the\n * given key in the Object.\n */\nexport class SetOperation extends Operation {\n  private key: string;\n  private value: CRDTElement;\n\n  constructor(\n    key: string,\n    value: CRDTElement,\n    parentCreatedAt: TimeTicket,\n    executedAt?: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.key = key;\n    this.value = value;\n  }\n\n  /**\n   * `create` creates a new instance of SetOperation.\n   */\n  public static create(\n    key: string,\n    value: CRDTElement,\n    parentCreatedAt: TimeTicket,\n    executedAt?: TimeTicket,\n  ): SetOperation {\n    return new SetOperation(key, value, parentCreatedAt, executedAt);\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(\n    root: CRDTRoot,\n    source: OpSource,\n  ): ExecutionResult | undefined {\n    const obj = root.findByCreatedAt(this.getParentCreatedAt()) as CRDTObject;\n    if (!obj) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(obj instanceof CRDTObject)) {\n      logger.fatal(`fail to execute, only object can execute set`);\n    }\n\n    // NOTE(chacha912): Handle cases where operation cannot be executed during undo and redo.\n    if (source === OpSource.UndoRedo) {\n      let parent: CRDTElement | undefined = obj;\n      while (parent) {\n        if (parent.getRemovedAt()) {\n          return;\n        }\n        parent = root.findElementPairByCreatedAt(parent.getCreatedAt())?.parent;\n      }\n    }\n    const previousValue = obj.get(this.key);\n    const reverseOp = this.toReverseOperation(previousValue);\n\n    const value = this.value.deepcopy();\n    const removed = obj.set(this.key, value, this.getExecutedAt());\n    // NOTE(chacha912): When resetting elements with the pre-existing createdAt\n    // during undo/redo, it's essential to handle previously tombstoned elements.\n    // In non-GC languages, there may be a need to execute both deregister and purge.\n    if (\n      source === OpSource.UndoRedo &&\n      root.findByCreatedAt(value.getCreatedAt())\n    ) {\n      root.deregisterElement(value);\n    }\n    root.registerElement(value, obj);\n    if (removed) {\n      root.registerRemovedElement(removed);\n    }\n\n    return {\n      opInfos: [\n        {\n          type: 'set',\n          path: root.createPath(this.getParentCreatedAt()),\n          key: this.key,\n        },\n      ],\n      reverseOp,\n    };\n  }\n\n  /**\n   * `toReverseOperation` returns the reverse operation of this operation.\n   */\n  private toReverseOperation(value: CRDTElement | undefined): Operation {\n    let reverseOp: SetOperation | RemoveOperation = RemoveOperation.create(\n      this.getParentCreatedAt(),\n      this.value.getCreatedAt(),\n    );\n\n    if (value !== undefined && !value.isRemoved()) {\n      reverseOp = SetOperation.create(\n        this.key,\n        value.deepcopy(),\n        this.getParentCreatedAt(),\n      );\n    }\n    return reverseOp;\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.value.getCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    return `${this.getParentCreatedAt().toTestString()}.SET.${\n      this.key\n    }=${this.value.toSortedJSON()}`;\n  }\n\n  /**\n   * `getKey` returns the key of this operation.\n   */\n  public getKey(): string {\n    return this.key;\n  }\n\n  /**\n   * `getValue` returns the value of this operation.\n   */\n  public getValue(): CRDTElement {\n    return this.value;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport {\n  Operation,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\n\n/**\n * `AddOperation` is an operation representing adding an element to an Array.\n */\nexport class AddOperation extends Operation {\n  private prevCreatedAt: TimeTicket;\n  private value: CRDTElement;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    prevCreatedAt: TimeTicket,\n    value: CRDTElement,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.prevCreatedAt = prevCreatedAt;\n    this.value = value;\n  }\n\n  /**\n   * `create` creates a new instance of AddOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    prevCreatedAt: TimeTicket,\n    value: CRDTElement,\n    executedAt: TimeTicket,\n  ): AddOperation {\n    return new AddOperation(parentCreatedAt, prevCreatedAt, value, executedAt);\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTArray)) {\n      logger.fatal(`fail to execute, only array can execute add`);\n    }\n    const array = parentObject as CRDTArray;\n    const value = this.value.deepcopy();\n    array.insertAfter(this.prevCreatedAt, value);\n    root.registerElement(value, array);\n\n    return {\n      opInfos: [\n        {\n          type: 'add',\n          path: root.createPath(this.getParentCreatedAt()),\n          index: Number(array.subPathOf(this.getEffectedCreatedAt())),\n        },\n      ],\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.value.getCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    return `${this.getParentCreatedAt().toTestString()}.ADD.${this.value.toJSON()}`;\n  }\n\n  /**\n   * `getPrevCreatedAt` returns the creation time of previous element.\n   */\n  public getPrevCreatedAt(): TimeTicket {\n    return this.prevCreatedAt;\n  }\n\n  /**\n   * `getValue` returns the value of this operation.\n   */\n  public getValue(): CRDTElement {\n    return this.value;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport {\n  Operation,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\n\n/**\n * `MoveOperation` is an operation representing moving an element to an Array.\n */\nexport class MoveOperation extends Operation {\n  private prevCreatedAt: TimeTicket;\n  private createdAt: TimeTicket;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    prevCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.prevCreatedAt = prevCreatedAt;\n    this.createdAt = createdAt;\n  }\n\n  /**\n   * `create` creates a new instance of MoveOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    prevCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n    executedAt: TimeTicket,\n  ): MoveOperation {\n    return new MoveOperation(\n      parentCreatedAt,\n      prevCreatedAt,\n      createdAt,\n      executedAt,\n    );\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTArray)) {\n      logger.fatal(`fail to execute, only array can execute move`);\n    }\n    const array = parentObject as CRDTArray;\n    const previousIndex = Number(array.subPathOf(this.createdAt));\n    array.moveAfter(this.prevCreatedAt, this.createdAt, this.getExecutedAt());\n    const index = Number(array.subPathOf(this.createdAt));\n    return {\n      opInfos: [\n        {\n          type: 'move',\n          path: root.createPath(this.getParentCreatedAt()),\n          index,\n          previousIndex,\n        },\n      ],\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    return `${this.getParentCreatedAt().toTestString()}.MOVE`;\n  }\n\n  /**\n   * `getPrevCreatedAt` returns the creation time of previous element.\n   */\n  public getPrevCreatedAt(): TimeTicket {\n    return this.prevCreatedAt;\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of the target element.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { escapeString } from '@yorkie-js-sdk/src/document/json/strings';\nimport { GCChild } from '@yorkie-js-sdk/src/document/crdt/gc';\n\n/**\n * `RHTNode` is a node of RHT(Replicated Hashtable).\n */\nexport class RHTNode implements GCChild {\n  private key: string;\n  private value: string;\n  private updatedAt: TimeTicket;\n  private _isRemoved: boolean;\n\n  constructor(\n    key: string,\n    value: string,\n    updatedAt: TimeTicket,\n    isRemoved: boolean,\n  ) {\n    this.key = key;\n    this.value = value;\n    this.updatedAt = updatedAt;\n    this._isRemoved = isRemoved;\n  }\n\n  /**\n   * `of` creates a new instance of RHTNode.\n   */\n  public static of(\n    key: string,\n    value: string,\n    createdAt: TimeTicket,\n    isRemoved: boolean,\n  ): RHTNode {\n    return new RHTNode(key, value, createdAt, isRemoved);\n  }\n\n  /**\n   * `getKey` returns a key of node.\n   */\n  public getKey(): string {\n    return this.key;\n  }\n\n  /**\n   * `getValue` returns a value of node.\n   */\n  public getValue(): string {\n    return this.value;\n  }\n\n  /**\n   * `getUpdatedAt` returns updated time of node.\n   */\n  public getUpdatedAt(): TimeTicket {\n    return this.updatedAt;\n  }\n\n  /**\n   * `isRemoved` returns whether the node has been removed or not.\n   */\n  public isRemoved(): boolean {\n    return this._isRemoved;\n  }\n\n  /**\n   * `toIDString` returns the IDString of this node.\n   */\n  public toIDString(): string {\n    return `${this.updatedAt.toIDString()}:${this.key}`;\n  }\n\n  /**\n   * `getRemovedAt` returns the time when this node was removed.\n   */\n  public getRemovedAt(): TimeTicket | undefined {\n    if (this._isRemoved) {\n      return this.updatedAt;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * RHT is replicated hash table by creation time.\n * For more details about RHT: @see http://csl.skku.edu/papers/jpdc11.pdf\n */\nexport class RHT {\n  private nodeMapByKey: Map<string, RHTNode>;\n  private numberOfRemovedElement: number;\n\n  constructor() {\n    this.nodeMapByKey = new Map();\n    this.numberOfRemovedElement = 0;\n  }\n\n  /**\n   * `create` creates a new instance of RHT.\n   */\n  public static create(): RHT {\n    return new RHT();\n  }\n\n  /**\n   * `getNodeMapByKey` returns the hashtable of RHT.\n   */\n  public getNodeMapByKey(): Map<string, RHTNode> {\n    return this.nodeMapByKey;\n  }\n\n  /**\n   * `set` sets the value of the given key.\n   */\n  public set(\n    key: string,\n    value: string,\n    executedAt: TimeTicket,\n  ): [RHTNode | undefined, RHTNode | undefined] {\n    const prev = this.nodeMapByKey.get(key);\n\n    if (prev && prev.isRemoved() && executedAt.after(prev.getUpdatedAt())) {\n      this.numberOfRemovedElement -= 1;\n    }\n\n    if (prev === undefined || executedAt.after(prev.getUpdatedAt())) {\n      const node = RHTNode.of(key, value, executedAt, false);\n      this.nodeMapByKey.set(key, node);\n\n      if (prev !== undefined && prev.isRemoved()) {\n        return [prev, node];\n      }\n      return [undefined, node];\n    }\n\n    if (prev.isRemoved()) {\n      return [prev, undefined];\n    }\n\n    return [undefined, undefined];\n  }\n\n  /**\n   * SetInternal sets the value of the given key internally.\n   */\n  public setInternal(\n    key: string,\n    value: string,\n    executedAt: TimeTicket,\n    removed: boolean,\n  ) {\n    const node = RHTNode.of(key, value, executedAt, removed);\n    this.nodeMapByKey.set(key, node);\n\n    if (removed) {\n      this.numberOfRemovedElement++;\n    }\n  }\n\n  /**\n   * `remove` removes the Element of the given key.\n   */\n  public remove(key: string, executedAt: TimeTicket): Array<RHTNode> {\n    const prev = this.nodeMapByKey.get(key);\n\n    const gcNodes: Array<RHTNode> = [];\n    if (prev === undefined || executedAt.after(prev.getUpdatedAt())) {\n      if (prev === undefined) {\n        this.numberOfRemovedElement += 1;\n        const node = RHTNode.of(key, '', executedAt, true);\n        this.nodeMapByKey.set(key, node);\n\n        gcNodes.push(node);\n        return gcNodes;\n      }\n\n      const alreadyRemoved = prev.isRemoved();\n      if (!alreadyRemoved) {\n        this.numberOfRemovedElement += 1;\n      }\n\n      if (alreadyRemoved) {\n        gcNodes.push(prev);\n      }\n\n      const node = RHTNode.of(key, prev.getValue(), executedAt, true);\n      this.nodeMapByKey.set(key, node);\n      gcNodes.push(node);\n\n      return gcNodes;\n    }\n\n    return gcNodes;\n  }\n\n  /**\n   * `has` returns whether the element exists of the given key or not.\n   */\n  public has(key: string): boolean {\n    if (this.nodeMapByKey.has(key)) {\n      const node = this.nodeMapByKey.get(key);\n      return node !== undefined && !node.isRemoved();\n    }\n    return false;\n  }\n\n  /**\n   * `get` returns the value of the given key.\n   */\n  public get(key: string): string | undefined {\n    if (!this.nodeMapByKey.has(key)) {\n      return;\n    }\n\n    return this.nodeMapByKey.get(key)!.getValue();\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): RHT {\n    const rht = new RHT();\n    for (const [, node] of this.nodeMapByKey) {\n      rht.setInternal(\n        node.getKey(),\n        node.getValue(),\n        node.getUpdatedAt(),\n        node.isRemoved(),\n      );\n    }\n    return rht;\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this hashtable.\n   */\n  public toJSON(): string {\n    if (!this.size()) {\n      return '{}';\n    }\n\n    const items = [];\n    for (const [key, node] of this.nodeMapByKey) {\n      if (!node.isRemoved()) {\n        items.push(`\"${escapeString(key)}\":\"${escapeString(node.getValue())}\"`);\n      }\n    }\n    return `{${items.join(',')}}`;\n  }\n\n  /**\n   * `size` returns the size of RHT\n   */\n  public size(): number {\n    return this.nodeMapByKey.size - this.numberOfRemovedElement;\n  }\n\n  /**\n   * `toObject` returns the object of this hashtable.\n   */\n  public toObject(): Record<string, string> {\n    const obj: Record<string, string> = {};\n    for (const [key, node] of this.nodeMapByKey) {\n      if (!node.isRemoved()) {\n        obj[key] = node.getValue();\n      }\n    }\n\n    return obj;\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public *[Symbol.iterator](): IterableIterator<RHTNode> {\n    for (const [, node] of this.nodeMapByKey) {\n      yield node as RHTNode;\n    }\n  }\n\n  /**\n   * `purge` purges the given child node.\n   */\n  public purge(child: RHTNode) {\n    const node = this.nodeMapByKey.get(child.getKey());\n    if (node == undefined || node.toIDString() != child.toIDString()) {\n      // TODO(hackerwins): Should we return an error when the child is not found?\n      return;\n    }\n\n    this.nodeMapByKey.delete(child.getKey());\n    this.numberOfRemovedElement--;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  InitialTimeTicket,\n  MaxTimeTicket,\n  TimeTicket,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { RHT, RHTNode } from '@yorkie-js-sdk/src/document/crdt/rht';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport {\n  RGATreeSplit,\n  RGATreeSplitNode,\n  RGATreeSplitPosRange,\n  ValueChange,\n} from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { escapeString } from '@yorkie-js-sdk/src/document/json/strings';\nimport { parseObjectValues } from '@yorkie-js-sdk/src/util/object';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\nimport { GCChild, GCPair } from '@yorkie-js-sdk/src/document/crdt/gc';\n\n/**\n * `TextChangeType` is the type of TextChange.\n *\n */\nenum TextChangeType {\n  Content = 'content',\n  Style = 'style',\n}\n\n/**\n * `TextValueType` is a value of Text\n * which has a attributes that expresses the text style.\n */\nexport interface TextValueType<A> {\n  attributes?: A;\n  content?: string;\n}\n\n/**\n * `TextChange` represents the changes to the text\n * when executing the edit, setstyle methods.\n */\ninterface TextChange<A = Indexable> extends ValueChange<TextValueType<A>> {\n  type: TextChangeType;\n}\n\n/**\n * `CRDTTextValue` is a value of Text\n * which has a attributes that expresses the text style.\n * Attributes are represented by RHT.\n *\n */\nexport class CRDTTextValue {\n  private attributes: RHT;\n  private content: string;\n\n  constructor(content: string) {\n    this.attributes = RHT.create();\n    this.content = content;\n  }\n\n  /**\n   * `create` creates a instance of CRDTTextValue.\n   */\n  public static create(content: string): CRDTTextValue {\n    return new CRDTTextValue(content);\n  }\n\n  /**\n   * `length` returns the length of value.\n   */\n  public get length(): number {\n    return this.content.length;\n  }\n\n  /**\n   * `substring` returns a sub-string value of the given range.\n   */\n  public substring(indexStart: number, indexEnd: number): CRDTTextValue {\n    const value = new CRDTTextValue(\n      this.content.substring(indexStart, indexEnd),\n    );\n    value.attributes = this.attributes.deepcopy();\n    return value;\n  }\n\n  /**\n   * `setAttr` sets attribute of the given key, updated time and value.\n   */\n  public setAttr(\n    key: string,\n    content: string,\n    updatedAt: TimeTicket,\n  ): [RHTNode | undefined, RHTNode | undefined] {\n    return this.attributes.set(key, content, updatedAt);\n  }\n\n  /**\n   * `getAttr` returns the attributes of this value.\n   */\n  public getAttrs(): RHT {\n    return this.attributes;\n  }\n\n  /**\n   * `toString` returns the string representation of this value.\n   */\n  public toString(): string {\n    return this.content;\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this value.\n   */\n  public toJSON(): string {\n    const content = escapeString(this.content);\n    const attrsObj = this.attributes.toObject();\n    const attrs = [];\n    for (const [key, v] of Object.entries(attrsObj)) {\n      const value = JSON.parse(v);\n      const item =\n        typeof value === 'string'\n          ? `\"${escapeString(key)}\":\"${escapeString(value)}\"`\n          : `\"${escapeString(key)}\":${String(value)}`;\n      attrs.push(item);\n    }\n    attrs.sort();\n    if (attrs.length === 0) {\n      return `{\"val\":\"${content}\"}`;\n    }\n    return `{\"attrs\":{${attrs.join(',')}},\"val\":\"${content}\"}`;\n  }\n\n  /**\n   * `getAttributes` returns the attributes of this value.\n   */\n  public getAttributes(): Record<string, string> {\n    return this.attributes.toObject();\n  }\n\n  /**\n   * `getContent` returns the internal content.\n   */\n  public getContent(): string {\n    return this.content;\n  }\n\n  /**\n   * `purge` purges the given child node.\n   */\n  public purge(node: GCChild): void {\n    if (this.attributes && node instanceof RHTNode) {\n      this.attributes.purge(node);\n    }\n  }\n\n  /**\n   * `getGCPairs` returns the pairs of GC.\n   */\n  public getGCPairs(): Array<GCPair> {\n    const pairs = [];\n\n    for (const node of this.attributes) {\n      if (node.getRemovedAt()) {\n        pairs.push({ parent: this, child: node });\n      }\n    }\n\n    return pairs;\n  }\n}\n\n/**\n *  `CRDTText` is a custom CRDT data type to represent the contents of text editors.\n *\n */\nexport class CRDTText<A extends Indexable = Indexable> extends CRDTElement {\n  private rgaTreeSplit: RGATreeSplit<CRDTTextValue>;\n\n  constructor(\n    rgaTreeSplit: RGATreeSplit<CRDTTextValue>,\n    createdAt: TimeTicket,\n  ) {\n    super(createdAt);\n    this.rgaTreeSplit = rgaTreeSplit;\n  }\n\n  /**\n   * `create` a instance of Text.\n   */\n  public static create<A extends Indexable>(\n    rgaTreeSplit: RGATreeSplit<CRDTTextValue>,\n    createdAt: TimeTicket,\n  ): CRDTText<A> {\n    return new CRDTText<A>(rgaTreeSplit, createdAt);\n  }\n\n  /**\n   * `edit` edits the given range with the given value and attributes.\n   *\n   * @internal\n   */\n  public edit(\n    range: RGATreeSplitPosRange,\n    content: string,\n    editedAt: TimeTicket,\n    attributes?: Record<string, string>,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [\n    Map<string, TimeTicket>,\n    Array<TextChange<A>>,\n    Array<GCPair>,\n    RGATreeSplitPosRange,\n  ] {\n    const crdtTextValue = content ? CRDTTextValue.create(content) : undefined;\n    if (crdtTextValue && attributes) {\n      for (const [k, v] of Object.entries(attributes)) {\n        crdtTextValue.setAttr(k, v, editedAt);\n      }\n    }\n\n    const [caretPos, maxCreatedAtMap, pairs, valueChanges] =\n      this.rgaTreeSplit.edit(\n        range,\n        editedAt,\n        crdtTextValue,\n        maxCreatedAtMapByActor,\n      );\n\n    const changes: Array<TextChange<A>> = valueChanges.map((change) => ({\n      ...change,\n      value: change.value\n        ? {\n            attributes: parseObjectValues<A>(change.value.getAttributes()),\n            content: change.value.getContent(),\n          }\n        : {\n            attributes: undefined,\n            content: '',\n          },\n      type: TextChangeType.Content,\n    }));\n\n    return [maxCreatedAtMap, changes, pairs, [caretPos, caretPos]];\n  }\n\n  /**\n   * `setStyle` applies the style of the given range.\n   * 01. split nodes with from and to\n   * 02. style nodes between from and to\n   *\n   * @param range - range of RGATreeSplitNode\n   * @param attributes - style attributes\n   * @param editedAt - edited time\n   * @param maxCreatedAtMapByActor - maxCreatedAtMapByActor\n   * @internal\n   */\n  public setStyle(\n    range: RGATreeSplitPosRange,\n    attributes: Record<string, string>,\n    editedAt: TimeTicket,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [Map<string, TimeTicket>, Array<GCPair>, Array<TextChange<A>>] {\n    // 01. split nodes with from and to\n    const [, toRight] = this.rgaTreeSplit.findNodeWithSplit(range[1], editedAt);\n    const [, fromRight] = this.rgaTreeSplit.findNodeWithSplit(\n      range[0],\n      editedAt,\n    );\n\n    // 02. style nodes between from and to\n    const changes: Array<TextChange<A>> = [];\n    const nodes = this.rgaTreeSplit.findBetween(fromRight, toRight);\n    const createdAtMapByActor = new Map<string, TimeTicket>();\n    const toBeStyleds: Array<RGATreeSplitNode<CRDTTextValue>> = [];\n\n    for (const node of nodes) {\n      const actorID = node.getCreatedAt().getActorID();\n\n      const maxCreatedAt = maxCreatedAtMapByActor?.size\n        ? maxCreatedAtMapByActor!.has(actorID)\n          ? maxCreatedAtMapByActor!.get(actorID)!\n          : InitialTimeTicket\n        : MaxTimeTicket;\n\n      if (node.canStyle(editedAt, maxCreatedAt)) {\n        const maxCreatedAt = createdAtMapByActor.get(actorID);\n        const createdAt = node.getCreatedAt();\n        if (!maxCreatedAt || createdAt.after(maxCreatedAt)) {\n          createdAtMapByActor.set(actorID, createdAt);\n        }\n        toBeStyleds.push(node);\n      }\n    }\n\n    const pairs: Array<GCPair> = [];\n    for (const node of toBeStyleds) {\n      if (node.isRemoved()) {\n        continue;\n      }\n\n      const [fromIdx, toIdx] = this.rgaTreeSplit.findIndexesFromRange(\n        node.createPosRange(),\n      );\n      changes.push({\n        type: TextChangeType.Style,\n        actor: editedAt.getActorID(),\n        from: fromIdx,\n        to: toIdx,\n        value: {\n          attributes: parseObjectValues(attributes) as A,\n        },\n      });\n\n      for (const [key, value] of Object.entries(attributes)) {\n        const [prev] = node.getValue().setAttr(key, value, editedAt);\n        if (prev !== undefined) {\n          pairs.push({ parent: node.getValue(), child: prev });\n        }\n      }\n    }\n\n    return [createdAtMapByActor, pairs, changes];\n  }\n\n  /**\n   * `indexRangeToPosRange` returns the position range of the given index range.\n   */\n  public indexRangeToPosRange(\n    fromIdx: number,\n    toIdx: number,\n  ): RGATreeSplitPosRange {\n    const fromPos = this.rgaTreeSplit.indexToPos(fromIdx);\n    if (fromIdx === toIdx) {\n      return [fromPos, fromPos];\n    }\n\n    return [fromPos, this.rgaTreeSplit.indexToPos(toIdx)];\n  }\n\n  /**\n   * `length` returns size of RGATreeList.\n   */\n  public get length(): number {\n    return this.rgaTreeSplit.length;\n  }\n\n  /**\n   * `checkWeight` returns false when there is an incorrect weight node.\n   * for debugging purpose.\n   */\n  public checkWeight(): boolean {\n    return this.rgaTreeSplit.checkWeight();\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this text.\n   */\n  public toJSON(): string {\n    const json = [];\n\n    for (const node of this.rgaTreeSplit) {\n      if (!node.isRemoved()) {\n        json.push(node.getValue().toJSON());\n      }\n    }\n\n    return `[${json.join(',')}]`;\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this text.\n   */\n  public toSortedJSON(): string {\n    return this.toJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: JSON.parse(this.toJSON()),\n      type: 'YORKIE_TEXT',\n    };\n  }\n\n  /**\n   * `toString` returns the string representation of this text.\n   */\n  public toString(): string {\n    return this.rgaTreeSplit.toString();\n  }\n\n  /**\n   * `values` returns the content-attributes pair array of this text.\n   */\n  public values(): Array<TextValueType<A>> {\n    const values = [];\n\n    for (const node of this.rgaTreeSplit) {\n      if (!node.isRemoved()) {\n        const value = node.getValue();\n        values.push({\n          attributes: parseObjectValues<A>(value.getAttributes()),\n          content: value.getContent(),\n        });\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * `getRGATreeSplit` returns rgaTreeSplit.\n   *\n   * @internal\n   */\n  public getRGATreeSplit(): RGATreeSplit<CRDTTextValue> {\n    return this.rgaTreeSplit;\n  }\n\n  /**\n   * `toTestString` returns a String containing the meta data of this value\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    return this.rgaTreeSplit.toTestString();\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTText<A> {\n    const text = new CRDTText<A>(\n      this.rgaTreeSplit.deepcopy(),\n      this.getCreatedAt(),\n    );\n    text.remove(this.getRemovedAt());\n    return text;\n  }\n\n  /**\n   * `findIndexesFromRange` returns pair of integer offsets of the given range.\n   */\n  public findIndexesFromRange(range: RGATreeSplitPosRange): [number, number] {\n    return this.rgaTreeSplit.findIndexesFromRange(range);\n  }\n\n  /**\n   * `getGCPairs` returns the pairs of GC.\n   */\n  public getGCPairs(): Array<GCPair> {\n    const pairs = [];\n    for (const node of this.rgaTreeSplit) {\n      if (node.getRemovedAt()) {\n        pairs.push({ parent: this.rgaTreeSplit, child: node });\n      }\n\n      for (const p of node.getValue().getGCPairs()) {\n        pairs.push(p);\n      }\n    }\n\n    return pairs;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { RGATreeSplitPos } from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { CRDTText } from '@yorkie-js-sdk/src/document/crdt/text';\nimport {\n  Operation,\n  OperationInfo,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { Indexable } from '../document';\n\n/**\n * `EditOperation` is an operation representing editing Text. Most of the same as\n * Edit, but with additional style properties, attributes.\n */\nexport class EditOperation extends Operation {\n  private fromPos: RGATreeSplitPos;\n  private toPos: RGATreeSplitPos;\n  private maxCreatedAtMapByActor: Map<string, TimeTicket>;\n  private content: string;\n  private attributes: Map<string, string>;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    fromPos: RGATreeSplitPos,\n    toPos: RGATreeSplitPos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    content: string,\n    attributes: Map<string, string>,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.fromPos = fromPos;\n    this.toPos = toPos;\n    this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;\n    this.content = content;\n    this.attributes = attributes;\n  }\n\n  /**\n   * `create` creates a new instance of EditOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    fromPos: RGATreeSplitPos,\n    toPos: RGATreeSplitPos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    content: string,\n    attributes: Map<string, string>,\n    executedAt: TimeTicket,\n  ): EditOperation {\n    return new EditOperation(\n      parentCreatedAt,\n      fromPos,\n      toPos,\n      maxCreatedAtMapByActor,\n      content,\n      attributes,\n      executedAt,\n    );\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute<A extends Indexable>(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTText)) {\n      logger.fatal(`fail to execute, only Text can execute edit`);\n    }\n\n    const text = parentObject as CRDTText<A>;\n    const [, changes, pairs] = text.edit(\n      [this.fromPos, this.toPos],\n      this.content,\n      this.getExecutedAt(),\n      Object.fromEntries(this.attributes),\n      this.maxCreatedAtMapByActor,\n    );\n\n    for (const pair of pairs) {\n      root.registerGCPair(pair);\n    }\n\n    return {\n      opInfos: changes.map(({ from, to, value }) => {\n        return {\n          type: 'edit',\n          from,\n          to,\n          value,\n          path: root.createPath(this.getParentCreatedAt()),\n        } as OperationInfo;\n      }),\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    const parent = this.getParentCreatedAt().toTestString();\n    const fromPos = this.fromPos.toTestString();\n    const toPos = this.toPos.toTestString();\n    const content = this.content;\n    return `${parent}.EDIT(${fromPos},${toPos},${content})`;\n  }\n\n  /**\n   * `getFromPos` returns the start point of the editing range.\n   */\n  public getFromPos(): RGATreeSplitPos {\n    return this.fromPos;\n  }\n\n  /**\n   * `getToPos` returns the end point of the editing range.\n   */\n  public getToPos(): RGATreeSplitPos {\n    return this.toPos;\n  }\n\n  /**\n   * `getContent` returns the content of Edit.\n   */\n  public getContent(): string {\n    return this.content;\n  }\n\n  /**\n   * `getAttributes` returns the attributes of this Edit.\n   */\n  public getAttributes(): Map<string, string> {\n    return this.attributes || new Map();\n  }\n\n  /**\n   * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time\n   * by actor for the nodes included in the editing range.\n   */\n  public getMaxCreatedAtMapByActor(): Map<string, TimeTicket> {\n    return this.maxCreatedAtMapByActor;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { RGATreeSplitPos } from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { CRDTText } from '@yorkie-js-sdk/src/document/crdt/text';\nimport {\n  Operation,\n  OperationInfo,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { Indexable } from '../document';\n\n/**\n *  `StyleOperation` is an operation applies the style of the given range to Text.\n */\nexport class StyleOperation extends Operation {\n  private fromPos: RGATreeSplitPos;\n  private toPos: RGATreeSplitPos;\n  private maxCreatedAtMapByActor: Map<string, TimeTicket>;\n  private attributes: Map<string, string>;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    fromPos: RGATreeSplitPos,\n    toPos: RGATreeSplitPos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    attributes: Map<string, string>,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.fromPos = fromPos;\n    this.toPos = toPos;\n    this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;\n    this.attributes = attributes;\n  }\n\n  /**\n   * `create` creates a new instance of StyleOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    fromPos: RGATreeSplitPos,\n    toPos: RGATreeSplitPos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    attributes: Map<string, string>,\n    executedAt: TimeTicket,\n  ): StyleOperation {\n    return new StyleOperation(\n      parentCreatedAt,\n      fromPos,\n      toPos,\n      maxCreatedAtMapByActor,\n      attributes,\n      executedAt,\n    );\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute<A extends Indexable>(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTText)) {\n      logger.fatal(`fail to execute, only Text can execute edit`);\n    }\n    const text = parentObject as CRDTText<A>;\n    const [, pairs, changes] = text.setStyle(\n      [this.fromPos, this.toPos],\n      this.attributes ? Object.fromEntries(this.attributes) : {},\n      this.getExecutedAt(),\n      this.maxCreatedAtMapByActor,\n    );\n\n    for (const pair of pairs) {\n      root.registerGCPair(pair);\n    }\n\n    return {\n      opInfos: changes.map(({ from, to, value }) => {\n        return {\n          type: 'style',\n          from,\n          to,\n          value,\n          path: root.createPath(this.getParentCreatedAt()),\n        } as OperationInfo;\n      }),\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    const parent = this.getParentCreatedAt().toTestString();\n    const fromPos = this.fromPos.toTestString();\n    const toPos = this.toPos.toTestString();\n    const attributes = this.attributes;\n    return `${parent}.STYL(${fromPos},${toPos},${JSON.stringify(attributes)})`;\n  }\n\n  /**\n   * `getFromPos` returns the start point of the editing range.\n   */\n  public getFromPos(): RGATreeSplitPos {\n    return this.fromPos;\n  }\n\n  /**\n   * `getToPos` returns the end point of the editing range.\n   */\n  public getToPos(): RGATreeSplitPos {\n    return this.toPos;\n  }\n\n  /**\n   * `getAttributes` returns the attributes of this operation.\n   */\n  public getAttributes(): Map<string, string> {\n    return this.attributes;\n  }\n\n  /**\n   * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time\n   * by actor for the nodes included in the editing range.\n   */\n  public getMaxCreatedAtMapByActor(): Map<string, TimeTicket> {\n    return this.maxCreatedAtMapByActor;\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeTicket } from '../yorkie';\n\n/**\n * About `index`, `path`, `size` and `TreePos` in crdt.IndexTree.\n *\n * `index` of crdt.IndexTree represents a absolute position of a node in the tree.\n * `size` is used to calculate the relative index of nodes in the tree.\n * `index` in yorkie.IndexTree inspired by ProseMirror's index.\n *\n * For example, empty paragraph's size is 0 and index 0 is the position of the:\n *    0\n * <p> </p>,                                p.size = 0\n *\n * If a paragraph has <i>, its size becomes 2 and there are 3 indexes:\n *     0   1    2\n *  <p> <i> </i> </p>                       p.size = 2, i.size = 0\n *\n * If the paragraph has <i> and <b>, its size becomes 4:\n *     0   1    2   3   4\n *  <p> <i> </i> <b> </b> </p>              p.size = 4, i.size = 0, b.size = 0\n *     0   1    2   3    4    5   6\n *  <p> <i> </i> <b> </b> <s> </s> </p>     p.size = 6, i.size = 0, b.size = 0, s.size = 0\n *\n * If a paragraph has text, its size becomes length of the characters:\n *     0 1 2 3\n *  <p> A B C </p>                          p.size = 3,   text.size = 3\n *\n * So the size of a node is the sum of the size and type of its children:\n *  `size = children(element type).length * 2 + children.reduce((child, acc) => child.size + acc, 0)`\n *\n * `TreePos` is also used to represent the position in the tree. It contains node and offset.\n * `TreePos` can be converted to `index` and vice versa.\n *\n * For example, if a paragraph has <i>, there are 3 indexes:\n *     0   1    2\n *  <p> <i> </i> </p>                       p.size = 2, i.size = 0\n *\n * In this case, index of TreePos(p, 0) is 0, index of TreePos(p, 1) is 2.\n * Index 1 can be converted to TreePos(i, 0).\n *\n * `path` of crdt.IndexTree represents a position like `index` in crdt.IndexTree.\n * It contains offsets of each node from the root node as elements except the last.\n * The last element of the path represents the position in the parent node.\n *\n * Let's say we have a tree like this:\n *                     0 1 2\n * <p> <i> a b </i> <b> c d </b> </p>\n *\n * The path of the position between 'c' and 'd' is [1, 1]. The first element of the\n * path is the offset of the <b> in <p> and the second element represents the position\n * between 'c' and 'd' in <b>.\n */\n\n/**\n * `ElementPaddingSize` is the size of an element node as a child of another element node.\n * Because an element node could be considered as a pair of open and close tags.\n */\nexport const ElementPaddingSize = 2;\n\n/**\n * `DefaultRootType` is the default type of the root node.\n * It is used when the type of the root node is not specified.\n */\nexport const DefaultRootType = 'root';\n\n/**\n * `DefaultTextType` is the default type of the text node.\n * It is used when the type of the text node is not specified.\n */\nexport const DefaultTextType = 'text';\n\n/**\n * `NoteType` is the type of a node in the tree.\n */\nexport type TreeNodeType = string;\n\n/**\n * `addSizeOfLeftSiblings` returns the size of left siblings of the given offset.\n */\nexport function addSizeOfLeftSiblings<T extends IndexTreeNode<T>>(\n  parent: T,\n  offset: number,\n): number {\n  let acc = 0;\n  const siblings = parent.children;\n\n  for (let i = 0; i < offset; i++) {\n    const leftSibling = siblings[i];\n\n    if (!leftSibling || leftSibling.isRemoved) {\n      continue;\n    }\n\n    acc += leftSibling.paddedSize;\n  }\n\n  return acc;\n}\n\n/**\n * `IndexTreeNode` is the node of IndexTree. It is used to represent the\n * document of text-based editors.\n */\nexport abstract class IndexTreeNode<T extends IndexTreeNode<T>> {\n  type: TreeNodeType;\n  parent?: T;\n  _children: Array<T>;\n  size: number;\n\n  constructor(type: TreeNodeType, children: Array<T> = []) {\n    this.type = type;\n    this.size = 0;\n    this._children = children;\n\n    if (this.isText && this._children.length > 0) {\n      throw new Error(`Text node cannot have children: ${this.type}`);\n    }\n  }\n\n  /**\n   * `updateAncestorsSize` updates the size of the ancestors. It is used when\n   * the size of the node is changed.\n   */\n  updateAncestorsSize(): void {\n    let parent: T | undefined = this.parent;\n    const sign = this.isRemoved ? -1 : 1;\n\n    while (parent) {\n      parent.size += this.paddedSize * sign;\n      if (parent.isRemoved) {\n        break;\n      }\n\n      parent = parent.parent;\n    }\n  }\n\n  /**\n   * `updateDescendantsSize` updates the size of the descendants. It is used when\n   * the tree is newly created and the size of the descendants is not calculated.\n   */\n  updateDescendantsSize(): number {\n    let size = 0;\n    for (const child of this._children) {\n      const childSize = child.updateDescendantsSize();\n      if (child.isRemoved) {\n        continue;\n      }\n\n      size += childSize;\n    }\n\n    this.size += size;\n\n    return this.paddedSize;\n  }\n\n  /**\n   * `isText` returns true if the node is a text node.\n   */\n  get isText(): boolean {\n    // TODO(hackerwins): We need to get the type of text node from user.\n    // Consider the use schema to get the type of text node.\n    return this.type === DefaultTextType;\n  }\n\n  /**\n   * `paddedSize` returns the size of the node including padding size.\n   */\n  get paddedSize(): number {\n    return this.size + (this.isText ? 0 : ElementPaddingSize);\n  }\n\n  /**\n   * `isAncenstorOf` returns true if the node is an ancestor of the given node.\n   */\n  isAncestorOf(node: T): boolean {\n    return ancestorOf(this as any, node);\n  }\n\n  /**\n   * `nextSibling` returns the next sibling of the node.\n   */\n  get nextSibling(): T | undefined {\n    const offset = this.parent!.findOffset(this as any);\n    const sibling = this.parent!.children[offset + 1];\n    if (sibling) {\n      return sibling;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * `prevSibling` returns the previous sibling of the node.\n   */\n  get prevSibling(): T | undefined {\n    const offset = this.parent!.findOffset(this as any);\n    const sibling = this.parent!.children[offset - 1];\n    if (sibling) {\n      return sibling;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * `isRemoved` returns true if the node is removed.\n   */\n  abstract get isRemoved(): boolean;\n\n  /**\n   * `cloneText` clones the text node with the given id and value.\n   */\n  abstract cloneText(offset: number): T;\n\n  /**\n   * `cloneElement` clones the element node with the given issueTimeTicket\n   * function and value.\n   */\n  abstract cloneElement(issueTimeTicket: () => TimeTicket): T;\n\n  /**\n   * `value` returns the value of the node.\n   */\n  abstract get value();\n\n  /**\n   * `value` sets the value of the node.\n   */\n  abstract set value(v: string);\n\n  /**\n   * `splitText` splits the given node at the given offset.\n   */\n  splitText(offset: number, absOffset: number): T | undefined {\n    if (offset === 0 || offset === this.size) {\n      return;\n    }\n\n    const leftValue = this.value.slice(0, offset);\n    const rightValue = this.value.slice(offset);\n\n    if (!rightValue.length) {\n      return;\n    }\n\n    this.value = leftValue;\n\n    const rightNode = this.cloneText(offset + absOffset);\n    rightNode.value = rightValue;\n\n    this.parent!.insertAfterInternal(rightNode, this as any);\n\n    return rightNode;\n  }\n\n  /**\n   * `children` returns the children of the node.\n   */\n  get children(): Array<T> {\n    // Tombstone nodes remain awhile in the tree during editing.\n    // They will be removed after the editing is done.\n    // So, we need to filter out the tombstone nodes to get the real children.\n    return this._children.filter((child) => !child.isRemoved);\n  }\n\n  /**\n   * `allChildren` returns all the children of the node including tombstone nodes.\n   * It returns the shallow copy of the children.\n   */\n  get allChildren(): Array<T> {\n    return [...this._children];\n  }\n\n  /**\n   * `hasTextChild` returns true if the node's children consist of only text children.\n   */\n  hasTextChild(): boolean {\n    return (\n      this.children.length > 0 && this.children.every((child) => child.isText)\n    );\n  }\n\n  /**\n   * `append` appends the given nodes to the children.\n   */\n  append(...newNode: Array<T>): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    this._children.push(...newNode);\n    for (const node of newNode) {\n      node.parent = this as any;\n      node.updateAncestorsSize();\n    }\n  }\n\n  /**\n   * `prepend` prepends the given nodes to the children. It is only used\n   * for creating a new node from snapshot.\n   */\n  prepend(...newNode: Array<T>): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    this._children.unshift(...newNode);\n    for (const node of newNode) {\n      node.parent = this as any;\n    }\n  }\n\n  /**\n   * `insertBefore` inserts the given node before the given child.\n   */\n  insertBefore(newNode: T, referenceNode: T): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    const offset = this._children.indexOf(referenceNode);\n    if (offset === -1) {\n      throw new Error('child not found');\n    }\n\n    this.insertAtInternal(newNode, offset);\n    newNode.updateAncestorsSize();\n  }\n\n  /**\n   * `insertAfter` inserts the given node after the given child.\n   */\n  insertAfter(newNode: T, referenceNode: T): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    const offset = this._children.indexOf(referenceNode);\n    if (offset === -1) {\n      throw new Error('child not found');\n    }\n\n    this.insertAtInternal(newNode, offset + 1);\n    newNode.updateAncestorsSize();\n  }\n\n  /**\n   * `insertAt` inserts the given node at the given offset.\n   */\n  insertAt(newNode: T, offset: number): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    this.insertAtInternal(newNode, offset);\n    newNode.updateAncestorsSize();\n  }\n\n  /**\n   * `removeChild` removes the given child.\n   */\n  removeChild(child: T) {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    const offset = this._children.indexOf(child);\n    if (offset === -1) {\n      throw new Error('child not found');\n    }\n\n    this._children.splice(offset, 1);\n    child.parent = undefined;\n  }\n\n  /**\n   * `splitElement` splits the given element at the given offset.\n   */\n  splitElement(\n    offset: number,\n    issueTimeTicket: () => TimeTicket,\n  ): T | undefined {\n    /**\n     * TODO(hackerwins): Define ID of split node for concurrent editing.\n     * Text has fixed content and its split nodes could have limited offset\n     * range. But element node could have arbitrary children and its split\n     * nodes could have arbitrary offset range. So, id could be duplicated\n     * and its order could be broken when concurrent editing happens.\n     * Currently, we use the similar ID of split element with the split text.\n     */\n    const clone = this.cloneElement(issueTimeTicket);\n    this.parent!.insertAfterInternal(clone, this as any);\n    clone.updateAncestorsSize();\n\n    const leftChildren = this.children.slice(0, offset);\n    const rightChildren = this.children.slice(offset);\n    this._children = leftChildren;\n    clone._children = rightChildren;\n    this.size = this._children.reduce(\n      (acc, child) => acc + child.paddedSize,\n      0,\n    );\n    clone.size = clone._children.reduce(\n      (acc, child) => acc + child.paddedSize,\n      0,\n    );\n    for (const child of clone._children) {\n      child.parent = clone;\n    }\n\n    return clone;\n  }\n\n  /**\n   * `insertAfterInternal` inserts the given node after the given child.\n   * This method does not update the size of the ancestors.\n   */\n  insertAfterInternal(newNode: T, referenceNode: T): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    const offset = this._children.indexOf(referenceNode);\n    if (offset === -1) {\n      throw new Error('child not found');\n    }\n\n    this.insertAtInternal(newNode, offset + 1);\n  }\n\n  /**\n   * `insertAtInternal` inserts the given node at the given index.\n   * This method does not update the size of the ancestors.\n   */\n  insertAtInternal(newNode: T, offset: number): void {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    this._children.splice(offset, 0, newNode);\n    newNode.parent = this as any;\n  }\n\n  /**\n   * findOffset returns the offset of the given node in the children.\n   * It excludes the removed nodes.\n   */\n  findOffset(node: T): number {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    if (node.isRemoved) {\n      const index = this._children.indexOf(node);\n\n      // If nodes are removed, the offset of the removed node is the number of\n      // nodes before the node excluding the removed nodes.\n      const refined = this.allChildren\n        .splice(0, index)\n        .filter((node) => !node.isRemoved).length;\n\n      return refined;\n    }\n\n    return this.children.indexOf(node);\n  }\n\n  /**\n   * `findBranchOffset` returns offset of the given descendant node in this node.\n   * If the given node is not a descendant of this node, it returns -1.\n   */\n  findBranchOffset(node: T): number {\n    if (this.isText) {\n      throw new Error('Text node cannot have children');\n    }\n\n    let current: T | undefined = node;\n    while (current) {\n      const offset = this._children.indexOf(current);\n      if (offset !== -1) {\n        return offset;\n      }\n\n      current = current.parent;\n    }\n\n    return -1;\n  }\n}\n\n/**\n * `TreePos` is the position of a node in the tree.\n *\n * `offset` is the position of node's token. For example, if the node is an\n * element node, the offset is the index of the child node. If the node is a\n * text node, the offset is the index of the character.\n */\nexport type TreePos<T extends IndexTreeNode<T>> = {\n  node: T;\n  offset: number;\n};\n\n/**\n * `ancestorOf` returns true if the given node is an ancestor of the other node.\n */\nfunction ancestorOf<T extends IndexTreeNode<T>>(ancestor: T, node: T): boolean {\n  if (ancestor === node) {\n    return false;\n  }\n\n  while (node.parent) {\n    if (node.parent === ancestor) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * `TokenType` represents the type of token in XML representation.\n */\nexport enum TokenType {\n  /**\n   * `Start` represents that the start token type.\n   */\n  Start = 'Start',\n\n  /**\n   * `End` represents that the end token type.\n   */\n  End = 'End',\n\n  /**\n   * `Text` represents that the text token type.\n   */\n  Text = 'Text',\n}\n\n/**\n * `TreeToken` represents the token of the tree in XML representation.\n */\nexport type TreeToken<T> = [T, TokenType];\n\n/**\n * `tokensBetween` iterates the tokens between the given range.\n *\n * For example, if the tree is <p><i>abc</i></p>, the tokens are\n * [p, Start], [i, Start], [abc, Text], [i, End], [p, End].\n *\n * If the given range is collapsed, the callback is not called.\n * It traverses the tree based on the concept of token.\n * NOTE(sejongk): Nodes should not be removed in callback, because it leads wrong behaviors.\n */\nfunction tokensBetween<T extends IndexTreeNode<T>>(\n  root: T,\n  from: number,\n  to: number,\n  callback: (token: TreeToken<T>, ended: boolean) => void,\n) {\n  if (from > to) {\n    throw new Error(`from is greater than to: ${from} > ${to}`);\n  }\n\n  if (from > root.size) {\n    throw new Error(`from is out of range: ${from} > ${root.size}`);\n  }\n\n  if (to > root.size) {\n    throw new Error(`to is out of range: ${to} > ${root.size}`);\n  }\n\n  if (from === to) {\n    return;\n  }\n\n  let pos = 0;\n  for (const child of root.children) {\n    // If the child is an element node, the size of the child.\n    if (from - child.paddedSize < pos && pos < to) {\n      // If the child is an element node, the range of the child\n      // is from - 1 to to - 1. Because the range of the element node is from\n      // the open tag to the close tag.\n      const fromChild = child.isText ? from - pos : from - pos - 1;\n      const toChild = child.isText ? to - pos : to - pos - 1;\n\n      // If the range spans outside the child,\n      // the callback is called with the child.\n      const startContained = !child.isText && fromChild < 0;\n      const endContained = !child.isText && toChild > child.size;\n      if (child.isText || startContained) {\n        callback(\n          [child, child.isText ? TokenType.Text : TokenType.Start],\n          endContained,\n        );\n      }\n      tokensBetween(\n        child,\n        Math.max(0, fromChild),\n        Math.min(toChild, child.size),\n        callback,\n      );\n      if (endContained) {\n        callback([child, TokenType.End], endContained);\n      }\n    }\n    pos += child.paddedSize;\n  }\n}\n\n/**\n * `traverse` traverses the tree with postorder traversal.\n */\nexport function traverse<T extends IndexTreeNode<T>>(\n  node: T,\n  callback: (node: T, depth: number) => void,\n  depth = 0,\n) {\n  for (const child of node.children) {\n    traverse(child, callback, depth + 1);\n  }\n  callback(node, depth);\n}\n\n/**\n * `traverseAll` traverses the whole tree (include tombstones) with postorder traversal.\n */\nexport function traverseAll<T extends IndexTreeNode<T>>(\n  node: T,\n  callback: (node: T, depth: number) => void,\n  depth = 0,\n) {\n  for (const child of node._children) {\n    traverseAll(child, callback, depth + 1);\n  }\n  callback(node, depth);\n}\n\n/**\n * `findTreePos` finds the position of the given index in the given node.\n */\nfunction findTreePos<T extends IndexTreeNode<T>>(\n  node: T,\n  index: number,\n  preferText = true,\n): TreePos<T> {\n  if (index > node.size) {\n    throw new Error(`index is out of range: ${index} > ${node.size}`);\n  }\n\n  if (node.isText) {\n    return { node, offset: index };\n  }\n\n  // offset is the index of the child node.\n  // pos is the window of the index in the given node.\n  let offset = 0;\n  let pos = 0;\n  for (const child of node.children) {\n    // The pos is in bothsides of the text node, we should traverse\n    // inside of the text node if preferText is true.\n    if (preferText && child.isText && child.size >= index - pos) {\n      return findTreePos(child, index - pos, preferText);\n    }\n\n    // The position is in leftside of the element node.\n    if (index === pos) {\n      return { node, offset };\n    }\n\n    // The position is in rightside of the element node and preferText is false.\n    if (!preferText && child.paddedSize === index - pos) {\n      return { node, offset: offset + 1 };\n    }\n\n    // The position is in middle the element node.\n    if (child.paddedSize > index - pos) {\n      // If we traverse inside of the element node, we should skip the open.\n      const skipOpenSize = 1;\n      return findTreePos(child, index - pos - skipOpenSize, preferText);\n    }\n\n    pos += child.paddedSize;\n    offset += 1;\n  }\n\n  // The position is in rightmost of the given node.\n  return { node, offset };\n}\n\n/**\n * `getAncestors` returns the ancestors of the given node.\n */\nexport function getAncestors<T extends IndexTreeNode<T>>(node: T): Array<T> {\n  const ancestors: Array<T> = [];\n  let parent = node.parent;\n  while (parent) {\n    ancestors.unshift(parent);\n    parent = parent.parent;\n  }\n  return ancestors;\n}\n\n/**\n * `findCommonAncestor` finds the lowest common ancestor of the given nodes.\n */\nexport function findCommonAncestor<T extends IndexTreeNode<T>>(\n  nodeA: T,\n  nodeB: T,\n): T | undefined {\n  if (nodeA === nodeB) {\n    return nodeA;\n  }\n\n  const ancestorsOfA = getAncestors(nodeA);\n  const ancestorsOfB = getAncestors(nodeB);\n\n  let commonAncestor: T | undefined;\n  for (let i = 0; i < ancestorsOfA.length; i++) {\n    const ancestorOfA = ancestorsOfA[i];\n    const ancestorOfB = ancestorsOfB[i];\n\n    if (ancestorOfA !== ancestorOfB) {\n      break;\n    }\n\n    commonAncestor = ancestorOfA;\n  }\n\n  return commonAncestor;\n}\n\n/**\n * `findLeftmost` finds the leftmost node of the given tree.\n */\nexport function findLeftmost<T extends IndexTreeNode<T>>(node: T): T {\n  if (node.isText || node.children.length === 0) {\n    return node;\n  }\n\n  return findLeftmost(node.children[0]);\n}\n\n/**\n * `findTextPos` returns the tree position of the given path element.\n */\nfunction findTextPos<T extends IndexTreeNode<T>>(node: T, pathElement: number) {\n  if (node.size < pathElement) {\n    throw new Error('unacceptable path');\n  }\n\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n\n    if (child.size < pathElement) {\n      pathElement -= child.size;\n    } else {\n      node = child;\n\n      break;\n    }\n  }\n\n  return { node, offset: pathElement };\n}\n\n/**\n * `IndexTree` is a tree structure for linear indexing.\n */\nexport class IndexTree<T extends IndexTreeNode<T>> {\n  private root: T;\n\n  constructor(root: T) {\n    this.root = root;\n  }\n\n  /**\n   * `tokensBetween` returns the tokens between the given range.\n   */\n  tokensBetween(\n    from: number,\n    to: number,\n    callback: (token: TreeToken<T>, ended: boolean) => void,\n  ): void {\n    tokensBetween<T>(this.root, from, to, callback);\n  }\n\n  /**\n   * `traverse` traverses the tree with postorder traversal.\n   */\n  traverse(callback: (node: T) => void): void {\n    traverse(this.root, callback, 0);\n  }\n\n  /**\n   * `traverseAll` traverses the whole tree (include tombstones) with postorder traversal.\n   */\n  traverseAll(callback: (node: T) => void): void {\n    traverseAll(this.root, callback, 0);\n  }\n\n  /**\n   * findTreePos finds the position of the given index in the tree.\n   */\n  public findTreePos(index: number, preferText = true): TreePos<T> {\n    return findTreePos(this.root, index, preferText);\n  }\n\n  /**\n   * `treePosToPath` returns path from given treePos\n   */\n  public treePosToPath(treePos: TreePos<T>) {\n    const path = [];\n    let node = treePos.node;\n\n    if (node.isText) {\n      const offset = node.parent!.findOffset(node);\n      if (offset === -1) {\n        throw new Error('invalid treePos');\n      }\n\n      const sizeOfLeftSiblings = addSizeOfLeftSiblings(\n        node.parent! as T,\n        offset,\n      );\n      path.push(sizeOfLeftSiblings + treePos.offset);\n      node = node.parent!;\n    } else if (node.hasTextChild()) {\n      // TODO(hackerwins): The function does not consider the situation\n      // where Element and Text nodes are mixed in the Element's Children.\n      const sizeOfLeftSiblings = addSizeOfLeftSiblings(\n        node! as T,\n        treePos.offset,\n      );\n      path.push(sizeOfLeftSiblings);\n    } else {\n      path.push(treePos.offset);\n    }\n\n    while (node.parent) {\n      const offset = node.parent.findOffset(node);\n      if (offset === -1) {\n        throw new Error('invalid treePos');\n      }\n\n      path.push(offset);\n      node = node.parent;\n    }\n\n    return path.reverse();\n  }\n\n  /**\n   * `pathToIndex` returns index from given path\n   */\n  public pathToIndex(path: Array<number>): number {\n    const treePos = this.pathToTreePos(path);\n\n    return this.indexOf(treePos);\n  }\n\n  /**\n   * `pathToTreePos` returns treePos from given path\n   */\n  public pathToTreePos(path: Array<number>): TreePos<T> {\n    if (!path.length) {\n      throw new Error('unacceptable path');\n    }\n\n    let node = this.root;\n    for (let i = 0; i < path.length - 1; i++) {\n      const pathElement = path[i];\n      node = node.children[pathElement];\n\n      if (!node) {\n        throw new Error('unacceptable path');\n      }\n    }\n\n    if (node.hasTextChild()) {\n      return findTextPos(node, path[path.length - 1]);\n    }\n\n    if (node.children.length < path[path.length - 1]) {\n      throw new Error('unacceptable path');\n    }\n\n    return {\n      node,\n      offset: path[path.length - 1],\n    };\n  }\n\n  /**\n   * `getRoot` returns the root node of the tree.\n   */\n  public getRoot(): T {\n    return this.root;\n  }\n\n  /**\n   * `getSize` returns the size of the tree.\n   */\n  public get size(): number {\n    return this.root.size;\n  }\n\n  /**\n   * `findPostorderRight` finds right node of the given tree position with\n   *  postorder traversal.\n   */\n  public findPostorderRight(treePos: TreePos<T>): T | undefined {\n    const { node, offset } = treePos;\n\n    if (node.isText) {\n      if (node.size === offset) {\n        const nextSibling = node.nextSibling;\n        if (nextSibling) {\n          return nextSibling;\n        }\n\n        return node.parent;\n      }\n\n      return node;\n    }\n\n    if (node.children.length === offset) {\n      return node;\n    }\n\n    return findLeftmost(node.children[offset]);\n  }\n\n  /**\n   * `indexOf` returns the index of the given tree position.\n   */\n  public indexOf(pos: TreePos<T>): number {\n    let { node } = pos;\n    const { offset } = pos;\n\n    let size = 0;\n    let depth = 1;\n    if (node.isText) {\n      size += offset;\n\n      const parent = node.parent! as T;\n      const offsetOfNode = parent.findOffset(node);\n      if (offsetOfNode === -1) {\n        throw new Error('invalid pos');\n      }\n\n      size += addSizeOfLeftSiblings(parent, offsetOfNode);\n\n      node = node.parent!;\n    } else {\n      size += addSizeOfLeftSiblings(node, offset);\n    }\n\n    while (node?.parent) {\n      const parent = node.parent;\n      const offsetOfNode = parent.findOffset(node);\n      if (offsetOfNode === -1) {\n        throw new Error('invalid pos');\n      }\n\n      size += addSizeOfLeftSiblings(parent, offsetOfNode);\n      depth++;\n      node = node.parent;\n    }\n\n    return size + depth - 1;\n  }\n\n  /**\n   * `indexToPath` returns the path of the given index.\n   */\n  public indexToPath(index: number): Array<number> {\n    const treePos = this.findTreePos(index);\n    return this.treePosToPath(treePos);\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type Comparator<K> = (keyA: K, keyB: K) => number;\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const DefaultComparator = (a: any, b: any): number => {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Comparator,\n  DefaultComparator,\n} from '@yorkie-js-sdk/src/util/comparator';\n\ninterface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * `LLRBNode` is node of LLRBTree.\n */\nclass LLRBNode<K, V> {\n  public key: K;\n  public value: V;\n  public parent?: LLRBNode<K, V>;\n  public left?: LLRBNode<K, V>;\n  public right?: LLRBNode<K, V>;\n  public isRed: boolean;\n\n  constructor(key: K, value: V, isRed: boolean) {\n    this.key = key;\n    this.value = value;\n    this.isRed = isRed;\n  }\n}\n\n/**\n * `SortedMapIterator` is a interator for traversing LLRBTree.\n */\nexport class SortedMapIterator<K, V> {\n  public stack: Array<Entry<K, V>>;\n\n  constructor(root: LLRBNode<K, V>) {\n    this.stack = [];\n    this.traverseInorder(root);\n  }\n\n  // TODO: Replace with iterative approach, if we encounter performance problem.\n  private traverseInorder(node: LLRBNode<K, V>): void {\n    if (!node) {\n      return;\n    }\n\n    this.traverseInorder(node.left!);\n    this.stack.push({\n      key: node.key,\n      value: node.value,\n    });\n    this.traverseInorder(node.right!);\n  }\n}\n\n/**\n * LLRBTree is an implementation of Left-learning Red-Black Tree.\n *\n * Original paper on Left-leaning Red-Black Trees:\n * @see http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\nexport class LLRBTree<K, V> {\n  private root?: LLRBNode<K, V>;\n  private comparator: Comparator<K>;\n  private counter: number;\n\n  constructor(comparator?: Comparator<K>) {\n    this.comparator =\n      typeof comparator !== 'undefined' ? comparator : DefaultComparator;\n    this.counter = 0;\n  }\n\n  /**\n   * `put` puts the value of the given key.\n   */\n  public put(key: K, value: V): V {\n    this.root = this.putInternal(key, value, this.root);\n    this.root.isRed = false;\n    return value;\n  }\n\n  /**\n   * `get` gets a value of the given key.\n   */\n  public get(key: K): V | undefined {\n    const node = this.getInternal(key, this.root);\n    return node ? node.value : undefined;\n  }\n\n  /**\n   * `remove` removes a element of key.\n   */\n  public remove(key: K): void {\n    if (!this.isRed(this.root!.left!) && !this.isRed(this.root!.right!)) {\n      this.root!.isRed = true;\n    }\n\n    this.root = this.removeInternal(this.root!, key);\n    if (this.root) {\n      this.root.isRed = false;\n    }\n  }\n\n  /**\n   * `getIterator` returns a new instance of SortedMapIterator.\n   */\n  public getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator(this.root!);\n  }\n\n  /**\n   * `values` returns value array of LLRBTree.\n   */\n  public values(): Array<V> {\n    const values = [];\n    for (const entry of this.getIterator().stack) {\n      values.push(entry.value);\n    }\n    return values;\n  }\n\n  /**\n   * `floorEntry` returns the entry for the greatest key less than or equal to the\n   *  given key. If there is no such key, returns `undefined`.\n   */\n  public floorEntry(key: K): Entry<K, V> | undefined {\n    let node = this.root;\n    while (node) {\n      const compare = this.comparator(key, node.key);\n      if (compare > 0) {\n        if (node.right) {\n          node.right.parent = node;\n          node = node.right;\n        } else {\n          return node;\n        }\n      } else if (compare < 0) {\n        if (node.left) {\n          node.left.parent = node;\n          node = node.left;\n        } else {\n          let parent = node.parent;\n          let childNode = node;\n          while (parent && childNode === parent.left) {\n            childNode = parent;\n            parent = parent.parent;\n          }\n          return parent!;\n        }\n      } else {\n        return node;\n      }\n    }\n    return;\n  }\n\n  /**\n   * `lastEntry` returns last entry of LLRBTree.\n   */\n  public lastEntry(): Entry<K, V> | undefined {\n    if (!this.root) {\n      return this.root;\n    }\n\n    let node = this.root;\n    while (node.right) {\n      node = node.right;\n    }\n    return node;\n  }\n\n  /**\n   * `size` is a size of LLRBTree.\n   */\n  public size(): number {\n    return this.counter;\n  }\n\n  /**\n   * `isEmpty` checks if size is empty.\n   */\n  public isEmpty(): boolean {\n    return this.counter === 0;\n  }\n\n  private getInternal(\n    key: K,\n    node?: LLRBNode<K, V>,\n  ): LLRBNode<K, V> | undefined {\n    while (node) {\n      const compare = this.comparator(key, node.key);\n      if (compare === 0) {\n        return node;\n      } else if (compare < 0) {\n        node = node.left!;\n      } else if (compare > 0) {\n        node = node.right!;\n      }\n    }\n\n    return;\n  }\n\n  private putInternal(key: K, value: V, node?: LLRBNode<K, V>): LLRBNode<K, V> {\n    if (!node) {\n      this.counter += 1;\n      return new LLRBNode(key, value, true);\n    }\n\n    const compare = this.comparator(key, node.key);\n    if (compare < 0) {\n      node.left = this.putInternal(key, value, node.left);\n    } else if (compare > 0) {\n      node.right = this.putInternal(key, value, node.right);\n    } else {\n      node.value = value;\n    }\n\n    if (this.isRed(node.right!) && !this.isRed(node.left!)) {\n      node = this.rotateLeft(node);\n    }\n\n    if (this.isRed(node.left!) && this.isRed(node.left!.left!)) {\n      node = this.rotateRight(node);\n    }\n\n    if (this.isRed(node.left!) && this.isRed(node.right!)) {\n      this.flipColors(node);\n    }\n\n    return node;\n  }\n\n  private removeInternal(\n    node: LLRBNode<K, V>,\n    key: K,\n  ): LLRBNode<K, V> | undefined {\n    if (this.comparator(key, node.key) < 0) {\n      if (!this.isRed(node.left!) && !this.isRed(node.left!.left!)) {\n        node = this.moveRedLeft(node);\n      }\n      node.left = this.removeInternal(node.left!, key);\n    } else {\n      if (this.isRed(node.left!)) {\n        node = this.rotateRight(node);\n      }\n\n      if (this.comparator(key, node.key) === 0 && !node.right) {\n        this.counter -= 1;\n        return;\n      }\n\n      if (!this.isRed(node.right!) && !this.isRed(node.right!.left!)) {\n        node = this.moveRedRight(node);\n      }\n\n      if (this.comparator(key, node.key) === 0) {\n        this.counter -= 1;\n        const smallest = this.min(node.right!);\n        node.value = smallest.value;\n        node.key = smallest.key;\n        node.right = this.removeMin(node.right!);\n      } else {\n        node.right = this.removeInternal(node.right!, key);\n      }\n    }\n\n    return this.fixUp(node);\n  }\n\n  private min(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    if (!node.left) {\n      return node;\n    } else {\n      return this.min(node.left);\n    }\n  }\n\n  private removeMin(node: LLRBNode<K, V>): LLRBNode<K, V> | undefined {\n    if (!node.left) {\n      return;\n    }\n\n    if (!this.isRed(node.left) && !this.isRed(node.left!.left!)) {\n      node = this.moveRedLeft(node);\n    }\n\n    node.left = this.removeMin(node.left!);\n    return this.fixUp(node);\n  }\n\n  private fixUp(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    if (this.isRed(node.right!)) {\n      node = this.rotateLeft(node);\n    }\n\n    if (this.isRed(node.left!) && this.isRed(node.left!.left!)) {\n      node = this.rotateRight(node);\n    }\n\n    if (this.isRed(node.left!) && this.isRed(node.right!)) {\n      this.flipColors(node);\n    }\n\n    return node;\n  }\n\n  private moveRedLeft(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    this.flipColors(node);\n    if (this.isRed(node.right!.left!)) {\n      node.right = this.rotateRight(node.right!);\n      node = this.rotateLeft(node);\n      this.flipColors(node);\n    }\n    return node;\n  }\n\n  private moveRedRight(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    this.flipColors(node);\n    if (this.isRed(node.left!.left!)) {\n      node = this.rotateRight(node);\n      this.flipColors(node);\n    }\n    return node;\n  }\n\n  private isRed(node: LLRBNode<K, V>): boolean {\n    return node && node.isRed;\n  }\n\n  private rotateLeft(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    const x = node.right!;\n    node.right = x.left;\n    x.left = node;\n    x.isRed = x.left.isRed;\n    x.left.isRed = true;\n    return x;\n  }\n\n  private rotateRight(node: LLRBNode<K, V>): LLRBNode<K, V> {\n    const x = node.left!;\n    node.left = x.right;\n    x.right = node;\n    x.isRed = x.right.isRed;\n    x.right.isRed = true;\n    return x;\n  }\n\n  private flipColors(node: LLRBNode<K, V>): void {\n    node.isRed = !node.isRed!;\n    node.left!.isRed = !node.left!.isRed;\n    node.right!.isRed = !node.right!.isRed;\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TimeTicket,\n  InitialTimeTicket,\n  TimeTicketStruct,\n  MaxTimeTicket,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\n\nimport {\n  IndexTree,\n  TreePos,\n  IndexTreeNode,\n  traverseAll,\n  TokenType,\n} from '@yorkie-js-sdk/src/util/index_tree';\nimport { RHT, RHTNode } from './rht';\nimport { ActorID } from './../time/actor_id';\nimport { LLRBTree } from '@yorkie-js-sdk/src/util/llrb_tree';\nimport { Comparator } from '@yorkie-js-sdk/src/util/comparator';\nimport { parseObjectValues } from '@yorkie-js-sdk/src/util/object';\nimport type {\n  DefaultTextType,\n  TreeNodeType,\n  TreeToken,\n} from '@yorkie-js-sdk/src/util/index_tree';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\nimport { escapeString } from '@yorkie-js-sdk/src/document/json/strings';\nimport { GCChild, GCPair, GCParent } from '@yorkie-js-sdk/src/document/crdt/gc';\n\n/**\n * `TreeNode` represents a node in the tree.\n */\nexport type TreeNode = TextNode | ElementNode;\n\n/**\n * `ElementNode` represents an element node. It has an attributes and children.\n */\nexport type ElementNode<A extends Indexable = Indexable> = {\n  type: TreeNodeType;\n  attributes?: A;\n  children: Array<TreeNode>;\n};\n\n/**\n * `TextNode` represents a text node. It has a string value.\n */\nexport type TextNode = {\n  type: typeof DefaultTextType;\n  value: string;\n};\n\n/**\n * `TreeNodeForTest` represents the JSON representation of a node in the tree.\n * It is used for testing.\n */\nexport type TreeNodeForTest = TreeNode & {\n  children?: Array<TreeNodeForTest>;\n  size: number;\n  isRemoved: boolean;\n};\n\n/**\n * `TreeChangeType` represents the type of change in the tree.\n */\nexport enum TreeChangeType {\n  Content = 'content',\n  Style = 'style',\n  RemoveStyle = 'removeStyle',\n}\n\n/**\n * `TreeChange` represents the change in the tree.\n */\nexport type TreeChange =\n  | {\n      actor: ActorID;\n      type: TreeChangeType.Content;\n      from: number;\n      to: number;\n      fromPath: Array<number>;\n      toPath: Array<number>;\n      value?: Array<TreeNode>;\n      splitLevel?: number;\n    }\n  | {\n      actor: ActorID;\n      type: TreeChangeType.Style;\n      from: number;\n      to: number;\n      fromPath: Array<number>;\n      toPath: Array<number>;\n      value: { [key: string]: string };\n      splitLevel?: number;\n    }\n  | {\n      actor: ActorID;\n      type: TreeChangeType.RemoveStyle;\n      from: number;\n      to: number;\n      fromPath: Array<number>;\n      toPath: Array<number>;\n      value?: Array<string>;\n      splitLevel?: number;\n    };\n\n/**\n * `CRDTTreePos` represent a position in the tree. It is used to identify a\n * position in the tree. It is composed of the parent ID and the left sibling\n * ID. If there's no left sibling in parent's children, then left sibling is\n * parent.\n */\nexport class CRDTTreePos {\n  private parentID: CRDTTreeNodeID;\n  private leftSiblingID: CRDTTreeNodeID;\n\n  constructor(parentID: CRDTTreeNodeID, leftSiblingID: CRDTTreeNodeID) {\n    this.parentID = parentID;\n    this.leftSiblingID = leftSiblingID;\n  }\n\n  /**\n   * `of` creates a new instance of CRDTTreePos.\n   */\n  public static of(parentID: CRDTTreeNodeID, leftSiblingID: CRDTTreeNodeID) {\n    return new CRDTTreePos(parentID, leftSiblingID);\n  }\n\n  /**\n   * `fromTreePos` creates a new instance of CRDTTreePos from the given TreePos.\n   */\n  public static fromTreePos(pos: TreePos<CRDTTreeNode>): CRDTTreePos {\n    const { offset } = pos;\n    let { node } = pos;\n    let leftNode;\n\n    if (node.isText) {\n      if (node.parent!.children[0] === node && offset === 0) {\n        leftNode = node.parent!;\n      } else {\n        leftNode = node;\n      }\n\n      node = node.parent!;\n    } else {\n      if (offset === 0) {\n        leftNode = node;\n      } else {\n        leftNode = node.children[offset - 1];\n      }\n    }\n\n    return CRDTTreePos.of(\n      node.id,\n      CRDTTreeNodeID.of(leftNode.getCreatedAt(), leftNode.getOffset() + offset),\n    );\n  }\n\n  /**\n   * `getParentID` returns the parent ID.\n   */\n  public getParentID() {\n    return this.parentID;\n  }\n\n  /**\n   * `fromStruct` creates a new instance of CRDTTreeNodeID from the given struct.\n   */\n  public static fromStruct(struct: CRDTTreePosStruct): CRDTTreePos {\n    return CRDTTreePos.of(\n      CRDTTreeNodeID.of(\n        TimeTicket.fromStruct(struct.parentID.createdAt),\n        struct.parentID.offset,\n      ),\n      CRDTTreeNodeID.of(\n        TimeTicket.fromStruct(struct.leftSiblingID.createdAt),\n        struct.leftSiblingID.offset,\n      ),\n    );\n  }\n\n  /**\n   * `toStruct` returns the structure of this position.\n   */\n  public toStruct(): CRDTTreePosStruct {\n    return {\n      parentID: {\n        createdAt: this.getParentID().getCreatedAt().toStruct(),\n        offset: this.getParentID().getOffset(),\n      },\n      leftSiblingID: {\n        createdAt: this.getLeftSiblingID().getCreatedAt().toStruct(),\n        offset: this.getLeftSiblingID().getOffset(),\n      },\n    };\n  }\n\n  /**\n   * `toTreeNodePair` converts the pos to parent and left sibling nodes.\n   * If the position points to the middle of a node, then the left sibling node\n   * is the node that contains the position. Otherwise, the left sibling node is\n   * the node that is located at the left of the position.\n   */\n  public toTreeNodePair(tree: CRDTTree): TreeNodePair {\n    const parentID = this.getParentID();\n    const leftSiblingID = this.getLeftSiblingID();\n    const parentNode = tree.findFloorNode(parentID);\n    let leftNode = tree.findFloorNode(leftSiblingID);\n    if (!parentNode || !leftNode) {\n      throw new Error(\n        `cannot find node of CRDTTreePos(${parentID.toTestString()}, ${leftSiblingID.toTestString()})`,\n      );\n    }\n\n    /**\n     * NOTE(hackerwins): If the left node and the parent node are the same,\n     * it means that the position is the left-most of the parent node.\n     * We need to skip finding the left of the position.\n     */\n    if (\n      !leftSiblingID.equals(parentID) &&\n      leftSiblingID.getOffset() > 0 &&\n      leftSiblingID.getOffset() === leftNode.id.getOffset() &&\n      leftNode.insPrevID\n    ) {\n      leftNode = tree.findFloorNode(leftNode.insPrevID)!;\n    }\n\n    return [parentNode, leftNode];\n  }\n\n  /**\n   * `getLeftSiblingID` returns the left sibling ID.\n   */\n  public getLeftSiblingID() {\n    return this.leftSiblingID;\n  }\n\n  /**\n   * `equals` returns whether the given pos equals to this or not.\n   */\n  public equals(other: CRDTTreePos): boolean {\n    return (\n      this.getParentID()\n        .getCreatedAt()\n        .equals(other.getParentID().getCreatedAt()) &&\n      this.getParentID().getOffset() === other.getParentID().getOffset() &&\n      this.getLeftSiblingID()\n        .getCreatedAt()\n        .equals(other.getLeftSiblingID().getCreatedAt()) &&\n      this.getLeftSiblingID().getOffset() ===\n        other.getLeftSiblingID().getOffset()\n    );\n  }\n}\n\n/**\n * `CRDTTreeNodeID` represent an ID of a node in the tree. It is used to\n * identify a node in the tree. It is composed of the creation time of the node\n * and the offset from the beginning of the node if the node is split.\n *\n * Some of replicas may have nodes that are not split yet. In this case, we can\n * use `map.floorEntry()` to find the adjacent node.\n */\nexport class CRDTTreeNodeID {\n  /**\n   * `createdAt` is the creation time of the node.\n   */\n  private createdAt: TimeTicket;\n\n  /**\n   * `offset` is the distance from the beginning of the node if the node is\n   * split.\n   */\n  private offset: number;\n\n  constructor(createdAt: TimeTicket, offset: number) {\n    this.createdAt = createdAt;\n    this.offset = offset;\n  }\n\n  /**\n   * `of` creates a new instance of CRDTTreeNodeID.\n   */\n  public static of(createdAt: TimeTicket, offset: number): CRDTTreeNodeID {\n    return new CRDTTreeNodeID(createdAt, offset);\n  }\n\n  /**\n   * `fromStruct` creates a new instance of CRDTTreeNodeID from the given struct.\n   */\n  public static fromStruct(struct: CRDTTreeNodeIDStruct): CRDTTreeNodeID {\n    return CRDTTreeNodeID.of(\n      TimeTicket.fromStruct(struct.createdAt),\n      struct.offset,\n    );\n  }\n\n  /**\n   * `createComparator` creates a comparator for CRDTTreeNodeID.\n   */\n  public static createComparator(): Comparator<CRDTTreeNodeID> {\n    return (idA: CRDTTreeNodeID, idB: CRDTTreeNodeID) => {\n      const compare = idA.getCreatedAt().compare(idB.getCreatedAt());\n      if (compare !== 0) {\n        return compare;\n      }\n      if (idA.getOffset() > idB.getOffset()) {\n        return 1;\n      } else if (idA.getOffset() < idB.getOffset()) {\n        return -1;\n      }\n      return 0;\n    };\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of the node.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n\n  /**\n   * `equals` returns whether given ID equals to this ID or not.\n   */\n  public equals(other: CRDTTreeNodeID): boolean {\n    return (\n      this.createdAt.compare(other.createdAt) === 0 &&\n      this.offset === other.offset\n    );\n  }\n\n  /**\n   * `getOffset` returns returns the offset of the node.\n   */\n  public getOffset(): number {\n    return this.offset;\n  }\n\n  /**\n   * `setOffset` sets the offset of the node.\n   */\n  public setOffset(offset: number): void {\n    this.offset = offset;\n  }\n\n  /**\n   * `toStruct` returns the structure of this position.\n   */\n  public toStruct(): CRDTTreeNodeIDStruct {\n    return {\n      createdAt: this.createdAt.toStruct(),\n      offset: this.offset,\n    };\n  }\n\n  /**\n   * `toIDString` returns a string that can be used as an ID for this position.\n   */\n  public toIDString(): string {\n    return `${this.createdAt.toIDString()}:${this.offset}`;\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of the ticket\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    return `${this.createdAt.toTestString()}/${this.offset}`;\n  }\n}\n\n/**\n * `CRDTTreePosStruct` represents the structure of CRDTTreePos.\n */\nexport type CRDTTreePosStruct = {\n  parentID: CRDTTreeNodeIDStruct;\n  leftSiblingID: CRDTTreeNodeIDStruct;\n};\n\n/**\n * `CRDTTreeNodeIDStruct` represents the structure of CRDTTreeNodeID.\n * It is used to serialize and deserialize the CRDTTreeNodeID.\n */\nexport type CRDTTreeNodeIDStruct = {\n  createdAt: TimeTicketStruct;\n  offset: number;\n};\n\n/**\n * `TreePosRange` represents a pair of CRDTTreePos.\n */\nexport type TreePosRange = [CRDTTreePos, CRDTTreePos];\n\n/**\n * `TreeNodePair` represents a pair of CRDTTreeNode. It represents the position\n * of the node in the tree with the left and parent nodes.\n */\ntype TreeNodePair = [CRDTTreeNode, CRDTTreeNode];\n\n/**\n * `TreePosStructRange` represents the structure of TreeRange.\n * It is used to serialize and deserialize the TreeRange.\n */\nexport type TreePosStructRange = [CRDTTreePosStruct, CRDTTreePosStruct];\n\n/**\n * `CRDTTreeNode` is a node of CRDTTree. It includes the logical clock and\n * links to other nodes to resolve conflicts.\n */\nexport class CRDTTreeNode\n  extends IndexTreeNode<CRDTTreeNode>\n  implements GCParent, GCChild\n{\n  id: CRDTTreeNodeID;\n  removedAt?: TimeTicket;\n  attrs?: RHT;\n\n  /**\n   * `insPrevID` is the previous node id of this node after the node is split.\n   */\n  insPrevID?: CRDTTreeNodeID;\n\n  /**\n   * `insNextID` is the previous node id of this node after the node is split.\n   */\n  insNextID?: CRDTTreeNodeID;\n\n  _value = '';\n\n  constructor(\n    id: CRDTTreeNodeID,\n    type: string,\n    opts?: string | Array<CRDTTreeNode>,\n    attributes?: RHT,\n    removedAt?: TimeTicket,\n  ) {\n    super(type);\n    this.id = id;\n    this.removedAt = removedAt;\n    attributes && (this.attrs = attributes);\n\n    if (typeof opts === 'string') {\n      this.value = opts;\n    } else if (Array.isArray(opts)) {\n      this._children = opts;\n    }\n  }\n\n  /**\n   * `toIDString` returns the IDString of this node.\n   */\n  toIDString(): string {\n    return this.id.toIDString();\n  }\n\n  /**\n   * `getRemovedAt` returns the time when this node was removed.\n   */\n  getRemovedAt(): TimeTicket | undefined {\n    return this.removedAt;\n  }\n\n  /**\n   * `create` creates a new instance of CRDTTreeNode.\n   */\n  static create(\n    id: CRDTTreeNodeID,\n    type: string,\n    opts?: string | Array<CRDTTreeNode>,\n    attributes?: RHT,\n  ) {\n    return new CRDTTreeNode(id, type, opts, attributes);\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  deepcopy(): CRDTTreeNode {\n    const clone = new CRDTTreeNode(this.id, this.type);\n    clone.removedAt = this.removedAt;\n    clone._value = this._value;\n    clone.size = this.size;\n    clone.attrs = this.attrs?.deepcopy();\n    clone._children = this._children.map((child) => {\n      const childClone = child.deepcopy();\n      childClone.parent = clone;\n      return childClone;\n    });\n    clone.insPrevID = this.insPrevID;\n    clone.insNextID = this.insNextID;\n    return clone;\n  }\n\n  /**\n   * `value` returns the value of the node.\n   */\n  get value() {\n    if (!this.isText) {\n      throw new Error(`cannot get value of element node: ${this.type}`);\n    }\n\n    return this._value;\n  }\n\n  /**\n   * `value` sets the value of the node.\n   */\n  set value(v: string) {\n    if (!this.isText) {\n      throw new Error(`cannot set value of element node: ${this.type}`);\n    }\n\n    this._value = v;\n    this.size = v.length;\n  }\n\n  /**\n   * `isRemoved` returns whether the node is removed or not.\n   */\n  get isRemoved(): boolean {\n    return !!this.removedAt;\n  }\n\n  /**\n   * `remove` marks the node as removed.\n   */\n  remove(removedAt: TimeTicket): void {\n    const alived = !this.removedAt;\n\n    if (!this.removedAt || this.removedAt.compare(removedAt) > 0) {\n      this.removedAt = removedAt;\n    }\n\n    if (alived) {\n      this.updateAncestorsSize();\n    }\n  }\n\n  /**\n   * `cloneText` clones this text node with the given offset.\n   */\n  cloneText(offset: number): CRDTTreeNode {\n    return new CRDTTreeNode(\n      CRDTTreeNodeID.of(this.id.getCreatedAt(), offset),\n      this.type,\n      undefined,\n      undefined,\n      this.removedAt,\n    );\n  }\n\n  /**\n   * `cloneElement` clones this element node with the given issueTimeTicket function.\n   */\n  cloneElement(issueTimeTicket: () => TimeTicket): CRDTTreeNode {\n    return new CRDTTreeNode(\n      CRDTTreeNodeID.of(issueTimeTicket(), 0),\n      this.type,\n      undefined,\n      undefined,\n      this.removedAt,\n    );\n  }\n\n  /**\n   * `split` splits the given offset of this node.\n   */\n  public split(\n    tree: CRDTTree,\n    offset: number,\n    issueTimeTicket?: () => TimeTicket,\n  ): CRDTTreeNode | undefined {\n    const split = this.isText\n      ? this.splitText(offset, this.id.getOffset())\n      : this.splitElement(offset, issueTimeTicket!);\n\n    if (split) {\n      split.insPrevID = this.id;\n      if (this.insNextID) {\n        const insNext = tree.findFloorNode(this.insNextID)!;\n        insNext.insPrevID = split.id;\n        split.insNextID = this.insNextID;\n      }\n      this.insNextID = split.id;\n      tree.registerNode(split);\n    }\n    return split;\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of this element.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.id.getCreatedAt();\n  }\n\n  /**\n   * `getOffset` returns the offset of a pos.\n   */\n  public getOffset(): number {\n    return this.id.getOffset();\n  }\n\n  /**\n   * `canDelete` checks if node is able to delete.\n   */\n  public canDelete(editedAt: TimeTicket, maxCreatedAt: TimeTicket): boolean {\n    return (\n      !this.getCreatedAt().after(maxCreatedAt) &&\n      (!this.removedAt || editedAt.after(this.removedAt))\n    );\n  }\n\n  /**\n   * `canStyle` checks if node is able to style.\n   */\n  public canStyle(editedAt: TimeTicket, maxCreatedAt: TimeTicket): boolean {\n    if (this.isText) {\n      return false;\n    }\n\n    return (\n      !this.getCreatedAt().after(maxCreatedAt) &&\n      (!this.removedAt || editedAt.after(this.removedAt))\n    );\n  }\n\n  /**\n   * `setAttrs` sets the attributes of the node.\n   */\n  public setAttrs(\n    attrs: { [key: string]: string },\n    editedAt: TimeTicket,\n  ): Array<[RHTNode | undefined, RHTNode | undefined]> {\n    if (!this.attrs) {\n      this.attrs = new RHT();\n    }\n\n    const pairs = new Array<[RHTNode | undefined, RHTNode | undefined]>();\n    for (const [key, value] of Object.entries(attrs)) {\n      pairs.push(this.attrs.set(key, value, editedAt));\n    }\n\n    return pairs;\n  }\n\n  /**\n   * `purge` purges the given child node.\n   */\n  public purge(node: RHTNode): void {\n    if (this.attrs) {\n      this.attrs.purge(node);\n    }\n  }\n\n  /**\n   * `getGCPairs` returns the pairs of GC.\n   */\n  public getGCPairs(): Array<GCPair> {\n    const pairs: Array<GCPair> = [];\n    if (!this.attrs) {\n      return pairs;\n    }\n\n    for (const node of this.attrs) {\n      if (node.getRemovedAt()) {\n        pairs.push({ parent: this, child: node });\n      }\n    }\n\n    return pairs;\n  }\n}\n\n/**\n * `toTreeNode` converts the given CRDTTreeNode to TreeNode.\n */\nfunction toTreeNode(node: CRDTTreeNode): TreeNode {\n  if (node.isText) {\n    const currentNode = node;\n    return {\n      type: currentNode.type,\n      value: currentNode.value,\n    } as TextNode;\n  }\n\n  const treeNode: TreeNode = {\n    type: node.type,\n    children: node.children.map(toTreeNode),\n  };\n\n  if (node.attrs) {\n    treeNode.attributes = parseObjectValues(node.attrs?.toObject());\n  }\n\n  return treeNode;\n}\n\n/**\n * `toXML` converts the given CRDTNode to XML string.\n */\nexport function toXML(node: CRDTTreeNode): string {\n  if (node.isText) {\n    const currentNode = node;\n    return currentNode.value;\n  }\n\n  let attrs = '';\n  if (node.attrs && node.attrs.size()) {\n    attrs =\n      ' ' +\n      Array.from(node.attrs)\n        .filter((n) => !n.isRemoved())\n        .sort((a, b) => a.getKey().localeCompare(b.getKey()))\n        .map((n) => {\n          const obj = JSON.parse(n.getValue());\n          if (typeof obj === 'string') {\n            return `${n.getKey()}=\"${obj}\"`;\n          }\n          return `${n.getKey()}=\"${escapeString(n.getValue())}\"`;\n        })\n        .join(' ');\n  }\n\n  return `<${node.type}${attrs}>${node.children\n    .map((child) => toXML(child))\n    .join('')}</${node.type}>`;\n}\n\n/**\n * `toTestTreeNode` converts the given CRDTNode JSON for debugging.\n */\nfunction toTestTreeNode(node: CRDTTreeNode): TreeNodeForTest {\n  if (node.isText) {\n    const currentNode = node;\n    return {\n      type: currentNode.type,\n      value: currentNode.value,\n      size: currentNode.size,\n      isRemoved: currentNode.isRemoved,\n    } as TreeNodeForTest;\n  }\n\n  return {\n    type: node.type,\n    children: node.children.map(toTestTreeNode),\n    size: node.size,\n    isRemoved: node.isRemoved,\n  };\n}\n\n/**\n * `CRDTTree` is a CRDT implementation of a tree.\n */\nexport class CRDTTree extends CRDTElement implements GCParent {\n  private indexTree: IndexTree<CRDTTreeNode>;\n  private nodeMapByID: LLRBTree<CRDTTreeNodeID, CRDTTreeNode>;\n\n  constructor(root: CRDTTreeNode, createdAt: TimeTicket) {\n    super(createdAt);\n    this.indexTree = new IndexTree<CRDTTreeNode>(root);\n    this.nodeMapByID = new LLRBTree(CRDTTreeNodeID.createComparator());\n\n    this.indexTree.traverseAll((node) => {\n      this.nodeMapByID.put(node.id, node);\n    });\n  }\n\n  /**\n   * `create` creates a new instance of `CRDTTree`.\n   */\n  public static create(root: CRDTTreeNode, ticket: TimeTicket): CRDTTree {\n    return new CRDTTree(root, ticket);\n  }\n\n  /**\n   * `findFloorNode` finds node of given id.\n   */\n  public findFloorNode(id: CRDTTreeNodeID): CRDTTreeNode | undefined {\n    const entry = this.nodeMapByID.floorEntry(id);\n    if (!entry || !entry.key.getCreatedAt().equals(id.getCreatedAt())) {\n      return;\n    }\n\n    return entry.value;\n  }\n\n  /**\n   * `registerNode` registers the given node to the tree.\n   */\n  public registerNode(node: CRDTTreeNode): void {\n    this.nodeMapByID.put(node.id, node);\n  }\n\n  /**\n   * `findNodesAndSplitText` finds `TreePos` of the given `CRDTTreeNodeID` and\n   * splits nodes if the position is in the middle of a text node.\n   *\n   * The ids of the given `pos` are the ids of the node in the CRDT perspective.\n   * This is different from `TreePos` which is a position of the tree in the\n   * physical perspective.\n   *\n   * If `editedAt` is given, then it is used to find the appropriate left node\n   * for concurrent insertion.\n   */\n  public findNodesAndSplitText(\n    pos: CRDTTreePos,\n    editedAt?: TimeTicket,\n  ): TreeNodePair {\n    // 01. Find the parent and left sibling node of the given position.\n    const [parent, leftSibling] = pos.toTreeNodePair(this);\n    let leftNode = leftSibling;\n\n    // 02. Determine whether the position is left-most and the exact parent\n    // in the current tree.\n    const isLeftMost = parent === leftNode;\n    const realParent =\n      leftNode.parent && !isLeftMost ? leftNode.parent : parent;\n\n    // 03. Split text node if the left node is a text node.\n    if (leftNode.isText) {\n      leftNode.split(\n        this,\n        pos.getLeftSiblingID().getOffset() - leftNode.id.getOffset(),\n      );\n    }\n\n    // 04. Find the appropriate left node. If some nodes are inserted at the\n    // same position concurrently, then we need to find the appropriate left\n    // node. This is similar to RGA.\n    if (editedAt) {\n      const allChildren = realParent.allChildren;\n      const index = isLeftMost ? 0 : allChildren.indexOf(leftNode) + 1;\n\n      for (let i = index; i < allChildren.length; i++) {\n        const next = allChildren[i];\n        if (!next.id.getCreatedAt().after(editedAt)) {\n          break;\n        }\n\n        leftNode = next;\n      }\n    }\n\n    return [realParent, leftNode];\n  }\n\n  /**\n   * `style` applies the given attributes of the given range.\n   */\n  public style(\n    range: [CRDTTreePos, CRDTTreePos],\n    attributes: { [key: string]: string } | undefined,\n    editedAt: TimeTicket,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [Map<string, TimeTicket>, Array<GCPair>, Array<TreeChange>] {\n    const [fromParent, fromLeft] = this.findNodesAndSplitText(\n      range[0],\n      editedAt,\n    );\n    const [toParent, toLeft] = this.findNodesAndSplitText(range[1], editedAt);\n\n    const changes: Array<TreeChange> = [];\n    const attrs: { [key: string]: any } = attributes\n      ? parseObjectValues(attributes)\n      : {};\n    const createdAtMapByActor = new Map<string, TimeTicket>();\n    const pairs: Array<GCPair> = [];\n    this.traverseInPosRange(\n      fromParent,\n      fromLeft,\n      toParent,\n      toLeft,\n      ([node]) => {\n        const actorID = node.getCreatedAt().getActorID();\n        const maxCreatedAt = maxCreatedAtMapByActor\n          ? maxCreatedAtMapByActor!.has(actorID)\n            ? maxCreatedAtMapByActor!.get(actorID)!\n            : InitialTimeTicket\n          : MaxTimeTicket;\n\n        if (node.canStyle(editedAt, maxCreatedAt) && attributes) {\n          const maxCreatedAt = createdAtMapByActor!.get(actorID);\n          const createdAt = node.getCreatedAt();\n          if (!maxCreatedAt || createdAt.after(maxCreatedAt)) {\n            createdAtMapByActor.set(actorID, createdAt);\n          }\n\n          const updatedAttrPairs = node.setAttrs(attributes, editedAt);\n          const affectedAttrs = updatedAttrPairs.reduce(\n            (acc: { [key: string]: string }, [, curr]) => {\n              if (!curr) {\n                return acc;\n              }\n\n              acc[curr.getKey()] = attrs[curr.getKey()];\n              return acc;\n            },\n            {},\n          );\n\n          const parentOfNode = node.parent!;\n          const previousNode = node.prevSibling || node.parent!;\n\n          if (Object.keys(affectedAttrs).length > 0) {\n            changes.push({\n              type: TreeChangeType.Style,\n              from: this.toIndex(parentOfNode, previousNode),\n              to: this.toIndex(node, node),\n              fromPath: this.toPath(parentOfNode, previousNode),\n              toPath: this.toPath(node, node),\n              actor: editedAt.getActorID(),\n              value: affectedAttrs,\n            });\n          }\n\n          for (const [prev] of updatedAttrPairs) {\n            if (prev) {\n              pairs.push({ parent: node, child: prev });\n            }\n          }\n        }\n      },\n    );\n\n    return [createdAtMapByActor, pairs, changes];\n  }\n\n  /**\n   * `removeStyle` removes the given attributes of the given range.\n   */\n  public removeStyle(\n    range: [CRDTTreePos, CRDTTreePos],\n    attributesToRemove: Array<string>,\n    editedAt: TimeTicket,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [Map<string, TimeTicket>, Array<GCPair>, Array<TreeChange>] {\n    const [fromParent, fromLeft] = this.findNodesAndSplitText(\n      range[0],\n      editedAt,\n    );\n    const [toParent, toLeft] = this.findNodesAndSplitText(range[1], editedAt);\n\n    const changes: Array<TreeChange> = [];\n    const createdAtMapByActor = new Map<string, TimeTicket>();\n    const pairs: Array<GCPair> = [];\n    this.traverseInPosRange(\n      fromParent,\n      fromLeft,\n      toParent,\n      toLeft,\n      ([node]) => {\n        const actorID = node.getCreatedAt().getActorID();\n        const maxCreatedAt = maxCreatedAtMapByActor\n          ? maxCreatedAtMapByActor!.has(actorID)\n            ? maxCreatedAtMapByActor!.get(actorID)!\n            : InitialTimeTicket\n          : MaxTimeTicket;\n\n        if (node.canStyle(editedAt, maxCreatedAt) && attributesToRemove) {\n          const maxCreatedAt = createdAtMapByActor!.get(actorID);\n          const createdAt = node.getCreatedAt();\n          if (!maxCreatedAt || createdAt.after(maxCreatedAt)) {\n            createdAtMapByActor.set(actorID, createdAt);\n          }\n\n          if (!node.attrs) {\n            node.attrs = new RHT();\n          }\n\n          for (const value of attributesToRemove) {\n            const nodesTobeRemoved = node.attrs.remove(value, editedAt);\n            for (const rhtNode of nodesTobeRemoved) {\n              pairs.push({ parent: node, child: rhtNode });\n            }\n          }\n\n          const parentOfNode = node.parent!;\n          const previousNode = node.prevSibling || node.parent!;\n\n          changes.push({\n            actor: editedAt.getActorID()!,\n            type: TreeChangeType.RemoveStyle,\n            from: this.toIndex(parentOfNode, previousNode),\n            to: this.toIndex(node, node),\n            fromPath: this.toPath(parentOfNode, previousNode),\n            toPath: this.toPath(node, node),\n            value: attributesToRemove,\n          });\n        }\n      },\n    );\n\n    return [createdAtMapByActor, pairs, changes];\n  }\n\n  /**\n   * `edit` edits the tree with the given range and content.\n   * If the content is undefined, the range will be removed.\n   */\n  public edit(\n    range: [CRDTTreePos, CRDTTreePos],\n    contents: Array<CRDTTreeNode> | undefined,\n    splitLevel: number,\n    editedAt: TimeTicket,\n    issueTimeTicket: (() => TimeTicket) | undefined,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [Array<TreeChange>, Array<GCPair>, Map<string, TimeTicket>] {\n    // 01. find nodes from the given range and split nodes.\n    const [fromParent, fromLeft] = this.findNodesAndSplitText(\n      range[0],\n      editedAt,\n    );\n    const [toParent, toLeft] = this.findNodesAndSplitText(range[1], editedAt);\n\n    const fromIdx = this.toIndex(fromParent, fromLeft);\n    const fromPath = this.toPath(fromParent, fromLeft);\n\n    const nodesToBeRemoved: Array<CRDTTreeNode> = [];\n    const tokensToBeRemoved: Array<TreeToken<CRDTTreeNode>> = [];\n    const toBeMovedToFromParents: Array<CRDTTreeNode> = [];\n    const maxCreatedAtMap = new Map<string, TimeTicket>();\n    this.traverseInPosRange(\n      fromParent,\n      fromLeft,\n      toParent,\n      toLeft,\n      ([node, tokenType], ended) => {\n        // NOTE(hackerwins): If the node overlaps as a start tag with the\n        // range then we need to move the remaining children to fromParent.\n        if (tokenType === TokenType.Start && !ended) {\n          // TODO(hackerwins): Define more clearly merge-able rules\n          // between two parents. For now, we only merge two parents are\n          // both element nodes having text children.\n          // e.g. <p>a|b</p><p>c|d</p> -> <p>a|d</p>\n          // if (!fromParent.hasTextChild() || !toParent.hasTextChild()) {\n          //   return;\n          // }\n\n          for (const child of node.children) {\n            toBeMovedToFromParents.push(child);\n          }\n        }\n\n        const actorID = node.getCreatedAt().getActorID();\n        const maxCreatedAt = maxCreatedAtMapByActor\n          ? maxCreatedAtMapByActor!.has(actorID)\n            ? maxCreatedAtMapByActor!.get(actorID)!\n            : InitialTimeTicket\n          : MaxTimeTicket;\n\n        // NOTE(sejongk): If the node is removable or its parent is going to\n        // be removed, then this node should be removed.\n        if (\n          node.canDelete(editedAt, maxCreatedAt) ||\n          nodesToBeRemoved.includes(node.parent!)\n        ) {\n          const maxCreatedAt = maxCreatedAtMap.get(actorID);\n          const createdAt = node.getCreatedAt();\n\n          if (!maxCreatedAt || createdAt.after(maxCreatedAt)) {\n            maxCreatedAtMap.set(actorID, createdAt);\n          }\n\n          // NOTE(hackerwins): If the node overlaps as an end token with the\n          // range then we need to keep the node.\n          if (tokenType === TokenType.Text || tokenType === TokenType.Start) {\n            nodesToBeRemoved.push(node);\n          }\n          tokensToBeRemoved.push([node, tokenType]);\n        }\n      },\n    );\n\n    // NOTE(hackerwins): If concurrent deletion happens, we need to separate the\n    // range(from, to) into multiple ranges.\n    const changes: Array<TreeChange> = this.makeDeletionChanges(\n      tokensToBeRemoved,\n      editedAt,\n    );\n\n    // 02. Delete: delete the nodes that are marked as removed.\n    const pairs: Array<GCPair> = [];\n    for (const node of nodesToBeRemoved) {\n      node.remove(editedAt);\n      if (node.isRemoved) {\n        pairs.push({ parent: this, child: node });\n      }\n    }\n\n    // 03. Merge: move the nodes that are marked as moved.\n    for (const node of toBeMovedToFromParents) {\n      if (!node.removedAt) {\n        fromParent.append(node);\n      }\n    }\n\n    // 04. Split: split the element nodes for the given split level.\n    if (splitLevel > 0) {\n      let splitCount = 0;\n      let parent = fromParent;\n      let left = fromLeft;\n      while (splitCount < splitLevel) {\n        parent.split(this, parent.findOffset(left) + 1, issueTimeTicket);\n        left = parent;\n        parent = parent.parent!;\n        splitCount++;\n      }\n      changes.push({\n        type: TreeChangeType.Content,\n        from: fromIdx,\n        to: fromIdx,\n        fromPath,\n        toPath: fromPath,\n        actor: editedAt.getActorID(),\n      });\n    }\n\n    // 05. Insert: insert the given nodes at the given position.\n    if (contents?.length) {\n      const aliveContents: Array<CRDTTreeNode> = [];\n      let leftInChildren = fromLeft; // tree\n      for (const content of contents) {\n        // 05-1. Insert the content nodes to the tree.\n        if (leftInChildren === fromParent) {\n          // 05-1-1. when there's no leftSibling, then insert content into very front of parent's children.\n          fromParent.insertAt(content, 0);\n        } else {\n          // 05-1-2. insert after leftSibling\n          fromParent.insertAfter(content, leftInChildren);\n        }\n\n        leftInChildren = content;\n        traverseAll(content, (node) => {\n          // If insertion happens during concurrent editing and parent node has been removed,\n          // make new nodes as tombstone immediately.\n          if (fromParent.isRemoved) {\n            node.remove(editedAt);\n\n            pairs.push({ parent: this, child: node });\n          }\n\n          this.nodeMapByID.put(node.id, node);\n        });\n\n        if (!content.isRemoved) {\n          aliveContents.push(content);\n        }\n      }\n      if (aliveContents.length) {\n        const value = aliveContents.map((content) => toTreeNode(content));\n        if (changes.length && changes[changes.length - 1].from === fromIdx) {\n          changes[changes.length - 1].value = value;\n        } else {\n          changes.push({\n            type: TreeChangeType.Content,\n            from: fromIdx,\n            to: fromIdx,\n            fromPath,\n            toPath: fromPath,\n            actor: editedAt.getActorID(),\n            value,\n          });\n        }\n      }\n    }\n\n    return [changes, pairs, maxCreatedAtMap];\n  }\n\n  /**\n   * `editT` edits the given range with the given value.\n   * This method uses indexes instead of a pair of TreePos for testing.\n   */\n  public editT(\n    range: [number, number],\n    contents: Array<CRDTTreeNode> | undefined,\n    splitLevel: number,\n    editedAt: TimeTicket,\n    issueTimeTicket: () => TimeTicket,\n  ): void {\n    const fromPos = this.findPos(range[0]);\n    const toPos = this.findPos(range[1]);\n    this.edit(\n      [fromPos, toPos],\n      contents,\n      splitLevel,\n      editedAt,\n      issueTimeTicket,\n    );\n  }\n\n  /**\n   * `move` move the given source range to the given target range.\n   */\n  public move(\n    target: [number, number],\n    source: [number, number],\n    ticket: TimeTicket,\n  ): void {\n    // TODO(hackerwins, easylogic): Implement this with keeping references of the nodes.\n    throw new Error(`not implemented: ${target}, ${source}, ${ticket}`);\n  }\n\n  /**\n   * `purge` physically purges the given node.\n   */\n  public purge(node: CRDTTreeNode): void {\n    node.parent?.removeChild(node);\n    this.nodeMapByID.remove(node.id);\n\n    const insPrevID = node.insPrevID;\n    const insNextID = node.insNextID;\n\n    if (insPrevID) {\n      const insPrev = this.findFloorNode(insPrevID)!;\n      insPrev.insNextID = insNextID;\n    }\n\n    if (insNextID) {\n      const insNext = this.findFloorNode(insNextID)!;\n      insNext.insPrevID = insPrevID;\n    }\n\n    node.insPrevID = undefined;\n    node.insNextID = undefined;\n  }\n\n  /**\n   * `getGCPairs` returns the pairs of GC.\n   */\n  public getGCPairs(): Array<GCPair> {\n    const pairs: Array<GCPair> = [];\n    this.indexTree.traverse((node) => {\n      if (node.getRemovedAt()) {\n        pairs.push({ parent: this, child: node });\n      }\n\n      for (const p of node.getGCPairs()) {\n        pairs.push(p);\n      }\n    });\n\n    return pairs;\n  }\n\n  /**\n   * `findPos` finds the position of the given index in the tree.\n   */\n  public findPos(index: number, preferText = true): CRDTTreePos {\n    const treePos = this.indexTree.findTreePos(index, preferText);\n    return CRDTTreePos.fromTreePos(treePos);\n  }\n\n  /**\n   * `pathToPosRange` converts the given path of the node to the range of the position.\n   */\n  public pathToPosRange(path: Array<number>): [CRDTTreePos, CRDTTreePos] {\n    const fromIdx = this.pathToIndex(path);\n    return [this.findPos(fromIdx), this.findPos(fromIdx + 1)];\n  }\n\n  /**\n   * `pathToPos` finds the position of the given index in the tree by path.\n   */\n  public pathToPos(path: Array<number>): CRDTTreePos {\n    const index = this.indexTree.pathToIndex(path);\n    return this.findPos(index);\n  }\n\n  /**\n   * `getRoot` returns the root node of the tree.\n   */\n  public getRoot(): CRDTTreeNode {\n    return this.indexTree.getRoot();\n  }\n\n  /**\n   * `getSize` returns the size of the tree.\n   */\n  public getSize(): number {\n    return this.indexTree.size;\n  }\n\n  /**\n   * `getNodeSize` returns the size of the LLRBTree.\n   */\n  public getNodeSize(): number {\n    return this.nodeMapByID.size();\n  }\n\n  /**\n   * `getIndexTree` returns the index tree.\n   */\n  public getIndexTree(): IndexTree<CRDTTreeNode> {\n    return this.indexTree;\n  }\n\n  /**\n   * toXML returns the XML encoding of this tree.\n   */\n  public toXML(): string {\n    return toXML(this.indexTree.getRoot());\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this tree.\n   */\n  public toJSON(): string {\n    return JSON.stringify(this.getRootTreeNode());\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   *\n   * @internal\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: JSON.parse(this.toJSON()),\n      type: 'YORKIE_TREE',\n    };\n  }\n\n  /**\n   * `toJSInfoForTest` returns detailed TreeNode information for use in Devtools.\n   *\n   * @internal\n   */\n  public toJSInfoForTest(): Devtools.TreeNodeInfo {\n    const rootNode = this.indexTree.getRoot();\n\n    const toTreeNodeInfo = (\n      node: CRDTTreeNode,\n      parentNode: CRDTTreeNode | undefined = undefined,\n      leftChildNode: CRDTTreeNode | undefined = undefined,\n      depth = 0,\n    ): Devtools.TreeNodeInfo => {\n      let index, path, pos;\n\n      const treePos = node.isText\n        ? { node, offset: 0 }\n        : parentNode && leftChildNode\n        ? this.toTreePos(parentNode, leftChildNode)\n        : null;\n\n      if (treePos) {\n        index = this.indexTree.indexOf(treePos);\n        path = this.indexTree.treePosToPath(treePos);\n        pos = CRDTTreePos.fromTreePos(treePos).toStruct();\n      }\n\n      const nodeInfo: Devtools.TreeNodeInfo = {\n        type: node.type,\n        parent: parentNode?.id.toTestString(),\n        size: node.size,\n        id: node.id.toTestString(),\n        removedAt: node.removedAt?.toTestString(),\n        insPrev: node.insPrevID?.toTestString(),\n        insNext: node.insNextID?.toTestString(),\n        value: node.isText ? node.value : undefined,\n        isRemoved: node.isRemoved,\n        children: [] as Array<Devtools.TreeNodeInfo>,\n        depth,\n        attributes: node.attrs\n          ? parseObjectValues(node.attrs?.toObject())\n          : undefined,\n        index,\n        path,\n        pos,\n      };\n\n      for (let i = 0; i < node.allChildren.length; i++) {\n        const leftChildNode = i === 0 ? node : node.allChildren[i - 1];\n        nodeInfo.children.push(\n          toTreeNodeInfo(node.allChildren[i], node, leftChildNode, depth + 1),\n        );\n      }\n\n      return nodeInfo;\n    };\n\n    return toTreeNodeInfo(rootNode);\n  }\n\n  /**\n   * `getRootTreeNode` returns the converted value of this tree to TreeNode.\n   */\n  public getRootTreeNode(): TreeNode {\n    return toTreeNode(this.indexTree.getRoot());\n  }\n\n  /**\n   * `toTestTreeNode` returns the JSON of this tree for debugging.\n   */\n  public toTestTreeNode(): TreeNodeForTest {\n    return toTestTreeNode(this.indexTree.getRoot());\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this tree.\n   */\n  public toSortedJSON(): string {\n    return this.toJSON();\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTTree {\n    const root = this.getRoot();\n    return new CRDTTree(root.deepcopy(), this.getCreatedAt());\n  }\n\n  /**\n   * `toPath` converts the given CRDTTreeNodeID to the path of the tree.\n   */\n  public toPath(\n    parentNode: CRDTTreeNode,\n    leftNode: CRDTTreeNode,\n  ): Array<number> {\n    const treePos = this.toTreePos(parentNode, leftNode);\n    if (!treePos) {\n      return [];\n    }\n\n    return this.indexTree.treePosToPath(treePos);\n  }\n\n  /**\n   * `toIndex` converts the given CRDTTreeNodeID to the index of the tree.\n   */\n  public toIndex(parentNode: CRDTTreeNode, leftNode: CRDTTreeNode): number {\n    const treePos = this.toTreePos(parentNode, leftNode);\n    if (!treePos) {\n      return -1;\n    }\n\n    return this.indexTree.indexOf(treePos);\n  }\n\n  /**\n   * `indexToPath` converts the given tree index to path.\n   */\n  public indexToPath(index: number): Array<number> {\n    return this.indexTree.indexToPath(index);\n  }\n\n  /**\n   * `pathToIndex` converts the given path to index.\n   */\n  public pathToIndex(path: Array<number>): number {\n    return this.indexTree.pathToIndex(path);\n  }\n\n  /**\n   * `indexRangeToPosRange` returns the position range from the given index range.\n   */\n  public indexRangeToPosRange(range: [number, number]): TreePosRange {\n    const fromPos = this.findPos(range[0]);\n    if (range[0] === range[1]) {\n      return [fromPos, fromPos];\n    }\n    return [fromPos, this.findPos(range[1])];\n  }\n\n  /**\n   * `indexRangeToPosStructRange` converts the integer index range into the Tree position range structure.\n   */\n  public indexRangeToPosStructRange(\n    range: [number, number],\n  ): TreePosStructRange {\n    const [fromIdx, toIdx] = range;\n    const fromPos = this.findPos(fromIdx);\n    if (fromIdx === toIdx) {\n      return [fromPos.toStruct(), fromPos.toStruct()];\n    }\n\n    return [fromPos.toStruct(), this.findPos(toIdx).toStruct()];\n  }\n\n  /**\n   * `posRangeToPathRange` converts the given position range to the path range.\n   */\n  public posRangeToPathRange(\n    range: TreePosRange,\n  ): [Array<number>, Array<number>] {\n    const [fromParent, fromLeft] = this.findNodesAndSplitText(range[0]);\n    const [toParent, toLeft] = this.findNodesAndSplitText(range[1]);\n    return [this.toPath(fromParent, fromLeft), this.toPath(toParent, toLeft)];\n  }\n\n  /**\n   * `posRangeToIndexRange` converts the given position range to the path range.\n   */\n  public posRangeToIndexRange(range: TreePosRange): [number, number] {\n    const [fromParent, fromLeft] = this.findNodesAndSplitText(range[0]);\n    const [toParent, toLeft] = this.findNodesAndSplitText(range[1]);\n    return [this.toIndex(fromParent, fromLeft), this.toIndex(toParent, toLeft)];\n  }\n\n  /**\n   * `traverseInPosRange` traverses the tree in the given position range.\n   */\n  private traverseInPosRange(\n    fromParent: CRDTTreeNode,\n    fromLeft: CRDTTreeNode,\n    toParent: CRDTTreeNode,\n    toLeft: CRDTTreeNode,\n    callback: (token: TreeToken<CRDTTreeNode>, ended: boolean) => void,\n  ): void {\n    const fromIdx = this.toIndex(fromParent, fromLeft);\n    const toIdx = this.toIndex(toParent, toLeft);\n    return this.indexTree.tokensBetween(fromIdx, toIdx, callback);\n  }\n\n  /**\n   * `toTreePos` converts the given nodes to the position of the IndexTree.\n   */\n  private toTreePos(\n    parentNode: CRDTTreeNode,\n    leftNode: CRDTTreeNode,\n  ): TreePos<CRDTTreeNode> | undefined {\n    if (!parentNode || !leftNode) {\n      return;\n    }\n\n    if (parentNode.isRemoved) {\n      let childNode: CRDTTreeNode;\n      while (parentNode.isRemoved) {\n        childNode = parentNode;\n        parentNode = childNode.parent!;\n      }\n\n      const offset = parentNode.findOffset(childNode!);\n      return {\n        node: parentNode,\n        offset,\n      };\n    }\n\n    if (parentNode === leftNode) {\n      return {\n        node: parentNode,\n        offset: 0,\n      };\n    }\n\n    let offset = parentNode.findOffset(leftNode);\n    if (!leftNode.isRemoved) {\n      if (leftNode.isText) {\n        return {\n          node: leftNode,\n          offset: leftNode.paddedSize,\n        };\n      }\n\n      offset++;\n    }\n\n    return {\n      node: parentNode,\n      offset,\n    };\n  }\n\n  /**\n   * `makeDeletionChanges` converts nodes to be deleted to deletion changes.\n   */\n  private makeDeletionChanges(\n    candidates: Array<TreeToken<CRDTTreeNode>>,\n    editedAt: TimeTicket,\n  ): Array<TreeChange> {\n    const changes: Array<TreeChange> = [];\n    const ranges: Array<Array<TreeToken<CRDTTreeNode>>> = [];\n\n    // Generate ranges by accumulating consecutive nodes.\n    let start = null;\n    let end = null;\n    for (let i = 0; i < candidates.length; i++) {\n      const cur = candidates[i];\n      const next = candidates[i + 1];\n      if (!start) {\n        start = cur;\n      }\n      end = cur;\n\n      const rightToken = this.findRightToken(cur);\n      if (\n        !rightToken ||\n        !next ||\n        rightToken[0] !== next[0] ||\n        rightToken[1] !== next[1]\n      ) {\n        ranges.push([start, end]);\n        start = null;\n        end = null;\n      }\n    }\n\n    // Convert each range to a deletion change.\n    for (const range of ranges) {\n      const [start, end] = range;\n      const [fromLeft, fromLeftTokenType] = this.findLeftToken(start);\n      const [toLeft, toLeftTokenType] = end;\n      const fromParent =\n        fromLeftTokenType === TokenType.Start ? fromLeft : fromLeft.parent!;\n      const toParent =\n        toLeftTokenType === TokenType.Start ? toLeft : toLeft.parent!;\n\n      const fromIdx = this.toIndex(fromParent, fromLeft);\n      const toIdx = this.toIndex(toParent, toLeft);\n      if (fromIdx < toIdx) {\n        // When the range is overlapped with the previous one, compact them.\n        if (changes.length > 0 && fromIdx === changes[changes.length - 1].to) {\n          changes[changes.length - 1].to = toIdx;\n          changes[changes.length - 1].toPath = this.toPath(toParent, toLeft);\n        } else {\n          changes.push({\n            type: TreeChangeType.Content,\n            from: fromIdx,\n            to: toIdx,\n            fromPath: this.toPath(fromParent, fromLeft),\n            toPath: this.toPath(toParent, toLeft),\n            actor: editedAt.getActorID(),\n          });\n        }\n      }\n    }\n    return changes.reverse();\n  }\n\n  /**\n   * `findRightToken` returns the token to the right of the given token in the tree.\n   */\n  private findRightToken([\n    node,\n    tokenType,\n  ]: TreeToken<CRDTTreeNode>): TreeToken<CRDTTreeNode> {\n    if (tokenType === TokenType.Start) {\n      const children = node.allChildren;\n      if (children.length > 0) {\n        return [\n          children[0],\n          children[0].isText ? TokenType.Text : TokenType.Start,\n        ];\n      }\n      return [node, TokenType.End];\n    }\n\n    const parent = node.parent!;\n    const siblings = parent.allChildren;\n    const offset = siblings.indexOf(node);\n    if (parent && offset === siblings.length - 1) {\n      return [parent, TokenType.End];\n    }\n\n    const next = siblings[offset + 1];\n    return [next, next.isText ? TokenType.Text : TokenType.Start];\n  }\n\n  /**\n   * `findLeftToken` returns the token to the left of the given token in the tree.\n   */\n  private findLeftToken([\n    node,\n    tokenType,\n  ]: TreeToken<CRDTTreeNode>): TreeToken<CRDTTreeNode> {\n    if (tokenType === TokenType.End) {\n      const children = node.allChildren;\n      if (children.length > 0) {\n        const lastChild = children[children.length - 1];\n        return [lastChild, lastChild.isText ? TokenType.Text : TokenType.End];\n      }\n\n      return [node, TokenType.Start];\n    }\n\n    const parent = node.parent!;\n    const siblings = parent.allChildren;\n    const offset = siblings.indexOf(node);\n    if (parent && offset === 0) {\n      return [parent, TokenType.Start];\n    }\n\n    const prev = siblings[offset - 1];\n    return [prev, prev.isText ? TokenType.Text : TokenType.End];\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport {\n  CRDTTree,\n  CRDTTreeNode,\n  CRDTTreePos,\n  toXML,\n} from '@yorkie-js-sdk/src/document/crdt/tree';\nimport {\n  Operation,\n  OperationInfo,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\n\n/**\n * `TreeEditOperation` is an operation representing Tree editing.\n */\nexport class TreeEditOperation extends Operation {\n  private fromPos: CRDTTreePos;\n  private toPos: CRDTTreePos;\n  private contents: Array<CRDTTreeNode> | undefined;\n  private splitLevel: number;\n  private maxCreatedAtMapByActor: Map<string, TimeTicket>;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    contents: Array<CRDTTreeNode> | undefined,\n    splitLevel: number,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.fromPos = fromPos;\n    this.toPos = toPos;\n    this.contents = contents;\n    this.splitLevel = splitLevel;\n    this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;\n  }\n\n  /**\n   * `create` creates a new instance of EditOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    contents: Array<CRDTTreeNode> | undefined,\n    splitLevel: number,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    executedAt: TimeTicket,\n  ): TreeEditOperation {\n    return new TreeEditOperation(\n      parentCreatedAt,\n      fromPos,\n      toPos,\n      contents,\n      splitLevel,\n      maxCreatedAtMapByActor,\n      executedAt,\n    );\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTTree)) {\n      logger.fatal(`fail to execute, only Tree can execute edit`);\n    }\n    const editedAt = this.getExecutedAt();\n    const tree = parentObject as CRDTTree;\n    const [changes, pairs] = tree.edit(\n      [this.fromPos, this.toPos],\n      this.contents?.map((content) => content.deepcopy()),\n      this.splitLevel,\n      editedAt,\n      /**\n       * TODO(sejongk): When splitting element nodes, a new nodeID is assigned with a different timeTicket.\n       * In the same change context, the timeTickets share the same lamport and actorID but have different delimiters,\n       * incremented by one for each.\n       * Therefore, it is possible to simulate later timeTickets using `editedAt` and the length of `contents`.\n       * This logic might be unclear; consider refactoring for multi-level concurrent editing in the Tree implementation.\n       */\n      (() => {\n        let delimiter = editedAt.getDelimiter();\n        if (this.contents !== undefined) {\n          delimiter += this.contents.length;\n        }\n        const issueTimeTicket = () =>\n          TimeTicket.of(\n            editedAt.getLamport(),\n            ++delimiter,\n            editedAt.getActorID(),\n          );\n        return issueTimeTicket;\n      })(),\n      this.maxCreatedAtMapByActor,\n    );\n\n    for (const pair of pairs) {\n      root.registerGCPair(pair);\n    }\n\n    return {\n      opInfos: changes.map(\n        ({ from, to, value, splitLevel, fromPath, toPath }) => {\n          return {\n            type: 'tree-edit',\n            path: root.createPath(this.getParentCreatedAt()),\n            from,\n            to,\n            value,\n            splitLevel,\n            fromPath,\n            toPath,\n          } as OperationInfo;\n        },\n      ),\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    const parent = this.getParentCreatedAt().toTestString();\n    const fromPos = `${this.fromPos\n      .getLeftSiblingID()\n      .getCreatedAt()\n      .toTestString()}/${this.fromPos.getLeftSiblingID().getOffset()}`;\n    const toPos = `${this.toPos\n      .getLeftSiblingID()\n      .getCreatedAt()\n      .toTestString()}/${this.toPos.getLeftSiblingID().getOffset()}`;\n    const contents = this.contents || [];\n    return `${parent}.EDIT(${fromPos},${toPos},${contents\n      .map((v) => toXML(v))\n      .join('')})`;\n  }\n\n  /**\n   * `getFromPos` returns the start point of the editing range.\n   */\n  public getFromPos(): CRDTTreePos {\n    return this.fromPos;\n  }\n\n  /**\n   * `getToPos` returns the end point of the editing range.\n   */\n  public getToPos(): CRDTTreePos {\n    return this.toPos;\n  }\n\n  /**\n   * `getContent` returns the content of Edit.\n   */\n  public getContents(): Array<CRDTTreeNode> | undefined {\n    return this.contents;\n  }\n\n  /**\n   * `getSplitLevel` returns the split level of Edit.\n   */\n  public getSplitLevel(): number {\n    return this.splitLevel;\n  }\n\n  /**\n   * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time\n   * by actor for the nodes included in the editing range.\n   */\n  public getMaxCreatedAtMapByActor(): Map<string, TimeTicket> {\n    return this.maxCreatedAtMapByActor;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\nimport {\n  ActorID,\n  InitialActorID,\n} from '@yorkie-js-sdk/src/document/time/actor_id';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\n\n/**\n * `ChangeID` is for identifying the Change. This is immutable.\n */\nexport class ChangeID {\n  private clientSeq: number;\n\n  // `serverSeq` is optional and only present for changes stored on the server.\n  private serverSeq?: Long;\n\n  private lamport: Long;\n  private actor: ActorID;\n\n  constructor(\n    clientSeq: number,\n    lamport: Long,\n    actor: ActorID,\n    serverSeq?: Long,\n  ) {\n    this.clientSeq = clientSeq;\n    this.serverSeq = serverSeq;\n    this.lamport = lamport;\n    this.actor = actor;\n  }\n\n  /**\n   * `of` creates a new instance of ChangeID.\n   */\n  public static of(\n    clientSeq: number,\n    lamport: Long,\n    actor: ActorID,\n    serverSeq?: Long,\n  ): ChangeID {\n    return new ChangeID(clientSeq, lamport, actor, serverSeq);\n  }\n\n  /**\n   * `next` creates a next ID of this ID.\n   */\n  public next(): ChangeID {\n    return new ChangeID(this.clientSeq + 1, this.lamport.add(1), this.actor);\n  }\n\n  /**\n   * `syncLamport` syncs lamport timestamp with the given ID.\n   *\n   * {@link https://en.wikipedia.org/wiki/Lamport_timestamps#Algorithm}\n   */\n  public syncLamport(otherLamport: Long): ChangeID {\n    if (otherLamport.greaterThan(this.lamport)) {\n      return new ChangeID(this.clientSeq, otherLamport, this.actor);\n    }\n\n    return new ChangeID(this.clientSeq, this.lamport.add(1), this.actor);\n  }\n\n  /**\n   * `createTimeTicket` creates a ticket of the given delimiter.\n   */\n  public createTimeTicket(delimiter: number): TimeTicket {\n    return TimeTicket.of(this.lamport, delimiter, this.actor);\n  }\n\n  /**\n   * `setActor` sets the given actor.\n   */\n  public setActor(actorID: ActorID): ChangeID {\n    return new ChangeID(this.clientSeq, this.lamport, actorID, this.serverSeq);\n  }\n\n  /**\n   * `getClientSeq` returns the client sequence of this ID.\n   */\n  public getClientSeq(): number {\n    return this.clientSeq;\n  }\n\n  /**\n   * `getServerSeq` returns the server sequence of this ID.\n   */\n  public getServerSeq(): string {\n    if (this.serverSeq) {\n      return this.serverSeq.toString();\n    }\n    return '';\n  }\n\n  /**\n   * `getLamport` returns the lamport clock of this ID.\n   */\n  public getLamport(): Long {\n    return this.lamport;\n  }\n\n  /**\n   * `getLamportAsString` returns the lamport clock of this ID as a string.\n   */\n  public getLamportAsString(): string {\n    return this.lamport.toString();\n  }\n\n  /**\n   * `getActorID` returns the actor of this ID.\n   */\n  public getActorID(): string {\n    return this.actor;\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of this ID.\n   */\n  public toTestString(): string {\n    return `${this.lamport.toString()}:${this.actor.slice(-2)}:${\n      this.clientSeq\n    }`;\n  }\n}\n\n/**\n * `InitialChangeID` represents the initial state ID. Usually this is used to\n * represent a state where nothing has been edited.\n */\nexport const InitialChangeID = new ChangeID(\n  0,\n  Long.fromInt(0, true),\n  InitialActorID,\n);\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nimport {\n  OpSource,\n  Operation,\n  OperationInfo,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { ChangeID } from '@yorkie-js-sdk/src/document/change/change_id';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { converter } from '@yorkie-js-sdk/src/api/converter';\nimport { HistoryOperation } from '@yorkie-js-sdk/src/document/history';\nimport {\n  PresenceChange,\n  PresenceChangeType,\n} from '@yorkie-js-sdk/src/document/presence/presence';\nimport { deepcopy } from '@yorkie-js-sdk/src/util/object';\n\n/**\n * `ChangeStruct` represents the structure of Change.\n * This is used to serialize and deserialize Change.\n */\nexport type ChangeStruct<P extends Indexable> = {\n  changeID: string;\n  message?: string;\n  operations?: Array<string>;\n  presenceChange?: {\n    type: PresenceChangeType;\n    presence?: P;\n  };\n};\n\n/**\n * `Change` represents a unit of modification in the document.\n */\nexport class Change<P extends Indexable> {\n  private id: ChangeID;\n\n  // `operations` represent a series of user edits.\n  private operations: Array<Operation>;\n\n  // `presenceChange` represents the presenceChange of the user who made the change.\n  private presenceChange?: PresenceChange<P>;\n\n  // `message` is used to save a description of the change.\n  private message?: string;\n\n  constructor({\n    id,\n    operations,\n    presenceChange,\n    message,\n  }: {\n    id: ChangeID;\n    operations?: Array<Operation>;\n    presenceChange?: PresenceChange<P>;\n    message?: string;\n  }) {\n    this.id = id;\n    this.operations = operations || [];\n    this.presenceChange = presenceChange;\n    this.message = message;\n  }\n\n  /**\n   * `create` creates a new instance of Change.\n   */\n  public static create<P extends Indexable>({\n    id,\n    operations,\n    presenceChange,\n    message,\n  }: {\n    id: ChangeID;\n    operations?: Array<Operation>;\n    presenceChange?: PresenceChange<P>;\n    message?: string;\n  }): Change<P> {\n    return new Change({ id, operations, presenceChange, message });\n  }\n\n  /**\n   * `getID` returns the ID of this change.\n   */\n  public getID(): ChangeID {\n    return this.id;\n  }\n\n  /**\n   * `getMessage` returns the message of this change.\n   */\n  public getMessage(): string | undefined {\n    return this.message;\n  }\n\n  /**\n   * `hasOperations` returns whether this change has operations or not.\n   */\n  public hasOperations(): boolean {\n    return this.operations.length > 0;\n  }\n\n  /**\n   * `getOperations` returns the operations of this change.\n   */\n  public getOperations(): Array<Operation> {\n    return this.operations;\n  }\n\n  /**\n   * `setActor` sets the given actor.\n   */\n  public setActor(actorID: ActorID): void {\n    for (const operation of this.operations) {\n      operation.setActor(actorID);\n    }\n\n    this.id = this.id.setActor(actorID);\n  }\n\n  /**\n   * `hasPresenceChange` returns whether this change has presence change or not.\n   */\n  public hasPresenceChange(): boolean {\n    return this.presenceChange !== undefined;\n  }\n\n  /**\n   * `getPresenceChange` returns the presence change of this change.\n   */\n  public getPresenceChange(): PresenceChange<P> | undefined {\n    return this.presenceChange;\n  }\n\n  /**\n   * `execute` executes the operations of this change to the given root.\n   */\n  public execute(\n    root: CRDTRoot,\n    presences: Map<ActorID, P>,\n    source: OpSource,\n  ): {\n    opInfos: Array<OperationInfo>;\n    reverseOps: Array<HistoryOperation<P>>;\n  } {\n    const changeOpInfos: Array<OperationInfo> = [];\n    const reverseOps: Array<HistoryOperation<P>> = [];\n\n    for (const operation of this.operations) {\n      const executionResult = operation.execute(root, source);\n      // NOTE(hackerwins): If the element was removed while executing undo/redo,\n      // the operation is not executed and executionResult is undefined.\n      if (!executionResult) continue;\n      const { opInfos, reverseOp } = executionResult;\n      changeOpInfos.push(...opInfos);\n\n      // TODO(hackerwins): This condition should be removed after implementing\n      // all reverse operations.\n      if (reverseOp) {\n        reverseOps.unshift(reverseOp);\n      }\n    }\n\n    if (this.presenceChange) {\n      if (this.presenceChange.type === PresenceChangeType.Put) {\n        presences.set(\n          this.id.getActorID(),\n          deepcopy(this.presenceChange.presence),\n        );\n      } else {\n        presences.delete(this.id.getActorID());\n      }\n    }\n\n    return { opInfos: changeOpInfos, reverseOps };\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of this change.\n   */\n  public toTestString(): string {\n    return `${this.operations\n      .map((operation) => operation.toTestString())\n      .join(',')}`;\n  }\n\n  /**\n   * `toStruct` returns the structure of this change.\n   */\n  public toStruct(): ChangeStruct<P> {\n    return {\n      changeID: converter.bytesToHex(\n        converter.toChangeID(this.getID()).toBinary(),\n      ),\n      message: this.getMessage(),\n      operations: this.getOperations().map((op) =>\n        converter.bytesToHex(converter.toOperation(op).toBinary()),\n      ),\n      presenceChange: this.getPresenceChange(),\n    };\n  }\n\n  /**\n   * `fromStruct` creates a instance of Change from the struct.\n   */\n  public static fromStruct<P extends Indexable>(\n    struct: ChangeStruct<P>,\n  ): Change<P> {\n    const { changeID, operations, presenceChange, message } = struct;\n    return Change.create<P>({\n      id: converter.bytesToChangeID(converter.hexToBytes(changeID)),\n      operations: operations?.map((op) => {\n        return converter.bytesToOperation(converter.hexToBytes(op));\n      }),\n      presenceChange: presenceChange as any,\n      message,\n    });\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { Checkpoint } from '@yorkie-js-sdk/src/document/change/checkpoint';\nimport { Change } from '@yorkie-js-sdk/src/document/change/change';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\n\n/**\n * `ChangePack` is a unit for delivering changes in a document to the remote.\n *\n */\nexport class ChangePack<P extends Indexable> {\n  /**\n   * `documentKey` is the key of the document.\n   */\n  private documentKey: string;\n\n  /**\n   * `Checkpoint` is used to determine the client received changes.\n   */\n  private checkpoint: Checkpoint;\n  /**\n   * `isRemoved` is a flag that indicates whether the document is removed.\n   */\n  private isRemoved: boolean;\n\n  private changes: Array<Change<P>>;\n\n  /**\n   * `snapshot` is a byte array that encodes the document.\n   */\n  private snapshot?: Uint8Array;\n\n  /**\n   * `minSyncedTicket` is the minimum logical time taken by clients who attach\n   * to the document. It is used to collect garbage on the replica on the\n   * client.\n   */\n  private minSyncedTicket?: TimeTicket;\n\n  constructor(\n    key: string,\n    checkpoint: Checkpoint,\n    isRemoved: boolean,\n    changes: Array<Change<P>>,\n    snapshot?: Uint8Array,\n    minSyncedTicket?: TimeTicket,\n  ) {\n    this.documentKey = key;\n    this.checkpoint = checkpoint;\n    this.isRemoved = isRemoved;\n    this.changes = changes;\n    this.snapshot = snapshot;\n    this.minSyncedTicket = minSyncedTicket;\n  }\n\n  /**\n   * `create` creates a new instance of ChangePack.\n   */\n  public static create<P extends Indexable>(\n    key: string,\n    checkpoint: Checkpoint,\n    isRemoved: boolean,\n    changes: Array<Change<P>>,\n    snapshot?: Uint8Array,\n    minSyncedTicket?: TimeTicket,\n  ): ChangePack<P> {\n    return new ChangePack<P>(\n      key,\n      checkpoint,\n      isRemoved,\n      changes,\n      snapshot,\n      minSyncedTicket,\n    );\n  }\n\n  /**\n   * `getKey` returns the document key of this pack.\n   */\n  public getDocumentKey(): string {\n    return this.documentKey;\n  }\n\n  /**\n   * `getCheckpoint` returns the checkpoint of this pack.\n   */\n  public getCheckpoint(): Checkpoint {\n    return this.checkpoint;\n  }\n\n  /**\n   * `getIsRemoved` returns the whether this document is removed.\n   */\n  public getIsRemoved(): boolean {\n    return this.isRemoved;\n  }\n\n  /**\n   * `getChanges` returns the changes of this pack.\n   */\n  public getChanges(): Array<Change<P>> {\n    return this.changes;\n  }\n\n  /**\n   * `hasChanges` returns the whether this pack has changes or not.\n   */\n  public hasChanges(): boolean {\n    return this.changes.length > 0;\n  }\n\n  /**\n   * `getChangeSize` returns the size of changes this pack has.\n   */\n  public getChangeSize(): number {\n    return this.changes.length;\n  }\n\n  /**\n   * `hasSnapshot` returns the whether this pack has a snapshot or not.\n   */\n  public hasSnapshot(): boolean {\n    return !!this.snapshot && !!this.snapshot.length;\n  }\n\n  /**\n   * `getSnapshot` returns the snapshot of this pack.\n   */\n  public getSnapshot(): Uint8Array | undefined {\n    return this.snapshot;\n  }\n\n  /**\n   * `getMinSyncedTicket` returns the minimum synced ticket of this pack.\n   */\n  public getMinSyncedTicket(): TimeTicket | undefined {\n    return this.minSyncedTicket;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\n\n/**\n * `Checkpoint` is used to determine the changes sent and received by the\n * client. This is immutable.\n *\n **/\nexport class Checkpoint {\n  private serverSeq: Long;\n  private clientSeq: number;\n\n  constructor(serverSeq: Long, clientSeq: number) {\n    this.serverSeq = serverSeq;\n    this.clientSeq = clientSeq;\n  }\n\n  /**\n   * `of` creates a new instance of Checkpoint.\n   */\n  public static of(serverSeq: Long, clientSeq: number): Checkpoint {\n    return new Checkpoint(serverSeq, clientSeq);\n  }\n\n  /**\n   * `increaseClientSeq` creates a new instance with increased client sequence.\n   */\n  public increaseClientSeq(inc: number): Checkpoint {\n    if (inc === 0) {\n      return this;\n    }\n\n    return new Checkpoint(this.serverSeq, this.clientSeq + inc);\n  }\n\n  /**\n   * `forward` creates a new instance with the given checkpoint if it is\n   * greater than the values of internal properties.\n   */\n  public forward(other: Checkpoint): Checkpoint {\n    if (this.equals(other)) {\n      return this;\n    }\n\n    const serverSeq = this.serverSeq.greaterThan(other.serverSeq)\n      ? this.serverSeq\n      : other.serverSeq;\n    const clientSeq = Math.max(this.clientSeq, other.clientSeq);\n    return Checkpoint.of(serverSeq, clientSeq);\n  }\n\n  /**\n   * `getServerSeqAsString` returns the server seq of this checkpoint as a\n   * string.\n   */\n  public getServerSeqAsString(): string {\n    return this.serverSeq.toString();\n  }\n\n  /**\n   * `getClientSeq` returns the client seq of this checkpoint.\n   */\n  public getClientSeq(): number {\n    return this.clientSeq;\n  }\n\n  /**\n   * `getServerSeq` returns the server seq of this checkpoint.\n   */\n  public getServerSeq(): Long {\n    return this.serverSeq;\n  }\n\n  /**\n   * `equals` returns whether the given checkpoint is equal to this checkpoint\n   * or not.\n   */\n  public equals(other: Checkpoint): boolean {\n    return (\n      this.clientSeq === other.clientSeq &&\n      this.serverSeq.equals(other.serverSeq)\n    );\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data of this\n   * checkpoint.\n   */\n  public toTestString(): string {\n    return `serverSeq=${this.serverSeq}, clientSeq=${this.clientSeq}`;\n  }\n}\n\n/**\n * `InitialCheckpoint` is the initial value of the checkpoint.\n */\nexport const InitialCheckpoint = new Checkpoint(Long.fromInt(0, true), 0);\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nimport { Comparator } from '@yorkie-js-sdk/src/util/comparator';\nimport { SplayNode, SplayTree } from '@yorkie-js-sdk/src/util/splay_tree';\nimport { LLRBTree } from '@yorkie-js-sdk/src/util/llrb_tree';\nimport {\n  InitialTimeTicket,\n  MaxTimeTicket,\n  TimeTicket,\n  TimeTicketStruct,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { GCChild, GCPair, GCParent } from '@yorkie-js-sdk/src/document/crdt/gc';\n\nexport interface ValueChange<T> {\n  actor: ActorID;\n  from: number;\n  to: number;\n  value?: T;\n}\n\ninterface RGATreeSplitValue {\n  length: number;\n\n  substring(indexStart: number, indexEnd?: number): RGATreeSplitValue;\n}\n\n/**\n * `RGATreeSplitPosStruct` is a structure represents the meta data of the node pos.\n * It is used to serialize and deserialize the node pos.\n */\nexport type RGATreeSplitPosStruct = {\n  id: RGATreeSplitNodeIDStruct;\n  relativeOffset: number;\n};\n\n/**\n * `RGATreeSplitNodeIDStruct` is a structure represents the meta data of the node id.\n * It is used to serialize and deserialize the node id.\n */\nexport type RGATreeSplitNodeIDStruct = {\n  createdAt: TimeTicketStruct;\n  offset: number;\n};\n\n/**\n * `RGATreeSplitNodeID` is an ID of RGATreeSplitNode.\n */\nexport class RGATreeSplitNodeID {\n  private createdAt: TimeTicket;\n  private offset: number;\n\n  constructor(createdAt: TimeTicket, offset: number) {\n    this.createdAt = createdAt;\n    this.offset = offset;\n  }\n\n  /**\n   * `of` creates a instance of RGATreeSplitNodeID.\n   */\n  public static of(createdAt: TimeTicket, offset: number): RGATreeSplitNodeID {\n    return new RGATreeSplitNodeID(createdAt, offset);\n  }\n\n  /**\n   * `fromStruct` creates a instance of RGATreeSplitNodeID from the struct.\n   */\n  public static fromStruct(\n    struct: RGATreeSplitNodeIDStruct,\n  ): RGATreeSplitNodeID {\n    return RGATreeSplitNodeID.of(\n      TimeTicket.fromStruct(struct.createdAt),\n      struct.offset,\n    );\n  }\n\n  /**\n   * `getCreatedAt` returns the creation time of this ID.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.createdAt;\n  }\n\n  /**\n   * `getOffset` returns returns the offset of this ID.\n   */\n  public getOffset(): number {\n    return this.offset;\n  }\n\n  /**\n   * `equals` returns whether given ID equals to this ID or not.\n   */\n  public equals(other: RGATreeSplitNodeID): boolean {\n    return (\n      this.createdAt.compare(other.createdAt) === 0 &&\n      this.offset === other.offset\n    );\n  }\n\n  /**\n   * `hasSameCreatedAt` returns whether given ID has same creation time with this ID.\n   */\n  public hasSameCreatedAt(other: RGATreeSplitNodeID): boolean {\n    return this.createdAt.compare(other.createdAt) === 0;\n  }\n\n  /**\n   * `split` creates a new ID with an offset from this ID.\n   */\n  public split(offset: number): RGATreeSplitNodeID {\n    return new RGATreeSplitNodeID(this.createdAt, this.offset + offset);\n  }\n\n  /**\n   * `toStruct` returns the structure of this node id.\n   */\n  public toStruct(): RGATreeSplitNodeIDStruct {\n    return {\n      createdAt: this.createdAt.toStruct(),\n      offset: this.offset,\n    };\n  }\n\n  /**\n   * `toTestString` returns a String containing\n   * the meta data of the node id for debugging purpose.\n   */\n  public toTestString(): string {\n    return `${this.createdAt.toTestString()}:${this.offset}`;\n  }\n\n  /**\n   * `toIDString` returns a string that can be used as an ID for this node id.\n   */\n  public toIDString(): string {\n    return `${this.createdAt.toIDString()}:${this.offset}`;\n  }\n}\n\nconst InitialRGATreeSplitNodeID = RGATreeSplitNodeID.of(InitialTimeTicket, 0);\n\n/**\n * `RGATreeSplitPos` is the position of the text inside the node.\n */\nexport class RGATreeSplitPos {\n  private id: RGATreeSplitNodeID;\n  private relativeOffset: number;\n\n  constructor(id: RGATreeSplitNodeID, relativeOffset: number) {\n    this.id = id;\n    this.relativeOffset = relativeOffset;\n  }\n\n  /**\n   * `of` creates a instance of RGATreeSplitPos.\n   */\n  public static of(\n    id: RGATreeSplitNodeID,\n    relativeOffset: number,\n  ): RGATreeSplitPos {\n    return new RGATreeSplitPos(id, relativeOffset);\n  }\n\n  /**\n   * `fromStruct` creates a instance of RGATreeSplitPos from the struct.\n   */\n  public static fromStruct(struct: RGATreeSplitPosStruct): RGATreeSplitPos {\n    const id = RGATreeSplitNodeID.fromStruct(struct.id);\n    return RGATreeSplitPos.of(id, struct.relativeOffset);\n  }\n\n  /**\n   * `getID` returns the ID of this RGATreeSplitPos.\n   */\n  public getID(): RGATreeSplitNodeID {\n    return this.id;\n  }\n\n  /**\n   * `getRelativeOffset` returns the relative offset of this RGATreeSplitPos.\n   */\n  public getRelativeOffset(): number {\n    return this.relativeOffset;\n  }\n\n  /**\n   * `getAbsoluteID` returns the absolute id of this RGATreeSplitPos.\n   */\n  public getAbsoluteID(): RGATreeSplitNodeID {\n    return RGATreeSplitNodeID.of(\n      this.id.getCreatedAt(),\n      this.id.getOffset() + this.relativeOffset,\n    );\n  }\n\n  /**\n   *`toTestString` returns a String containing\n   * the meta data of the position for debugging purpose.\n   */\n  public toTestString(): string {\n    return `${this.id.toTestString()}:${this.relativeOffset}`;\n  }\n\n  /**\n   * `toStruct` returns the structure of this node pos.\n   */\n  public toStruct(): RGATreeSplitPosStruct {\n    return {\n      id: this.id.toStruct(),\n      relativeOffset: this.relativeOffset,\n    };\n  }\n\n  /**\n   * `equals` returns whether given pos equal to this pos or not.\n   */\n  public equals(other: RGATreeSplitPos): boolean {\n    if (!this.id.equals(other.id)) {\n      return false;\n    }\n\n    return this.relativeOffset === other.relativeOffset;\n  }\n}\n\nexport type RGATreeSplitPosRange = [RGATreeSplitPos, RGATreeSplitPos];\n\n/**\n * `RGATreeSplitNode` is a node of RGATreeSplit.\n */\nexport class RGATreeSplitNode<T extends RGATreeSplitValue>\n  extends SplayNode<T>\n  implements GCChild\n{\n  private id: RGATreeSplitNodeID;\n  private removedAt?: TimeTicket;\n\n  private prev?: RGATreeSplitNode<T>;\n  private next?: RGATreeSplitNode<T>;\n  private insPrev?: RGATreeSplitNode<T>;\n  private insNext?: RGATreeSplitNode<T>;\n\n  constructor(id: RGATreeSplitNodeID, value?: T, removedAt?: TimeTicket) {\n    super(value!);\n    this.id = id;\n    this.removedAt = removedAt;\n  }\n\n  /**\n   * `create` creates a instance of RGATreeSplitNode.\n   */\n  public static create<T extends RGATreeSplitValue>(\n    id: RGATreeSplitNodeID,\n    value?: T,\n  ): RGATreeSplitNode<T> {\n    return new RGATreeSplitNode(id, value);\n  }\n\n  /**\n   * `createComparator` creates a function to compare two RGATreeSplitNodeID.\n   */\n  public static createComparator(): Comparator<RGATreeSplitNodeID> {\n    return (p1: RGATreeSplitNodeID, p2: RGATreeSplitNodeID): number => {\n      const compare = p1.getCreatedAt().compare(p2.getCreatedAt());\n      if (compare !== 0) {\n        return compare;\n      }\n\n      if (p1.getOffset() > p2.getOffset()) {\n        return 1;\n      } else if (p1.getOffset() < p2.getOffset()) {\n        return -1;\n      }\n      return 0;\n    };\n  }\n\n  /**\n   * `getID` returns the ID of this RGATreeSplitNode.\n   */\n  public getID(): RGATreeSplitNodeID {\n    return this.id;\n  }\n\n  /**\n   * `getCreatedAt` returns creation time of the Id of RGATreeSplitNode.\n   */\n  public getCreatedAt(): TimeTicket {\n    return this.id.getCreatedAt();\n  }\n\n  /**\n   * `getLength` returns the length of this node.\n   */\n  public getLength(): number {\n    if (this.removedAt) {\n      return 0;\n    }\n    return this.getContentLength();\n  }\n\n  /**\n   * `getContentLength` returns the length of this value.\n   */\n  public getContentLength(): number {\n    return (this.value && this.value.length) || 0;\n  }\n\n  /**\n   * `getPrev` returns a previous node of this node.\n   */\n  public getPrev(): RGATreeSplitNode<T> | undefined {\n    return this.prev;\n  }\n\n  /**\n   * `getNext` returns a next node of this node.\n   */\n  public getNext(): RGATreeSplitNode<T> | undefined {\n    return this.next;\n  }\n\n  /**\n   * `getInsPrev` returns a previous node of this node insertion.\n   */\n  public getInsPrev(): RGATreeSplitNode<T> | undefined {\n    return this.insPrev;\n  }\n\n  /**\n   * `getInsNext` returns a next node of this node insertion.\n   */\n  public getInsNext(): RGATreeSplitNode<T> | undefined {\n    return this.insNext;\n  }\n\n  /**\n   * `getInsPrevID` returns a ID of previous node insertion.\n   */\n  public getInsPrevID(): RGATreeSplitNodeID {\n    return this.insPrev!.getID();\n  }\n\n  /**\n   * `setPrev` sets previous node of this node.\n   */\n  public setPrev(node?: RGATreeSplitNode<T>): void {\n    this.prev = node;\n    if (node) {\n      node.next = this;\n    }\n  }\n\n  /**\n   * `setNext` sets next node of this node.\n   */\n  public setNext(node?: RGATreeSplitNode<T>): void {\n    this.next = node;\n    if (node) {\n      node.prev = this;\n    }\n  }\n\n  /**\n   * `setInsPrev` sets previous node of this node insertion.\n   */\n  public setInsPrev(node?: RGATreeSplitNode<T>): void {\n    this.insPrev = node;\n    if (node) {\n      node.insNext = this;\n    }\n  }\n\n  /**\n   * `setInsNext` sets next node of this node insertion.\n   */\n  public setInsNext(node?: RGATreeSplitNode<T>): void {\n    this.insNext = node;\n    if (node) {\n      node.insPrev = this;\n    }\n  }\n\n  /**\n   * `hasNext` checks if next node exists.\n   */\n  public hasNext(): boolean {\n    return !!this.next;\n  }\n\n  /**\n   * `hasInsPrev` checks if previous insertion node exists.\n   */\n  public hasInsPrev(): boolean {\n    return !!this.insPrev;\n  }\n\n  /**\n   * `isRemoved` checks if removed time exists.\n   */\n  public isRemoved(): boolean {\n    return !!this.removedAt;\n  }\n\n  /**\n   * `getRemovedAt` returns the remove time of this node.\n   */\n  public getRemovedAt(): TimeTicket | undefined {\n    return this.removedAt;\n  }\n\n  /**\n   * `split` creates a new split node of the given offset.\n   */\n  public split(offset: number): RGATreeSplitNode<T> {\n    return new RGATreeSplitNode(\n      this.id.split(offset),\n      this.splitValue(offset),\n      this.removedAt,\n    );\n  }\n\n  /**\n   * `canDelete` checks if node is able to delete.\n   */\n  public canDelete(editedAt: TimeTicket, maxCreatedAt: TimeTicket): boolean {\n    const justRemoved = !this.removedAt;\n    if (\n      !this.getCreatedAt().after(maxCreatedAt) &&\n      (!this.removedAt || editedAt.after(this.removedAt))\n    ) {\n      return justRemoved;\n    }\n\n    return false;\n  }\n\n  /**\n   * `canStyle` checks if node is able to set style.\n   */\n  public canStyle(editedAt: TimeTicket, maxCreatedAt: TimeTicket): boolean {\n    return (\n      !this.getCreatedAt().after(maxCreatedAt) &&\n      (!this.removedAt || editedAt.after(this.removedAt))\n    );\n  }\n\n  /**\n   * `remove` removes node of given edited time.\n   */\n  public remove(editedAt?: TimeTicket): void {\n    this.removedAt = editedAt;\n  }\n\n  /**\n   * `createRange` creates ranges of RGATreeSplitPos.\n   */\n  public createPosRange(): RGATreeSplitPosRange {\n    return [\n      RGATreeSplitPos.of(this.id, 0),\n      RGATreeSplitPos.of(this.id, this.getLength()),\n    ];\n  }\n\n  /**\n   * `deepcopy` returns a new instance of this RGATreeSplitNode without structural info.\n   */\n  public deepcopy(): RGATreeSplitNode<T> {\n    return new RGATreeSplitNode(this.id, this.value, this.removedAt);\n  }\n\n  /**\n   * `toTestString` returns a String containing\n   * the meta data of the node for debugging purpose.\n   */\n  public toTestString(): string {\n    return `${this.id.toTestString()} ${this.value ? this.value : ''}`;\n  }\n\n  private splitValue(offset: number): T {\n    const value = this.value;\n    this.value = value.substring(0, offset) as T;\n    return value.substring(offset, value.length) as T;\n  }\n\n  /**\n   * `toIDString` returns a string that can be used as an ID for this position.\n   */\n  public toIDString(): string {\n    return this.id.toIDString();\n  }\n}\n\n/**\n * `RGATreeSplit` is a block-based list with improved index-based lookup in RGA.\n * The difference from RGATreeList is that it has data on a block basis to\n * reduce the size of CRDT metadata. When an edit occurs on a block,\n * the block is split.\n *\n */\nexport class RGATreeSplit<T extends RGATreeSplitValue> implements GCParent {\n  private head: RGATreeSplitNode<T>;\n  private treeByIndex: SplayTree<T>;\n  private treeByID: LLRBTree<RGATreeSplitNodeID, RGATreeSplitNode<T>>;\n\n  constructor() {\n    this.head = RGATreeSplitNode.create(InitialRGATreeSplitNodeID);\n    this.treeByIndex = new SplayTree();\n    this.treeByID = new LLRBTree(RGATreeSplitNode.createComparator());\n\n    this.treeByIndex.insert(this.head);\n    this.treeByID.put(this.head.getID(), this.head);\n  }\n\n  /**\n   * `create` creates a instance RGATreeSplit.\n   */\n  public static create<T extends RGATreeSplitValue>(): RGATreeSplit<T> {\n    return new RGATreeSplit();\n  }\n\n  /**\n   * `edit` does following steps\n   * 1. split nodes with from and to\n   * 2. delete between from and to\n   * 3. insert a new node\n   * 4. add removed node\n   * @param range - range of RGATreeSplitNode\n   * @param editedAt - edited time\n   * @param value - value\n   * @param maxCreatedAtMapByActor - maxCreatedAtMapByActor\n   * @returns `[RGATreeSplitPos, Map<string, TimeTicket>, Array<GCPair>, Array<Change>]`\n   */\n  public edit(\n    range: RGATreeSplitPosRange,\n    editedAt: TimeTicket,\n    value?: T,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [\n    RGATreeSplitPos,\n    Map<string, TimeTicket>,\n    Array<GCPair>,\n    Array<ValueChange<T>>,\n  ] {\n    // 01. split nodes with from and to\n    const [toLeft, toRight] = this.findNodeWithSplit(range[1], editedAt);\n    const [fromLeft, fromRight] = this.findNodeWithSplit(range[0], editedAt);\n\n    // 02. delete between from and to\n    const nodesToDelete = this.findBetween(fromRight, toRight);\n    const [changes, maxCreatedAtMap, removedNodes] = this.deleteNodes(\n      nodesToDelete,\n      editedAt,\n      maxCreatedAtMapByActor,\n    );\n\n    const caretID = toRight ? toRight.getID() : toLeft.getID();\n    let caretPos = RGATreeSplitPos.of(caretID, 0);\n\n    // 03. insert a new node\n    if (value) {\n      const idx = this.posToIndex(fromLeft.createPosRange()[1], true);\n\n      const inserted = this.insertAfter(\n        fromLeft,\n        RGATreeSplitNode.create(RGATreeSplitNodeID.of(editedAt, 0), value),\n      );\n\n      if (changes.length && changes[changes.length - 1].from === idx) {\n        changes[changes.length - 1].value = value;\n      } else {\n        changes.push({\n          actor: editedAt.getActorID(),\n          from: idx,\n          to: idx,\n          value,\n        });\n      }\n\n      caretPos = RGATreeSplitPos.of(\n        inserted.getID(),\n        inserted.getContentLength(),\n      );\n    }\n\n    // 04. add removed node\n    const pairs: Array<GCPair> = [];\n    for (const [, removedNode] of removedNodes) {\n      pairs.push({ parent: this, child: removedNode });\n    }\n\n    return [caretPos, maxCreatedAtMap, pairs, changes];\n  }\n\n  /**\n   * `indexToPos` finds RGATreeSplitPos of given offset.\n   */\n  public indexToPos(idx: number): RGATreeSplitPos {\n    const [node, offset] = this.treeByIndex.find(idx);\n    const splitNode = node as RGATreeSplitNode<T>;\n    return RGATreeSplitPos.of(splitNode.getID(), offset);\n  }\n\n  /**\n   * `findIndexesFromRange` finds indexes based on range.\n   */\n  public findIndexesFromRange(range: RGATreeSplitPosRange): [number, number] {\n    const [fromPos, toPos] = range;\n    return [this.posToIndex(fromPos, false), this.posToIndex(toPos, true)];\n  }\n\n  /**\n   * `posToIndex` converts the given position to index.\n   */\n  public posToIndex(pos: RGATreeSplitPos, preferToLeft: boolean): number {\n    const absoluteID = pos.getAbsoluteID();\n    const node = preferToLeft\n      ? this.findFloorNodePreferToLeft(absoluteID)\n      : this.findFloorNode(absoluteID);\n    if (!node) {\n      logger.fatal(\n        `the node of the given id should be found: ${absoluteID.toTestString()}`,\n      );\n    }\n    const index = this.treeByIndex.indexOf(node!);\n    const offset = node!.isRemoved()\n      ? 0\n      : absoluteID.getOffset() - node!.getID().getOffset();\n    return index + offset;\n  }\n\n  /**\n   * `findNode` finds node of given id.\n   */\n  public findNode(id: RGATreeSplitNodeID): RGATreeSplitNode<T> {\n    return this.findFloorNode(id)!;\n  }\n\n  /**\n   * `length` returns size of RGATreeSplit.\n   */\n  public get length(): number {\n    return this.treeByIndex.length;\n  }\n\n  /**\n   * `checkWeight` returns false when there is an incorrect weight node.\n   * for debugging purpose.\n   */\n  public checkWeight(): boolean {\n    return this.treeByIndex.checkWeight();\n  }\n\n  /**\n   * `toString` returns the string encoding of this RGATreeSplit.\n   */\n  public toString(): string {\n    const str = [];\n\n    for (const node of this) {\n      if (!node.isRemoved()) {\n        str.push(node.getValue());\n      }\n    }\n\n    return str.join('');\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public *[Symbol.iterator](): IterableIterator<RGATreeSplitNode<T>> {\n    let node = this.head.getNext();\n    while (node) {\n      yield node;\n      node = node.getNext();\n    }\n  }\n\n  /**\n   * `getHead` returns head of RGATreeSplitNode.\n   */\n  public getHead(): RGATreeSplitNode<T> {\n    return this.head;\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): RGATreeSplit<T> {\n    const clone = new RGATreeSplit<T>();\n\n    let node = this.head.getNext();\n\n    let prev = clone.head;\n    let current;\n    while (node) {\n      current = clone.insertAfter(prev, node.deepcopy());\n      if (node.hasInsPrev()) {\n        const insPrevNode = clone.findNode(node.getInsPrevID());\n        current.setInsPrev(insPrevNode);\n      }\n\n      prev = current;\n      node = node.getNext();\n    }\n\n    return clone;\n  }\n\n  /**\n   * `toTestString` returns a String containing the meta data of the node\n   * for debugging purpose.\n   */\n  public toTestString(): string {\n    const result = [];\n\n    let node: RGATreeSplitNode<T> | undefined = this.head;\n    while (node) {\n      if (node.isRemoved()) {\n        result.push(`{${node.toTestString()}}`);\n      } else {\n        result.push(`[${node.toTestString()}]`);\n      }\n\n      node = node.getNext();\n    }\n\n    return result.join('');\n  }\n\n  /**\n   * `insertAfter` inserts the given node after the given previous node.\n   */\n  public insertAfter(\n    prevNode: RGATreeSplitNode<T>,\n    newNode: RGATreeSplitNode<T>,\n  ): RGATreeSplitNode<T> {\n    const next = prevNode.getNext();\n    newNode.setPrev(prevNode);\n    if (next) {\n      next.setPrev(newNode);\n    }\n\n    this.treeByID.put(newNode.getID(), newNode);\n    this.treeByIndex.insertAfter(prevNode, newNode);\n\n    return newNode;\n  }\n\n  /**\n   * `findNodeWithSplit` splits and return nodes of the given position.\n   */\n  public findNodeWithSplit(\n    pos: RGATreeSplitPos,\n    editedAt: TimeTicket,\n  ): [RGATreeSplitNode<T>, RGATreeSplitNode<T>] {\n    const absoluteID = pos.getAbsoluteID();\n    let node = this.findFloorNodePreferToLeft(absoluteID);\n    const relativeOffset = absoluteID.getOffset() - node.getID().getOffset();\n\n    this.splitNode(node, relativeOffset);\n\n    while (node.hasNext() && node.getNext()!.getCreatedAt().after(editedAt)) {\n      node = node.getNext()!;\n    }\n\n    return [node, node.getNext()!];\n  }\n\n  private findFloorNodePreferToLeft(\n    id: RGATreeSplitNodeID,\n  ): RGATreeSplitNode<T> {\n    let node = this.findFloorNode(id);\n    if (!node) {\n      logger.fatal(\n        `the node of the given id should be found: ${id.toTestString()}`,\n      );\n    }\n\n    if (id.getOffset() > 0 && node!.getID().getOffset() == id.getOffset()) {\n      // NOTE: InsPrev may not be present due to GC.\n      if (!node!.hasInsPrev()) {\n        return node!;\n      }\n      node = node!.getInsPrev();\n    }\n\n    return node!;\n  }\n\n  private findFloorNode(\n    id: RGATreeSplitNodeID,\n  ): RGATreeSplitNode<T> | undefined {\n    const entry = this.treeByID.floorEntry(id);\n    if (!entry) {\n      return;\n    }\n\n    if (!entry.key.equals(id) && !entry.key.hasSameCreatedAt(id)) {\n      return;\n    }\n\n    return entry.value;\n  }\n\n  /**\n   * `findBetween` returns nodes between fromNode and toNode.\n   */\n  public findBetween(\n    fromNode: RGATreeSplitNode<T>,\n    toNode: RGATreeSplitNode<T>,\n  ): Array<RGATreeSplitNode<T>> {\n    const nodes = [];\n\n    let current: RGATreeSplitNode<T> | undefined = fromNode;\n    while (current && current !== toNode) {\n      nodes.push(current);\n      current = current.getNext();\n    }\n\n    return nodes;\n  }\n\n  private splitNode(\n    node: RGATreeSplitNode<T>,\n    offset: number,\n  ): RGATreeSplitNode<T> | undefined {\n    if (offset > node.getContentLength()) {\n      logger.fatal('offset should be less than or equal to length');\n    }\n\n    if (offset === 0) {\n      return node;\n    } else if (offset === node.getContentLength()) {\n      return node.getNext();\n    }\n\n    const splitNode = node.split(offset);\n    this.treeByIndex.updateWeight(splitNode);\n    this.insertAfter(node, splitNode);\n\n    const insNext = node.getInsNext();\n    if (insNext) {\n      insNext.setInsPrev(splitNode);\n    }\n    splitNode.setInsPrev(node);\n\n    return splitNode;\n  }\n\n  private deleteNodes(\n    candidates: Array<RGATreeSplitNode<T>>,\n    editedAt: TimeTicket,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [\n    Array<ValueChange<T>>,\n    Map<string, TimeTicket>,\n    Map<string, RGATreeSplitNode<T>>,\n  ] {\n    if (!candidates.length) {\n      return [[], new Map(), new Map()];\n    }\n\n    // There are 2 types of nodes in `candidates`: should delete, should not delete.\n    // `nodesToKeep` contains nodes should not delete,\n    // then is used to find the boundary of the range to be deleted.\n    const [nodesToDelete, nodesToKeep] = this.filterNodes(\n      candidates,\n      editedAt,\n      maxCreatedAtMapByActor,\n    );\n\n    const createdAtMapByActor = new Map();\n    const removedNodes = new Map();\n    // First we need to collect indexes for change.\n    const changes = this.makeChanges(nodesToKeep, editedAt);\n    for (const node of nodesToDelete) {\n      // Then make nodes be tombstones and map that.\n      const actorID = node.getCreatedAt().getActorID();\n      if (\n        !createdAtMapByActor.has(actorID) ||\n        node.getID().getCreatedAt().after(createdAtMapByActor.get(actorID))\n      ) {\n        createdAtMapByActor.set(actorID, node.getID().getCreatedAt());\n      }\n      removedNodes.set(node.getID().toIDString(), node);\n      node.remove(editedAt);\n    }\n    // Finally remove index nodes of tombstones.\n    this.deleteIndexNodes(nodesToKeep);\n\n    return [changes, createdAtMapByActor, removedNodes];\n  }\n\n  private filterNodes(\n    candidates: Array<RGATreeSplitNode<T>>,\n    editedAt: TimeTicket,\n    maxCreatedAtMapByActor?: Map<string, TimeTicket>,\n  ): [Array<RGATreeSplitNode<T>>, Array<RGATreeSplitNode<T> | undefined>] {\n    const isRemote = !!maxCreatedAtMapByActor;\n    const nodesToDelete: Array<RGATreeSplitNode<T>> = [];\n    const nodesToKeep: Array<RGATreeSplitNode<T> | undefined> = [];\n\n    const [leftEdge, rightEdge] = this.findEdgesOfCandidates(candidates);\n    nodesToKeep.push(leftEdge);\n\n    for (const node of candidates) {\n      const actorID = node.getCreatedAt().getActorID();\n\n      const maxCreatedAt = isRemote\n        ? maxCreatedAtMapByActor!.has(actorID)\n          ? maxCreatedAtMapByActor!.get(actorID)\n          : InitialTimeTicket\n        : MaxTimeTicket;\n\n      if (node.canDelete(editedAt, maxCreatedAt!)) {\n        nodesToDelete.push(node);\n      } else {\n        nodesToKeep.push(node);\n      }\n    }\n    nodesToKeep.push(rightEdge);\n\n    return [nodesToDelete, nodesToKeep];\n  }\n\n  /**\n   * `findEdgesOfCandidates` finds the edges outside `candidates`,\n   * (which has not already been deleted, or be undefined but not yet implemented)\n   * right edge is undefined means `candidates` contains the end of text.\n   */\n  private findEdgesOfCandidates(\n    candidates: Array<RGATreeSplitNode<T>>,\n  ): [RGATreeSplitNode<T>, RGATreeSplitNode<T> | undefined] {\n    return [\n      candidates[0].getPrev()!,\n      candidates[candidates.length - 1].getNext(),\n    ];\n  }\n\n  private makeChanges(\n    boundaries: Array<RGATreeSplitNode<T> | undefined>,\n    editedAt: TimeTicket,\n  ): Array<ValueChange<T>> {\n    const changes: Array<ValueChange<T>> = [];\n    let fromIdx: number, toIdx: number;\n\n    for (let i = 0; i < boundaries.length - 1; i++) {\n      const leftBoundary = boundaries[i];\n      const rightBoundary = boundaries[i + 1];\n\n      if (leftBoundary!.getNext() == rightBoundary) {\n        continue;\n      }\n\n      [fromIdx] = this.findIndexesFromRange(\n        leftBoundary!.getNext()!.createPosRange(),\n      );\n      if (rightBoundary) {\n        [, toIdx] = this.findIndexesFromRange(\n          rightBoundary.getPrev()!.createPosRange(),\n        );\n      } else {\n        toIdx = this.treeByIndex.length;\n      }\n\n      if (fromIdx < toIdx) {\n        changes.push({\n          actor: editedAt.getActorID(),\n          from: fromIdx,\n          to: toIdx,\n        });\n      }\n    }\n\n    return changes.reverse();\n  }\n\n  /**\n   * `deleteIndexNodes` clears the index nodes of the given deletion boundaries.\n   * The boundaries mean the nodes that will not be deleted in the range.\n   */\n  private deleteIndexNodes(\n    boundaries: Array<RGATreeSplitNode<T> | undefined>,\n  ): void {\n    for (let i = 0; i < boundaries.length - 1; i++) {\n      const leftBoundary = boundaries[i];\n      const rightBoundary = boundaries[i + 1];\n      // If there is no node to delete between boundaries, do notting.\n      if (leftBoundary!.getNext() != rightBoundary) {\n        this.treeByIndex.deleteRange(leftBoundary!, rightBoundary);\n      }\n    }\n  }\n\n  /**\n   * `purge` physically purges the given node from RGATreeSplit.\n   */\n  public purge(node: RGATreeSplitNode<T>): void {\n    const prev = node.getPrev();\n    const next = node.getNext();\n    const insPrev = node.getInsPrev();\n    const insNext = node.getInsNext();\n\n    if (prev) {\n      prev.setNext(next);\n    }\n    if (next) {\n      next.setPrev(prev);\n    }\n\n    node.setPrev(undefined);\n    node.setNext(undefined);\n\n    if (insPrev) {\n      insPrev.setInsNext(insNext);\n    }\n\n    if (insNext) {\n      insNext.setInsPrev(insPrev);\n    }\n\n    node.setInsPrev(undefined);\n    node.setInsNext(undefined);\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n `removeDecimal` returns a number with the decimal part removed.\n */\nexport const removeDecimal = (number: number) =>\n  number < 0 ? Math.ceil(number) : Math.floor(number);\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport Long from 'long';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport {\n  Primitive,\n  PrimitiveType,\n} from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport { removeDecimal } from '@yorkie-js-sdk/src/util/number';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\nexport enum CounterType {\n  IntegerCnt,\n  LongCnt,\n}\n\nexport type CounterValue = number | Long;\n\n/**\n * `CRDTCounter` is a CRDT implementation of a counter. It is used to represent\n * a number that can be incremented or decremented.\n *\n * @internal\n */\nexport class CRDTCounter extends CRDTElement {\n  private valueType: CounterType;\n  private value: CounterValue;\n\n  constructor(\n    valueType: CounterType,\n    value: CounterValue,\n    createdAt: TimeTicket,\n  ) {\n    super(createdAt);\n    this.valueType = valueType;\n    switch (valueType) {\n      case CounterType.IntegerCnt:\n        if (typeof value === 'number') {\n          if (value > Math.pow(2, 31) - 1 || value < -Math.pow(2, 31)) {\n            this.value = Long.fromNumber(value).toInt();\n          } else {\n            this.value = removeDecimal(value);\n          }\n        } else {\n          this.value = value.toInt();\n        }\n        break;\n      case CounterType.LongCnt:\n        if (typeof value === 'number') {\n          this.value = Long.fromNumber(value);\n        } else {\n          this.value = value;\n        }\n        break;\n      default:\n        throw new YorkieError(\n          Code.Unimplemented,\n          `unimplemented type: ${valueType}`,\n        );\n    }\n  }\n\n  /**\n   * `of` creates a new instance of Counter.\n   */\n  public static create(\n    valueType: CounterType,\n    value: CounterValue,\n    createdAt: TimeTicket,\n  ): CRDTCounter {\n    return new CRDTCounter(valueType, value, createdAt);\n  }\n  /**\n   * `valueFromBytes` parses the given bytes into value.\n   */\n  public static valueFromBytes(\n    counterType: CounterType,\n    bytes: Uint8Array,\n  ): CounterValue {\n    switch (counterType) {\n      case CounterType.IntegerCnt:\n        return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);\n      case CounterType.LongCnt:\n        return Long.fromBytesLE(Array.from(bytes));\n      default:\n        throw new YorkieError(\n          Code.Unimplemented,\n          `unimplemented type: ${counterType}`,\n        );\n    }\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of the value.\n   */\n  public toJSON(): string {\n    return `${this.value}`;\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of the value.\n   */\n  public toSortedJSON(): string {\n    return this.toJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    return {\n      createdAt: this.getCreatedAt().toTestString(),\n      value: this.value,\n      type: 'YORKIE_COUNTER',\n    };\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTCounter {\n    const counter = CRDTCounter.create(\n      this.valueType,\n      this.value,\n      this.getCreatedAt(),\n    );\n    counter.setMovedAt(this.getMovedAt());\n    return counter;\n  }\n\n  /**\n   * `getType` returns the type of the value.\n   */\n  public getType(): CounterType {\n    return this.valueType;\n  }\n\n  /**\n   * `getCounterType` returns counter type of given value.\n   */\n  public static getCounterType(value: CounterValue): CounterType | undefined {\n    switch (typeof value) {\n      case 'object':\n        if (value instanceof Long) {\n          return CounterType.LongCnt;\n        } else {\n          return;\n        }\n      case 'number':\n        if (value > Math.pow(2, 31) - 1 || value < -Math.pow(2, 31)) {\n          return CounterType.LongCnt;\n        } else {\n          return CounterType.IntegerCnt;\n        }\n      default:\n        return;\n    }\n  }\n  /**\n   * `isSupport` check if there is a counter type of given value.\n   */\n  public static isSupport(value: CounterValue): boolean {\n    return !!CRDTCounter.getCounterType(value);\n  }\n\n  /**\n   * `isInteger` checks if the num is integer.\n   */\n  public static isInteger(num: number): boolean {\n    return num % 1 === 0;\n  }\n\n  /**\n   * `isNumericType` check numeric type by JSONCounter.\n   */\n  public isNumericType(): boolean {\n    const t = this.valueType;\n    return t === CounterType.IntegerCnt || t === CounterType.LongCnt;\n  }\n\n  /**\n   * `getValueType` get counter value type.\n   */\n  public getValueType(): CounterType {\n    return this.valueType;\n  }\n\n  /**\n   * `getValue` get counter value.\n   */\n  public getValue(): CounterValue {\n    return this.value;\n  }\n\n  /**\n   * `toBytes` creates an array representing the value.\n   */\n  public toBytes(): Uint8Array {\n    switch (this.valueType) {\n      case CounterType.IntegerCnt: {\n        const intVal = this.value as number;\n        return new Uint8Array([\n          intVal & 0xff,\n          (intVal >> 8) & 0xff,\n          (intVal >> 16) & 0xff,\n          (intVal >> 24) & 0xff,\n        ]);\n      }\n      case CounterType.LongCnt: {\n        const longVal = this.value as Long;\n        const longToBytes = longVal.toBytesLE();\n        return Uint8Array.from(longToBytes);\n      }\n      default:\n        throw new YorkieError(\n          Code.Unimplemented,\n          `unimplemented type: ${this.valueType}`,\n        );\n    }\n  }\n\n  /**\n   * `increase` increases numeric data.\n   */\n  public increase(v: Primitive): CRDTCounter {\n    /**\n     * `checkNumericType` checks if the given target is a numeric type.\n     */\n    function checkNumericType(target: Primitive | CRDTCounter): void {\n      if (!target.isNumericType()) {\n        throw new TypeError(\n          `Unsupported type of value: ${typeof target.getValue()}`,\n        );\n      }\n    }\n    checkNumericType(this);\n    checkNumericType(v);\n\n    if (this.valueType === CounterType.LongCnt) {\n      this.value = (this.value as Long).add(v.getValue() as number | Long);\n    } else {\n      if (v.getType() === PrimitiveType.Long) {\n        this.value = (this.value as number) + (v.getValue() as Long).toInt();\n      } else {\n        this.value = Long.fromNumber(\n          (this.value as number) + removeDecimal(v.getValue() as number),\n        ).toInt();\n      }\n    }\n\n    return this;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\nimport {\n  ExecutionResult,\n  Operation,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport {\n  Primitive,\n  PrimitiveType,\n} from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { CRDTCounter } from '@yorkie-js-sdk/src/document/crdt/counter';\n\n/**\n * `IncreaseOperation` represents an operation that increments a numeric value to Counter.\n * Among Primitives, numeric types Integer, Long are used as values.\n */\nexport class IncreaseOperation extends Operation {\n  private value: CRDTElement;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    value: CRDTElement,\n    executedAt?: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.value = value;\n  }\n\n  /**\n   * `create` creates a new instance of IncreaseOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    value: CRDTElement,\n    executedAt?: TimeTicket,\n  ): IncreaseOperation {\n    return new IncreaseOperation(parentCreatedAt, value, executedAt);\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTCounter)) {\n      logger.fatal(`fail to execute, only Counter can execute increase`);\n    }\n    const counter = parentObject as CRDTCounter;\n    const value = this.value.deepcopy() as Primitive;\n    counter.increase(value);\n    return {\n      opInfos: [\n        {\n          type: 'increase',\n          path: root.createPath(this.getParentCreatedAt()),\n          value: value.getValue() as number,\n        },\n      ],\n      reverseOp: this.toReverseOperation(),\n    };\n  }\n\n  /**\n   * `toReverseOperation` returns the reverse operation of this operation.\n   */\n  private toReverseOperation(): Operation {\n    const primitiveValue = this.value.deepcopy() as Primitive;\n\n    const valueType = primitiveValue.getType();\n    const value =\n      valueType === PrimitiveType.Long\n        ? (primitiveValue.getValue() as Long).multiply(-1)\n        : (primitiveValue.getValue() as number) * -1;\n\n    const reverseOp = IncreaseOperation.create(\n      this.getParentCreatedAt(),\n      Primitive.of(value, primitiveValue.getCreatedAt()),\n    );\n    return reverseOp;\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    return `${this.getParentCreatedAt().toTestString()}.INCREASE.${this.value.toJSON()}`;\n  }\n\n  /**\n   * `getValue` returns the value of this operation.\n   */\n  public getValue(): CRDTElement {\n    return this.value;\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport {\n  CRDTTree,\n  CRDTTreePos,\n  TreeChange,\n} from '@yorkie-js-sdk/src/document/crdt/tree';\nimport {\n  Operation,\n  OperationInfo,\n  ExecutionResult,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { GCPair } from '@yorkie-js-sdk/src/document/crdt/gc';\n\n/**\n * `TreeStyleOperation` represents an operation that modifies the style of the\n * node in the Tree.\n */\nexport class TreeStyleOperation extends Operation {\n  private fromPos: CRDTTreePos;\n  private toPos: CRDTTreePos;\n  private maxCreatedAtMapByActor: Map<string, TimeTicket>;\n  private attributes: Map<string, string>;\n  private attributesToRemove: Array<string>;\n\n  constructor(\n    parentCreatedAt: TimeTicket,\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    attributes: Map<string, string>,\n    attributesToRemove: Array<string>,\n    executedAt: TimeTicket,\n  ) {\n    super(parentCreatedAt, executedAt);\n    this.fromPos = fromPos;\n    this.toPos = toPos;\n    this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;\n    this.attributes = attributes;\n    this.attributesToRemove = attributesToRemove;\n  }\n\n  /**\n   * `create` creates a new instance of TreeStyleOperation.\n   */\n  public static create(\n    parentCreatedAt: TimeTicket,\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    attributes: Map<string, string>,\n    executedAt: TimeTicket,\n  ): TreeStyleOperation {\n    return new TreeStyleOperation(\n      parentCreatedAt,\n      fromPos,\n      toPos,\n      maxCreatedAtMapByActor,\n      attributes,\n      new Array<string>(),\n      executedAt,\n    );\n  }\n\n  /**\n   * `createTreeRemoveStyleOperation` creates a new instance of TreeStyleOperation for style deletion.\n   */\n  public static createTreeRemoveStyleOperation(\n    parentCreatedAt: TimeTicket,\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    maxCreatedAtMapByActor: Map<string, TimeTicket>,\n    attributesToRemove: Array<string>,\n    executedAt: TimeTicket,\n  ): TreeStyleOperation {\n    return new TreeStyleOperation(\n      parentCreatedAt,\n      fromPos,\n      toPos,\n      maxCreatedAtMapByActor,\n      new Map(),\n      attributesToRemove,\n      executedAt,\n    );\n  }\n\n  /**\n   * `execute` executes this operation on the given `CRDTRoot`.\n   */\n  public execute(root: CRDTRoot): ExecutionResult {\n    const parentObject = root.findByCreatedAt(this.getParentCreatedAt());\n    if (!parentObject) {\n      logger.fatal(`fail to find ${this.getParentCreatedAt()}`);\n    }\n    if (!(parentObject instanceof CRDTTree)) {\n      logger.fatal(`fail to execute, only Tree can execute edit`);\n    }\n    const tree = parentObject as CRDTTree;\n    let changes: Array<TreeChange>;\n    let pairs: Array<GCPair>;\n    if (this.attributes.size) {\n      const attributes: { [key: string]: any } = {};\n      [...this.attributes].forEach(([key, value]) => (attributes[key] = value));\n\n      [, pairs, changes] = tree.style(\n        [this.fromPos, this.toPos],\n        attributes,\n        this.getExecutedAt(),\n        this.maxCreatedAtMapByActor,\n      );\n    } else {\n      const attributesToRemove = this.attributesToRemove;\n\n      [, pairs, changes] = tree.removeStyle(\n        [this.fromPos, this.toPos],\n        attributesToRemove,\n        this.getExecutedAt(),\n        this.maxCreatedAtMapByActor,\n      );\n    }\n\n    for (const pair of pairs) {\n      root.registerGCPair(pair);\n    }\n\n    return {\n      opInfos: changes.map(({ from, to, value, fromPath, toPath }) => {\n        return {\n          type: 'tree-style',\n          from,\n          to,\n          value: this.attributes.size\n            ? { attributes: value }\n            : { attributesToRemove: value },\n          fromPath,\n          toPath,\n          path: root.createPath(this.getParentCreatedAt()),\n        } as OperationInfo;\n      }),\n    };\n  }\n\n  /**\n   * `getEffectedCreatedAt` returns the creation time of the effected element.\n   */\n  public getEffectedCreatedAt(): TimeTicket {\n    return this.getParentCreatedAt();\n  }\n\n  /**\n   * `toTestString` returns a string containing the meta data.\n   */\n  public toTestString(): string {\n    const parent = this.getParentCreatedAt().toTestString();\n    const fromPos = `${this.fromPos\n      .getLeftSiblingID()\n      .getCreatedAt()\n      .toTestString()}:${this.fromPos.getLeftSiblingID().getOffset()}`;\n    const toPos = `${this.toPos\n      .getLeftSiblingID()\n      .getCreatedAt()\n      .toTestString()}:${this.toPos.getLeftSiblingID().getOffset()}`;\n\n    return `${parent}.STYLE(${fromPos},${toPos},${Object.entries(\n      this.attributes || {},\n    )\n      .map(([k, v]) => `${k}:\"${v}\"`)\n      .join(' ')})`;\n  }\n\n  /**\n   * `getFromPos` returns the start point of the editing range.\n   */\n  public getFromPos(): CRDTTreePos {\n    return this.fromPos;\n  }\n\n  /**\n   * `getToPos` returns the end point of the editing range.\n   */\n  public getToPos(): CRDTTreePos {\n    return this.toPos;\n  }\n\n  /**\n   * `getAttributes` returns the attributes of Style.\n   */\n  public getAttributes(): Map<string, string> {\n    return this.attributes;\n  }\n\n  /**\n   * `getAttributesToRemove` returns the attributes of Style to remove.\n   */\n  public getAttributesToRemove(): Array<string> {\n    return this.attributesToRemove;\n  }\n\n  /**\n   * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time\n   * by actor for the nodes included in the styling range.\n   */\n  public getMaxCreatedAtMapByActor(): Map<string, TimeTicket> {\n    return this.maxCreatedAtMapByActor;\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Long from 'long';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport {\n  PresenceChange,\n  PresenceChangeType,\n} from '@yorkie-js-sdk/src/document/presence/presence';\nimport {\n  InitialTimeTicket,\n  TimeTicket,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nimport { Operation } from '@yorkie-js-sdk/src/document/operation/operation';\nimport { SetOperation } from '@yorkie-js-sdk/src/document/operation/set_operation';\nimport { AddOperation } from '@yorkie-js-sdk/src/document/operation/add_operation';\nimport { MoveOperation } from '@yorkie-js-sdk/src/document/operation/move_operation';\nimport { RemoveOperation } from '@yorkie-js-sdk/src/document/operation/remove_operation';\nimport { EditOperation } from '@yorkie-js-sdk/src/document/operation/edit_operation';\nimport { StyleOperation } from '@yorkie-js-sdk/src/document/operation/style_operation';\nimport { TreeEditOperation } from '@yorkie-js-sdk/src/document/operation/tree_edit_operation';\nimport { ChangeID } from '@yorkie-js-sdk/src/document/change/change_id';\nimport { Change } from '@yorkie-js-sdk/src/document/change/change';\nimport { ChangePack } from '@yorkie-js-sdk/src/document/change/change_pack';\nimport { Checkpoint } from '@yorkie-js-sdk/src/document/change/checkpoint';\nimport { ElementRHT } from '@yorkie-js-sdk/src/document/crdt/element_rht';\nimport { RGATreeList } from '@yorkie-js-sdk/src/document/crdt/rga_tree_list';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport { CRDTTreePos } from './../document/crdt/tree';\nimport {\n  RGATreeSplit,\n  RGATreeSplitNode,\n  RGATreeSplitNodeID,\n  RGATreeSplitPos,\n} from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { CRDTText, CRDTTextValue } from '@yorkie-js-sdk/src/document/crdt/text';\nimport {\n  Primitive,\n  PrimitiveType,\n} from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport {\n  Change as PbChange,\n  ChangeID as PbChangeID,\n  ChangePack as PbChangePack,\n  Checkpoint as PbCheckpoint,\n  JSONElement as PbJSONElement,\n  JSONElementSimple as PbJSONElementSimple,\n  NodeAttr as PbNodeAttr,\n  Operation as PbOperation,\n  Presence as PbPresence,\n  PresenceChange as PbPresenceChange,\n  RGANode as PbRGANode,\n  RHTNode as PbRHTNode,\n  Snapshot as PbSnapshot,\n  TextNode as PbTextNode,\n  TextNodeID as PbTextNodeID,\n  TextNodePos as PbTextNodePos,\n  TimeTicket as PbTimeTicket,\n  TreeNode as PbTreeNode,\n  TreeNodes as PbTreeNodes,\n  TreePos as PbTreePos,\n  TreeNodeID as PbTreeNodeID,\n  ValueType as PbValueType,\n  JSONElement_Tree as PbJSONElement_Tree,\n  JSONElement_Text as PbJSONElement_Text,\n  JSONElement_Primitive as PbJSONElement_Primitive,\n  JSONElement_Counter as PbJSONElement_Counter,\n  JSONElement_JSONObject as PbJSONElement_JSONObject,\n  JSONElement_JSONArray as PbJSONElement_JSONArray,\n  PresenceChange_ChangeType as PbPresenceChange_ChangeType,\n  Operation_Set as PbOperation_Set,\n  Operation_Add as PbOperation_Add,\n  Operation_Move as PbOperation_Move,\n  Operation_Remove as PbOperation_Remove,\n  Operation_Edit as PbOperation_Edit,\n  Operation_Style as PbOperation_Style,\n  Operation_Increase as PbOperation_Increase,\n  Operation_TreeEdit as PbOperation_TreeEdit,\n  Operation_TreeStyle as PbOperation_TreeStyle,\n} from '@yorkie-js-sdk/src/api/yorkie/v1/resources_pb';\nimport { IncreaseOperation } from '@yorkie-js-sdk/src/document/operation/increase_operation';\nimport {\n  CounterType,\n  CRDTCounter,\n} from '@yorkie-js-sdk/src/document/crdt/counter';\nimport {\n  CRDTTree,\n  CRDTTreeNode,\n  CRDTTreeNodeID,\n} from '@yorkie-js-sdk/src/document/crdt/tree';\nimport { traverseAll } from '../util/index_tree';\nimport { TreeStyleOperation } from '../document/operation/tree_style_operation';\nimport { RHT } from '../document/crdt/rht';\n\n/**\n * `toPresence` converts the given model to Protobuf format.\n */\nfunction toPresence(presence: Indexable): PbPresence {\n  const pbPresence = new PbPresence();\n  const pbDataMap = pbPresence.data;\n  for (const [key, value] of Object.entries(presence)) {\n    pbDataMap[key] = JSON.stringify(value);\n  }\n  return pbPresence;\n}\n\n/**\n * `toPresenceChange` converts the given model to Protobuf format.\n */\nfunction toPresenceChange(\n  presenceChange: PresenceChange<Indexable>,\n): PbPresenceChange {\n  if (presenceChange.type === PresenceChangeType.Put) {\n    return new PbPresenceChange({\n      type: PbPresenceChange_ChangeType.PUT,\n      presence: toPresence(presenceChange.presence),\n    });\n  }\n  if (presenceChange.type === PresenceChangeType.Clear) {\n    return new PbPresenceChange({\n      type: PbPresenceChange_ChangeType.CLEAR,\n    });\n  }\n\n  throw new YorkieError(Code.Unimplemented, `unimplemented type`);\n}\n\n/**\n * `toCheckpoint` converts the given model to Protobuf format.\n */\nfunction toCheckpoint(checkpoint: Checkpoint): PbCheckpoint {\n  return new PbCheckpoint({\n    serverSeq: checkpoint.getServerSeqAsString(),\n    clientSeq: checkpoint.getClientSeq(),\n  });\n}\n\n/**\n * `toChangeID` converts the given model to Protobuf format.\n */\nfunction toChangeID(changeID: ChangeID): PbChangeID {\n  return new PbChangeID({\n    clientSeq: changeID.getClientSeq(),\n    lamport: changeID.getLamportAsString(),\n    actorId: toUint8Array(changeID.getActorID()),\n  });\n}\n\n/**\n * `toTimeTicket` converts the given model to Protobuf format.\n */\nfunction toTimeTicket(ticket?: TimeTicket): PbTimeTicket | undefined {\n  if (!ticket) {\n    return;\n  }\n\n  return new PbTimeTicket({\n    lamport: ticket.getLamportAsString(),\n    delimiter: ticket.getDelimiter(),\n    actorId: toUint8Array(ticket.getActorID()),\n  });\n}\n\n/**\n * `toValueType` converts the given model to Protobuf format.\n */\nfunction toValueType(valueType: PrimitiveType): PbValueType {\n  switch (valueType) {\n    case PrimitiveType.Null:\n      return PbValueType.NULL;\n    case PrimitiveType.Boolean:\n      return PbValueType.BOOLEAN;\n    case PrimitiveType.Integer:\n      return PbValueType.INTEGER;\n    case PrimitiveType.Long:\n      return PbValueType.LONG;\n    case PrimitiveType.Double:\n      return PbValueType.DOUBLE;\n    case PrimitiveType.String:\n      return PbValueType.STRING;\n    case PrimitiveType.Bytes:\n      return PbValueType.BYTES;\n    case PrimitiveType.Date:\n      return PbValueType.DATE;\n    default:\n      throw new YorkieError(Code.Unsupported, `unsupported type: ${valueType}`);\n  }\n}\n\n/**\n * `toCounterType` converts the given model to Protobuf format.\n */\nfunction toCounterType(valueType: CounterType): PbValueType {\n  switch (valueType) {\n    case CounterType.IntegerCnt:\n      return PbValueType.INTEGER_CNT;\n    case CounterType.LongCnt:\n      return PbValueType.LONG_CNT;\n    default:\n      throw new YorkieError(Code.Unsupported, `unsupported type: ${valueType}`);\n  }\n}\n\n/**\n * `toElementSimple` converts the given model to Protobuf format.\n */\nfunction toElementSimple(element: CRDTElement): PbJSONElementSimple {\n  if (element instanceof CRDTObject) {\n    return new PbJSONElementSimple({\n      type: PbValueType.JSON_OBJECT,\n      createdAt: toTimeTicket(element.getCreatedAt()),\n      value: objectToBytes(element),\n    });\n  }\n  if (element instanceof CRDTArray) {\n    return new PbJSONElementSimple({\n      type: PbValueType.JSON_ARRAY,\n      createdAt: toTimeTicket(element.getCreatedAt()),\n      value: arrayToBytes(element),\n    });\n  }\n  if (element instanceof CRDTText) {\n    return new PbJSONElementSimple({\n      type: PbValueType.TEXT,\n      createdAt: toTimeTicket(element.getCreatedAt()),\n    });\n  }\n  if (element instanceof Primitive) {\n    return new PbJSONElementSimple({\n      type: toValueType(element.getType()),\n      createdAt: toTimeTicket(element.getCreatedAt()),\n      value: element.toBytes(),\n    });\n  }\n  if (element instanceof CRDTCounter) {\n    return new PbJSONElementSimple({\n      type: toCounterType(element.getType()),\n      createdAt: toTimeTicket(element.getCreatedAt()),\n      value: element.toBytes(),\n    });\n  }\n  if (element instanceof CRDTTree) {\n    return new PbJSONElementSimple({\n      type: PbValueType.TREE,\n      createdAt: toTimeTicket(element.getCreatedAt()),\n      value: treeToBytes(element),\n    });\n  }\n\n  throw new YorkieError(Code.Unimplemented, `unimplemented element`);\n}\n\n/**\n * `toTextNodeID` converts the given model to Protobuf format.\n */\nfunction toTextNodeID(id: RGATreeSplitNodeID): PbTextNodeID {\n  return new PbTextNodeID({\n    createdAt: toTimeTicket(id.getCreatedAt()),\n    offset: id.getOffset(),\n  });\n}\n\n/**\n * `toTextNodePos` converts the given model to Protobuf format.\n */\nfunction toTextNodePos(pos: RGATreeSplitPos): PbTextNodePos {\n  return new PbTextNodePos({\n    createdAt: toTimeTicket(pos.getID().getCreatedAt()),\n    offset: pos.getID().getOffset(),\n    relativeOffset: pos.getRelativeOffset(),\n  });\n}\n\n/**\n * `toTreePos` converts the given model to Protobuf format.\n */\nfunction toTreePos(pos: CRDTTreePos): PbTreePos {\n  return new PbTreePos({\n    parentId: toTreeNodeID(pos.getParentID()),\n    leftSiblingId: toTreeNodeID(pos.getLeftSiblingID()),\n  });\n}\n\n/**\n * `toTreeNodeID` converts the given model to Protobuf format.\n */\nfunction toTreeNodeID(treeNodeID: CRDTTreeNodeID): PbTreeNodeID {\n  return new PbTreeNodeID({\n    createdAt: toTimeTicket(treeNodeID.getCreatedAt()),\n    offset: treeNodeID.getOffset(),\n  });\n}\n\n/**\n * `toOperation` converts the given model to Protobuf format.\n */\nfunction toOperation(operation: Operation): PbOperation {\n  const pbOperation = new PbOperation();\n\n  if (operation instanceof SetOperation) {\n    const setOperation = operation as SetOperation;\n    const pbSetOperation = new PbOperation_Set();\n    pbSetOperation.parentCreatedAt = toTimeTicket(\n      setOperation.getParentCreatedAt(),\n    );\n    pbSetOperation.key = setOperation.getKey();\n    pbSetOperation.value = toElementSimple(setOperation.getValue());\n    pbSetOperation.executedAt = toTimeTicket(setOperation.getExecutedAt());\n    pbOperation.body.case = 'set';\n    pbOperation.body.value = pbSetOperation;\n  } else if (operation instanceof AddOperation) {\n    const addOperation = operation as AddOperation;\n    const pbAddOperation = new PbOperation_Add();\n    pbAddOperation.parentCreatedAt = toTimeTicket(\n      addOperation.getParentCreatedAt(),\n    );\n    pbAddOperation.prevCreatedAt = toTimeTicket(\n      addOperation.getPrevCreatedAt(),\n    );\n    pbAddOperation.value = toElementSimple(addOperation.getValue());\n    pbAddOperation.executedAt = toTimeTicket(addOperation.getExecutedAt());\n    pbOperation.body.case = 'add';\n    pbOperation.body.value = pbAddOperation;\n  } else if (operation instanceof MoveOperation) {\n    const moveOperation = operation as MoveOperation;\n    const pbMoveOperation = new PbOperation_Move();\n    pbMoveOperation.parentCreatedAt = toTimeTicket(\n      moveOperation.getParentCreatedAt(),\n    );\n    pbMoveOperation.prevCreatedAt = toTimeTicket(\n      moveOperation.getPrevCreatedAt(),\n    );\n    pbMoveOperation.createdAt = toTimeTicket(moveOperation.getCreatedAt());\n    pbMoveOperation.executedAt = toTimeTicket(moveOperation.getExecutedAt());\n    pbOperation.body.case = 'move';\n    pbOperation.body.value = pbMoveOperation;\n  } else if (operation instanceof RemoveOperation) {\n    const removeOperation = operation as RemoveOperation;\n    const pbRemoveOperation = new PbOperation_Remove();\n    pbRemoveOperation.parentCreatedAt = toTimeTicket(\n      removeOperation.getParentCreatedAt(),\n    );\n    pbRemoveOperation.createdAt = toTimeTicket(removeOperation.getCreatedAt());\n    pbRemoveOperation.executedAt = toTimeTicket(\n      removeOperation.getExecutedAt(),\n    );\n    pbOperation.body.case = 'remove';\n    pbOperation.body.value = pbRemoveOperation;\n  } else if (operation instanceof EditOperation) {\n    const editOperation = operation as EditOperation;\n    const pbEditOperation = new PbOperation_Edit();\n    pbEditOperation.parentCreatedAt = toTimeTicket(\n      editOperation.getParentCreatedAt(),\n    );\n    pbEditOperation.from = toTextNodePos(editOperation.getFromPos());\n    pbEditOperation.to = toTextNodePos(editOperation.getToPos());\n    const pbCreatedAtMapByActor = pbEditOperation.createdAtMapByActor;\n    for (const [key, value] of editOperation.getMaxCreatedAtMapByActor()) {\n      pbCreatedAtMapByActor[key] = toTimeTicket(value)!;\n    }\n    pbEditOperation.content = editOperation.getContent();\n    const pbAttributes = pbEditOperation.attributes;\n    for (const [key, value] of editOperation.getAttributes()) {\n      pbAttributes[key] = value;\n    }\n    pbEditOperation.executedAt = toTimeTicket(editOperation.getExecutedAt());\n    pbOperation.body.case = 'edit';\n    pbOperation.body.value = pbEditOperation;\n  } else if (operation instanceof StyleOperation) {\n    const styleOperation = operation as StyleOperation;\n    const pbStyleOperation = new PbOperation_Style();\n    pbStyleOperation.parentCreatedAt = toTimeTicket(\n      styleOperation.getParentCreatedAt(),\n    );\n    pbStyleOperation.from = toTextNodePos(styleOperation.getFromPos());\n    pbStyleOperation.to = toTextNodePos(styleOperation.getToPos());\n    const pbCreatedAtMapByActor = pbStyleOperation.createdAtMapByActor;\n    for (const [key, value] of styleOperation.getMaxCreatedAtMapByActor()) {\n      pbCreatedAtMapByActor[key] = toTimeTicket(value)!;\n    }\n    const pbAttributes = pbStyleOperation.attributes;\n    for (const [key, value] of styleOperation.getAttributes()) {\n      pbAttributes[key] = value;\n    }\n    pbStyleOperation.executedAt = toTimeTicket(styleOperation.getExecutedAt());\n    pbOperation.body.case = 'style';\n    pbOperation.body.value = pbStyleOperation;\n  } else if (operation instanceof IncreaseOperation) {\n    const increaseOperation = operation as IncreaseOperation;\n    const pbIncreaseOperation = new PbOperation_Increase();\n    pbIncreaseOperation.parentCreatedAt = toTimeTicket(\n      increaseOperation.getParentCreatedAt(),\n    );\n    pbIncreaseOperation.value = toElementSimple(increaseOperation.getValue());\n    pbIncreaseOperation.executedAt = toTimeTicket(\n      increaseOperation.getExecutedAt(),\n    );\n    pbOperation.body.case = 'increase';\n    pbOperation.body.value = pbIncreaseOperation;\n  } else if (operation instanceof TreeEditOperation) {\n    const treeEditOperation = operation as TreeEditOperation;\n    const pbTreeEditOperation = new PbOperation_TreeEdit();\n    const pbCreatedAtMapByActor = pbTreeEditOperation.createdAtMapByActor;\n    for (const [key, value] of treeEditOperation.getMaxCreatedAtMapByActor()) {\n      pbCreatedAtMapByActor[key] = toTimeTicket(value)!;\n    }\n    pbTreeEditOperation.parentCreatedAt = toTimeTicket(\n      treeEditOperation.getParentCreatedAt(),\n    );\n    pbTreeEditOperation.from = toTreePos(treeEditOperation.getFromPos());\n    pbTreeEditOperation.to = toTreePos(treeEditOperation.getToPos());\n    pbTreeEditOperation.contents = toTreeNodesWhenEdit(\n      treeEditOperation.getContents()!,\n    );\n    pbTreeEditOperation.splitLevel = treeEditOperation.getSplitLevel();\n\n    pbTreeEditOperation.executedAt = toTimeTicket(\n      treeEditOperation.getExecutedAt(),\n    );\n    pbOperation.body.case = 'treeEdit';\n    pbOperation.body.value = pbTreeEditOperation;\n  } else if (operation instanceof TreeStyleOperation) {\n    const treeStyleOperation = operation as TreeStyleOperation;\n    const pbTreeStyleOperation = new PbOperation_TreeStyle();\n    pbTreeStyleOperation.parentCreatedAt = toTimeTicket(\n      treeStyleOperation.getParentCreatedAt(),\n    );\n    pbTreeStyleOperation.from = toTreePos(treeStyleOperation.getFromPos());\n    pbTreeStyleOperation.to = toTreePos(treeStyleOperation.getToPos());\n    const pbCreatedAtMapByActor = pbTreeStyleOperation.createdAtMapByActor;\n    for (const [key, value] of treeStyleOperation.getMaxCreatedAtMapByActor()) {\n      pbCreatedAtMapByActor[key] = toTimeTicket(value)!;\n    }\n\n    const attributesToRemove = treeStyleOperation.getAttributesToRemove();\n    if (attributesToRemove.length > 0) {\n      pbTreeStyleOperation.attributesToRemove = attributesToRemove;\n    } else {\n      const attributesMap = pbTreeStyleOperation.attributes;\n\n      for (const [key, value] of treeStyleOperation.getAttributes()) {\n        attributesMap[key] = value;\n      }\n    }\n    pbTreeStyleOperation.executedAt = toTimeTicket(\n      treeStyleOperation.getExecutedAt(),\n    );\n    pbOperation.body.case = 'treeStyle';\n    pbOperation.body.value = pbTreeStyleOperation;\n  } else {\n    throw new YorkieError(Code.Unimplemented, 'unimplemented operation');\n  }\n\n  return pbOperation;\n}\n\n/**\n * `toOperations` converts the given model to Protobuf format.\n */\nfunction toOperations(operations: Array<Operation>): Array<PbOperation> {\n  const pbOperations = [];\n  for (const operation of operations) {\n    pbOperations.push(toOperation(operation));\n  }\n  return pbOperations;\n}\n\n/**\n * `toChange` converts the given model to Protobuf format.\n */\nfunction toChange(change: Change<Indexable>): PbChange {\n  const pbChange = new PbChange({\n    id: toChangeID(change.getID()),\n    message: change.getMessage(),\n  });\n  if (change.hasOperations()) {\n    pbChange.operations = toOperations(change.getOperations());\n  }\n  if (change.hasPresenceChange()) {\n    pbChange.presenceChange = toPresenceChange(change.getPresenceChange()!);\n  }\n  return pbChange;\n}\n\n/**\n * `toChanges` converts the given model to Protobuf format.\n */\nfunction toChanges(changes: Array<Change<Indexable>>): Array<PbChange> {\n  const pbChanges = [];\n  for (const change of changes) {\n    pbChanges.push(toChange(change));\n  }\n  return pbChanges;\n}\n\n/**\n * `toRHTNodes` converts the given model to Protobuf format.\n */\nfunction toRHTNodes(rht: ElementRHT): Array<PbRHTNode> {\n  const pbRHTNodes = [];\n  for (const rhtNode of rht) {\n    pbRHTNodes.push(\n      new PbRHTNode({\n        key: rhtNode.getStrKey(),\n        element: toElement(rhtNode.getValue()),\n      }),\n    );\n  }\n\n  return pbRHTNodes;\n}\n\n/**\n * `toRGANodes` converts the given model to Protobuf format.\n */\nfunction toRGANodes(rgaTreeList: RGATreeList): Array<PbRGANode> {\n  const pbRGANodes = [];\n  for (const rgaTreeListNode of rgaTreeList) {\n    pbRGANodes.push(\n      new PbRGANode({\n        element: toElement(rgaTreeListNode.getValue()),\n      }),\n    );\n  }\n\n  return pbRGANodes;\n}\n\n/**\n * `toTextNodes` converts the given model to Protobuf format.\n */\nfunction toTextNodes(\n  rgaTreeSplit: RGATreeSplit<CRDTTextValue>,\n): Array<PbTextNode> {\n  const pbTextNodes = [];\n\n  for (const textNode of rgaTreeSplit) {\n    const pbTextNode = new PbTextNode();\n    pbTextNode.id = toTextNodeID(textNode.getID());\n    pbTextNode.value = textNode.getValue().getContent();\n    pbTextNode.removedAt = toTimeTicket(textNode.getRemovedAt());\n\n    const pbNodeAttrsMap = pbTextNode.attributes;\n    const attrs = textNode.getValue().getAttrs();\n    for (const attr of attrs) {\n      const pbNodeAttr = new PbNodeAttr();\n      pbNodeAttr.value = attr.getValue();\n      pbNodeAttr.updatedAt = toTimeTicket(attr.getUpdatedAt());\n      pbNodeAttrsMap[attr.getKey()] = pbNodeAttr;\n    }\n\n    pbTextNodes.push(pbTextNode);\n  }\n\n  return pbTextNodes;\n}\n\n/**\n * `toTreeNodesWhenEdit` converts the given model to Protobuf format.\n */\nfunction toTreeNodesWhenEdit(nodes: Array<CRDTTreeNode>): Array<PbTreeNodes> {\n  const pbTreeNodesList: Array<PbTreeNodes> = [];\n  if (!nodes || !nodes.length) {\n    return pbTreeNodesList;\n  }\n\n  for (const node of nodes) {\n    pbTreeNodesList.push(\n      new PbTreeNodes({\n        content: toTreeNodes(node),\n      }),\n    );\n  }\n\n  return pbTreeNodesList;\n}\n\n/**\n * `toRHT` converts the given model to Protobuf format.\n */\nfunction toRHT(rht: RHT): { [key: string]: PbNodeAttr } {\n  const pbRHT: { [key: string]: PbNodeAttr } = {};\n  for (const node of rht) {\n    pbRHT[node.getKey()] = new PbNodeAttr({\n      value: node.getValue(),\n      updatedAt: toTimeTicket(node.getUpdatedAt()),\n      isRemoved: node.isRemoved(),\n    });\n  }\n\n  return pbRHT;\n}\n\n/**\n * `toTreeNodes` converts the given model to Protobuf format.\n */\nfunction toTreeNodes(node: CRDTTreeNode): Array<PbTreeNode> {\n  if (!node) {\n    return [];\n  }\n\n  const pbTreeNodes: Array<PbTreeNode> = [];\n  traverseAll(node, (n, depth) => {\n    const pbTreeNode = new PbTreeNode({\n      id: toTreeNodeID(n.id),\n      type: n.type,\n      removedAt: toTimeTicket(n.removedAt),\n      depth,\n    });\n\n    if (n.isText) {\n      pbTreeNode.value = n.value;\n    }\n    if (n.insPrevID) {\n      pbTreeNode.insPrevId = toTreeNodeID(n.insPrevID);\n    }\n    if (n.insNextID) {\n      pbTreeNode.insNextId = toTreeNodeID(n.insNextID);\n    }\n\n    if (n.attrs) {\n      pbTreeNode.attributes = toRHT(n.attrs);\n    }\n\n    pbTreeNodes.push(pbTreeNode);\n  });\n\n  return pbTreeNodes;\n}\n\n/**\n * `toObject` converts the given model to Protobuf format.\n */\nfunction toObject(obj: CRDTObject): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'jsonObject';\n  pbElement.body.value = new PbJSONElement_JSONObject({\n    nodes: toRHTNodes(obj.getRHT()),\n    createdAt: toTimeTicket(obj.getCreatedAt()),\n    movedAt: toTimeTicket(obj.getMovedAt()),\n    removedAt: toTimeTicket(obj.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toArray` converts the given model to Protobuf format.\n */\nfunction toArray(arr: CRDTArray): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'jsonArray';\n  pbElement.body.value = new PbJSONElement_JSONArray({\n    nodes: toRGANodes(arr.getElements()),\n    createdAt: toTimeTicket(arr.getCreatedAt()),\n    movedAt: toTimeTicket(arr.getMovedAt()),\n    removedAt: toTimeTicket(arr.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toPrimitive` converts the given model to Protobuf format.\n */\nfunction toPrimitive(primitive: Primitive): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'primitive';\n  pbElement.body.value = new PbJSONElement_Primitive({\n    type: toValueType(primitive.getType()),\n    value: primitive.toBytes(),\n    createdAt: toTimeTicket(primitive.getCreatedAt()),\n    movedAt: toTimeTicket(primitive.getMovedAt()),\n    removedAt: toTimeTicket(primitive.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toText` converts the given model to Protobuf format.\n */\nfunction toText(text: CRDTText<Record<string, any>>): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'text';\n  pbElement.body.value = new PbJSONElement_Text({\n    nodes: toTextNodes(text.getRGATreeSplit()),\n    createdAt: toTimeTicket(text.getCreatedAt()),\n    movedAt: toTimeTicket(text.getMovedAt()),\n    removedAt: toTimeTicket(text.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toCounter` converts the given model to Protobuf format.\n */\nfunction toCounter(counter: CRDTCounter): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'counter';\n  pbElement.body.value = new PbJSONElement_Counter({\n    type: toCounterType(counter.getType()),\n    value: counter.toBytes(),\n    createdAt: toTimeTicket(counter.getCreatedAt()),\n    movedAt: toTimeTicket(counter.getMovedAt()),\n    removedAt: toTimeTicket(counter.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toTree` converts the given model to Protobuf format.\n */\nfunction toTree(tree: CRDTTree): PbJSONElement {\n  const pbElement = new PbJSONElement();\n  pbElement.body.case = 'tree';\n  pbElement.body.value = new PbJSONElement_Tree({\n    nodes: toTreeNodes(tree.getRoot()),\n    createdAt: toTimeTicket(tree.getCreatedAt()),\n    movedAt: toTimeTicket(tree.getMovedAt()),\n    removedAt: toTimeTicket(tree.getRemovedAt()),\n  });\n  return pbElement;\n}\n\n/**\n * `toElement` converts the given model to Protobuf format.\n */\nfunction toElement(element: CRDTElement): PbJSONElement {\n  if (element instanceof CRDTObject) {\n    return toObject(element);\n  }\n  if (element instanceof CRDTArray) {\n    return toArray(element);\n  }\n  if (element instanceof Primitive) {\n    return toPrimitive(element);\n  }\n  if (element instanceof CRDTText) {\n    return toText(element);\n  }\n  if (element instanceof CRDTCounter) {\n    return toCounter(element);\n  }\n  if (element instanceof CRDTTree) {\n    return toTree(element);\n  }\n\n  throw new YorkieError(Code.Unimplemented, `unimplemented element`);\n}\n\n/**\n * `toChangePack` converts the given model to Protobuf format.\n */\nfunction toChangePack(pack: ChangePack<Indexable>): PbChangePack {\n  return new PbChangePack({\n    documentKey: pack.getDocumentKey(),\n    checkpoint: toCheckpoint(pack.getCheckpoint()),\n    isRemoved: pack.getIsRemoved(),\n    changes: toChanges(pack.getChanges()),\n    snapshot: pack.getSnapshot(),\n    minSyncedTicket: toTimeTicket(pack.getMinSyncedTicket()),\n  });\n}\n\n/**\n * `fromChangeID` converts the given Protobuf format to model format.\n */\nfunction fromChangeID(pbChangeID: PbChangeID): ChangeID {\n  let serverSeq: Long | undefined;\n  if (pbChangeID.serverSeq) {\n    serverSeq = Long.fromString(pbChangeID.serverSeq, true);\n  }\n\n  return ChangeID.of(\n    pbChangeID.clientSeq,\n    Long.fromString(pbChangeID.lamport, true),\n    toHexString(pbChangeID.actorId),\n    serverSeq,\n  );\n}\n\n/**\n * `fromTimeTicket` converts the given Protobuf format to model format.\n */\nfunction fromTimeTicket(pbTimeTicket?: PbTimeTicket): TimeTicket | undefined {\n  if (!pbTimeTicket) {\n    return;\n  }\n\n  return TimeTicket.of(\n    Long.fromString(pbTimeTicket.lamport, true),\n    pbTimeTicket.delimiter,\n    toHexString(pbTimeTicket.actorId),\n  );\n}\n\n/**\n * `fromPresence` converts the given Protobuf format to model format.\n */\nfunction fromPresence<P extends Indexable>(pbPresence: PbPresence): P {\n  const data: Record<string, string> = {};\n  Object.entries(pbPresence.data).forEach(([key, value]) => {\n    data[key] = JSON.parse(value);\n  });\n\n  return data as P;\n}\n\n/**\n * `fromPresenceChange` converts the given Protobuf format to model format.\n */\nfunction fromPresenceChange<P extends Indexable>(\n  pbPresenceChange: PbPresenceChange,\n): PresenceChange<P> {\n  const type = pbPresenceChange.type;\n  if (type === PbPresenceChange_ChangeType.PUT) {\n    const presence = fromPresence<P>(pbPresenceChange.presence!);\n    return {\n      type: PresenceChangeType.Put,\n      presence,\n    };\n  }\n  if (type === PbPresenceChange_ChangeType.CLEAR) {\n    return {\n      type: PresenceChangeType.Clear,\n    };\n  }\n\n  throw new YorkieError(Code.Unsupported, `unsupported type: ${type}`);\n}\n\n/**\n * `fromPresences` converts the given Protobuf format to model format.\n */\nfunction fromPresences<P extends Indexable>(pbPresences: {\n  [key: string]: PbPresence;\n}): Map<ActorID, P> {\n  const presences = new Map<ActorID, P>();\n  Object.entries(pbPresences).forEach(([actorID, pbPresence]) => {\n    presences.set(actorID, fromPresence(pbPresence));\n  });\n  return presences;\n}\n\n/**\n * `fromValueType` converts the given Protobuf format to model format.\n */\nfunction fromValueType(pbValueType: PbValueType): PrimitiveType {\n  switch (pbValueType) {\n    case PbValueType.NULL:\n      return PrimitiveType.Null;\n    case PbValueType.BOOLEAN:\n      return PrimitiveType.Boolean;\n    case PbValueType.INTEGER:\n      return PrimitiveType.Integer;\n    case PbValueType.LONG:\n      return PrimitiveType.Long;\n    case PbValueType.DOUBLE:\n      return PrimitiveType.Double;\n    case PbValueType.STRING:\n      return PrimitiveType.String;\n    case PbValueType.BYTES:\n      return PrimitiveType.Bytes;\n    case PbValueType.DATE:\n      return PrimitiveType.Date;\n  }\n  throw new YorkieError(\n    Code.Unimplemented,\n    `unimplemented value type: ${pbValueType}`,\n  );\n}\n\n/**\n * `fromCounterType` converts the given Protobuf format to model format.\n */\nfunction fromCounterType(pbValueType: PbValueType): CounterType {\n  switch (pbValueType) {\n    case PbValueType.INTEGER_CNT:\n      return CounterType.IntegerCnt;\n    case PbValueType.LONG_CNT:\n      return CounterType.LongCnt;\n  }\n  throw new YorkieError(\n    Code.Unimplemented,\n    `unimplemented value type: ${pbValueType}`,\n  );\n}\n\n/**\n * `fromElementSimple` converts the given Protobuf format to model format.\n */\nfunction fromElementSimple(pbElementSimple: PbJSONElementSimple): CRDTElement {\n  switch (pbElementSimple.type) {\n    case PbValueType.JSON_OBJECT:\n      if (!pbElementSimple.value) {\n        return CRDTObject.create(fromTimeTicket(pbElementSimple.createdAt)!);\n      }\n      return bytesToObject(pbElementSimple.value);\n    case PbValueType.JSON_ARRAY:\n      if (!pbElementSimple.value) {\n        return CRDTArray.create(fromTimeTicket(pbElementSimple.createdAt)!);\n      }\n      return bytesToArray(pbElementSimple.value);\n    case PbValueType.TEXT:\n      return CRDTText.create(\n        RGATreeSplit.create(),\n        fromTimeTicket(pbElementSimple.createdAt)!,\n      );\n    case PbValueType.TREE:\n      return bytesToTree(pbElementSimple.value)!;\n    case PbValueType.NULL:\n    case PbValueType.BOOLEAN:\n    case PbValueType.INTEGER:\n    case PbValueType.LONG:\n    case PbValueType.DOUBLE:\n    case PbValueType.STRING:\n    case PbValueType.BYTES:\n    case PbValueType.DATE:\n      return Primitive.of(\n        Primitive.valueFromBytes(\n          fromValueType(pbElementSimple.type),\n          pbElementSimple.value,\n        ),\n        fromTimeTicket(pbElementSimple.createdAt)!,\n      );\n    case PbValueType.INTEGER_CNT:\n    case PbValueType.LONG_CNT:\n      return CRDTCounter.create(\n        fromCounterType(pbElementSimple.type),\n        CRDTCounter.valueFromBytes(\n          fromCounterType(pbElementSimple.type),\n          pbElementSimple.value,\n        ),\n        fromTimeTicket(pbElementSimple.createdAt)!,\n      );\n  }\n}\n\n/**\n * `fromTextNodePos` converts the given Protobuf format to model format.\n */\nfunction fromTextNodePos(pbTextNodePos: PbTextNodePos): RGATreeSplitPos {\n  return RGATreeSplitPos.of(\n    RGATreeSplitNodeID.of(\n      fromTimeTicket(pbTextNodePos.createdAt)!,\n      pbTextNodePos.offset,\n    ),\n    pbTextNodePos.relativeOffset,\n  );\n}\n\n/**\n * `fromTextNodeID` converts the given Protobuf format to model format.\n */\nfunction fromTextNodeID(pbTextNodeID: PbTextNodeID): RGATreeSplitNodeID {\n  return RGATreeSplitNodeID.of(\n    fromTimeTicket(pbTextNodeID.createdAt)!,\n    pbTextNodeID.offset,\n  );\n}\n\n/**\n * `fromTextNode` converts the given Protobuf format to model format.\n */\nfunction fromTextNode(pbTextNode: PbTextNode): RGATreeSplitNode<CRDTTextValue> {\n  const textValue = CRDTTextValue.create(pbTextNode.value);\n  Object.entries(pbTextNode.attributes).forEach(([key, value]) => {\n    textValue.setAttr(key, value.value, fromTimeTicket(value.updatedAt)!);\n  });\n\n  const textNode = RGATreeSplitNode.create(\n    fromTextNodeID(pbTextNode.id!),\n    textValue,\n  );\n  textNode.remove(fromTimeTicket(pbTextNode.removedAt));\n  return textNode;\n}\n\n/**\n * `fromTreePos` converts the given Protobuf format to model format.\n */\nfunction fromTreePos(pbTreePos: PbTreePos): CRDTTreePos {\n  return CRDTTreePos.of(\n    fromTreeNodeID(pbTreePos.parentId!),\n    fromTreeNodeID(pbTreePos.leftSiblingId!),\n  );\n}\n\n/**\n * `fromTreeNodeID` converts the given Protobuf format to model format.\n */\nfunction fromTreeNodeID(pbTreeNodeID: PbTreeNodeID): CRDTTreeNodeID {\n  return CRDTTreeNodeID.of(\n    fromTimeTicket(pbTreeNodeID.createdAt)!,\n    pbTreeNodeID.offset,\n  );\n}\n\n/**\n * `fromTreeNodesWhenEdit` converts the given Protobuf format to model format.\n */\nfunction fromTreeNodesWhenEdit(\n  pbTreeNodes: Array<PbTreeNodes>,\n): Array<CRDTTreeNode> | undefined {\n  if (!pbTreeNodes.length) {\n    return;\n  }\n\n  const treeNodes: Array<CRDTTreeNode> = [];\n  pbTreeNodes.forEach((node) => {\n    const treeNode = fromTreeNodes(node.content);\n    treeNodes.push(treeNode!);\n  });\n\n  return treeNodes;\n}\n\n/**\n * `fromTreeNodes` converts the given Protobuf format to model format.\n */\nfunction fromTreeNodes(\n  pbTreeNodes: Array<PbTreeNode>,\n): CRDTTreeNode | undefined {\n  if (pbTreeNodes.length === 0) {\n    return;\n  }\n\n  const nodes: Array<CRDTTreeNode> = [];\n  for (const pbTreeNode of pbTreeNodes) {\n    nodes.push(fromTreeNode(pbTreeNode));\n  }\n\n  const root = nodes[nodes.length - 1];\n  for (let i = nodes.length - 2; i >= 0; i--) {\n    let parent: CRDTTreeNode;\n    for (let j = i + 1; j < nodes.length; j++) {\n      if (pbTreeNodes[i].depth - 1 === pbTreeNodes[j].depth) {\n        parent = nodes[j];\n        break;\n      }\n    }\n\n    parent!.prepend(nodes[i]);\n  }\n\n  root.updateDescendantsSize();\n\n  // build CRDTTree from the root to construct the links between nodes.\n  return CRDTTree.create(root, InitialTimeTicket).getRoot();\n}\n\n/**\n * `fromRHT` converts the given Protobuf format to model format.\n */\nfunction fromRHT(pbRHT: { [key: string]: PbNodeAttr }): RHT {\n  const rht = RHT.create();\n  for (const [key, pbRHTNode] of Object.entries(pbRHT)) {\n    rht.setInternal(\n      key,\n      pbRHTNode.value,\n      fromTimeTicket(pbRHTNode.updatedAt)!,\n      pbRHTNode.isRemoved,\n    );\n  }\n\n  return rht;\n}\n\n/**\n * `fromTreeNode` converts the given Protobuf format to model format.\n */\nfunction fromTreeNode(pbTreeNode: PbTreeNode): CRDTTreeNode {\n  const id = fromTreeNodeID(pbTreeNode.id!);\n  const node = CRDTTreeNode.create(id, pbTreeNode.type);\n  const pbAttrs = Object.entries(pbTreeNode.attributes);\n  if (node.isText) {\n    node.value = pbTreeNode.value;\n  } else if (pbAttrs.length) {\n    node.attrs = fromRHT(pbTreeNode.attributes);\n  }\n\n  if (pbTreeNode.insPrevId) {\n    node.insPrevID = fromTreeNodeID(pbTreeNode.insPrevId);\n  }\n\n  if (pbTreeNode.insNextId) {\n    node.insNextID = fromTreeNodeID(pbTreeNode.insNextId);\n  }\n\n  node.removedAt = fromTimeTicket(pbTreeNode.removedAt);\n\n  return node;\n}\n\n/**\n * `fromOperation` converts the given Protobuf format to model format.\n */\nfunction fromOperation(pbOperation: PbOperation): Operation | undefined {\n  if (pbOperation.body.case === 'set') {\n    const pbSetOperation = pbOperation.body.value;\n    return SetOperation.create(\n      pbSetOperation!.key,\n      fromElementSimple(pbSetOperation!.value!),\n      fromTimeTicket(pbSetOperation!.parentCreatedAt)!,\n      fromTimeTicket(pbSetOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'add') {\n    const pbAddOperation = pbOperation.body.value;\n    return AddOperation.create(\n      fromTimeTicket(pbAddOperation!.parentCreatedAt)!,\n      fromTimeTicket(pbAddOperation!.prevCreatedAt)!,\n      fromElementSimple(pbAddOperation!.value!),\n      fromTimeTicket(pbAddOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'move') {\n    const pbMoveOperation = pbOperation.body.value;\n    return MoveOperation.create(\n      fromTimeTicket(pbMoveOperation!.parentCreatedAt)!,\n      fromTimeTicket(pbMoveOperation!.prevCreatedAt)!,\n      fromTimeTicket(pbMoveOperation!.createdAt)!,\n      fromTimeTicket(pbMoveOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'remove') {\n    const pbRemoveOperation = pbOperation.body.value;\n    return RemoveOperation.create(\n      fromTimeTicket(pbRemoveOperation!.parentCreatedAt)!,\n      fromTimeTicket(pbRemoveOperation!.createdAt)!,\n      fromTimeTicket(pbRemoveOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'edit') {\n    const pbEditOperation = pbOperation.body.value;\n    const createdAtMapByActor = new Map();\n    Object.entries(pbEditOperation!.createdAtMapByActor).forEach(\n      ([key, value]) => {\n        createdAtMapByActor.set(key, fromTimeTicket(value));\n      },\n    );\n    const attributes = new Map();\n    Object.entries(pbEditOperation!.attributes).forEach(([key, value]) => {\n      attributes.set(key, value);\n    });\n    return EditOperation.create(\n      fromTimeTicket(pbEditOperation!.parentCreatedAt)!,\n      fromTextNodePos(pbEditOperation!.from!),\n      fromTextNodePos(pbEditOperation!.to!),\n      createdAtMapByActor,\n      pbEditOperation!.content,\n      attributes,\n      fromTimeTicket(pbEditOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'style') {\n    const pbStyleOperation = pbOperation.body.value;\n    const createdAtMapByActor = new Map();\n    Object.entries(pbStyleOperation!.createdAtMapByActor).forEach(\n      ([key, value]) => {\n        createdAtMapByActor.set(key, fromTimeTicket(value));\n      },\n    );\n    const attributes = new Map();\n    Object.entries(pbStyleOperation!.attributes).forEach(([key, value]) => {\n      attributes.set(key, value);\n    });\n    return StyleOperation.create(\n      fromTimeTicket(pbStyleOperation!.parentCreatedAt)!,\n      fromTextNodePos(pbStyleOperation!.from!),\n      fromTextNodePos(pbStyleOperation!.to!),\n      createdAtMapByActor,\n      attributes,\n      fromTimeTicket(pbStyleOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'select') {\n    // TODO(hackerwins): Select is deprecated.\n    return;\n  } else if (pbOperation.body.case === 'increase') {\n    const pbIncreaseOperation = pbOperation.body.value;\n    return IncreaseOperation.create(\n      fromTimeTicket(pbIncreaseOperation!.parentCreatedAt)!,\n      fromElementSimple(pbIncreaseOperation!.value!),\n      fromTimeTicket(pbIncreaseOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'treeEdit') {\n    const pbTreeEditOperation = pbOperation.body.value;\n    const createdAtMapByActor = new Map();\n    Object.entries(pbTreeEditOperation!.createdAtMapByActor).forEach(\n      ([key, value]) => {\n        createdAtMapByActor.set(key, fromTimeTicket(value));\n      },\n    );\n    return TreeEditOperation.create(\n      fromTimeTicket(pbTreeEditOperation!.parentCreatedAt)!,\n      fromTreePos(pbTreeEditOperation!.from!),\n      fromTreePos(pbTreeEditOperation!.to!),\n      fromTreeNodesWhenEdit(pbTreeEditOperation!.contents),\n      pbTreeEditOperation!.splitLevel,\n      createdAtMapByActor,\n      fromTimeTicket(pbTreeEditOperation!.executedAt)!,\n    );\n  } else if (pbOperation.body.case === 'treeStyle') {\n    const pbTreeStyleOperation = pbOperation.body.value;\n    const attributes = new Map();\n    const attributesToRemove = pbTreeStyleOperation.attributesToRemove;\n    const createdAtMapByActor = new Map();\n    if (pbTreeStyleOperation?.createdAtMapByActor) {\n      Object.entries(pbTreeStyleOperation!.createdAtMapByActor).forEach(\n        ([key, value]) => {\n          createdAtMapByActor.set(key, fromTimeTicket(value));\n        },\n      );\n    }\n\n    if (attributesToRemove?.length > 0) {\n      return TreeStyleOperation.createTreeRemoveStyleOperation(\n        fromTimeTicket(pbTreeStyleOperation!.parentCreatedAt)!,\n        fromTreePos(pbTreeStyleOperation!.from!),\n        fromTreePos(pbTreeStyleOperation!.to!),\n        createdAtMapByActor,\n        attributesToRemove,\n        fromTimeTicket(pbTreeStyleOperation!.executedAt)!,\n      );\n    } else {\n      Object.entries(pbTreeStyleOperation!.attributes).forEach(\n        ([key, value]) => {\n          attributes.set(key, value);\n        },\n      );\n      return TreeStyleOperation.create(\n        fromTimeTicket(pbTreeStyleOperation!.parentCreatedAt)!,\n        fromTreePos(pbTreeStyleOperation!.from!),\n        fromTreePos(pbTreeStyleOperation!.to!),\n        createdAtMapByActor,\n        attributes,\n        fromTimeTicket(pbTreeStyleOperation!.executedAt)!,\n      );\n    }\n  } else {\n    throw new YorkieError(Code.Unimplemented, `unimplemented operation`);\n  }\n}\n\n/**\n * `fromOperations` converts the given Protobuf format to model format.\n */\nfunction fromOperations(pbOperations: Array<PbOperation>): Array<Operation> {\n  const operations = [];\n  for (const pbOperation of pbOperations) {\n    const operation = fromOperation(pbOperation);\n    if (operation) {\n      operations.push(operation);\n    }\n  }\n  return operations;\n}\n\n/**\n * `fromChanges` converts the given Protobuf format to model format.\n */\nfunction fromChanges<P extends Indexable>(\n  pbChanges: Array<PbChange>,\n): Array<Change<P>> {\n  const changes: Array<Change<P>> = [];\n\n  for (const pbChange of pbChanges) {\n    changes.push(\n      Change.create({\n        id: fromChangeID(pbChange.id!),\n        operations: fromOperations(pbChange.operations),\n        presenceChange: pbChange.presenceChange\n          ? fromPresenceChange(pbChange.presenceChange!)\n          : undefined,\n        message: pbChange.message,\n      }),\n    );\n  }\n\n  return changes;\n}\n\n/**\n * `fromCheckpoint` converts the given Protobuf format to model format.\n */\nfunction fromCheckpoint(pbCheckpoint: PbCheckpoint): Checkpoint {\n  return Checkpoint.of(\n    Long.fromString(pbCheckpoint.serverSeq, true),\n    pbCheckpoint.clientSeq,\n  );\n}\n\n/**\n * `fromChangePack` converts the given Protobuf format to model format.\n */\nfunction fromChangePack<P extends Indexable>(\n  pbPack: PbChangePack,\n): ChangePack<P> {\n  return ChangePack.create<P>(\n    pbPack.documentKey!,\n    fromCheckpoint(pbPack.checkpoint!),\n    pbPack.isRemoved,\n    fromChanges(pbPack.changes),\n    pbPack.snapshot,\n    fromTimeTicket(pbPack.minSyncedTicket),\n  );\n}\n\n/**\n * `fromObject` converts the given Protobuf format to model format.\n */\nfunction fromObject(pbObject: PbJSONElement_JSONObject): CRDTObject {\n  const rht = new ElementRHT();\n  for (const pbRHTNode of pbObject.nodes) {\n    const value = fromElement(pbRHTNode.element!);\n    rht.set(pbRHTNode.key, value, value.getPositionedAt());\n  }\n\n  const obj = new CRDTObject(fromTimeTicket(pbObject.createdAt)!, rht);\n  obj.setMovedAt(fromTimeTicket(pbObject.movedAt));\n  obj.setRemovedAt(fromTimeTicket(pbObject.removedAt));\n  return obj;\n}\n\n/**\n * `fromArray` converts the given Protobuf format to model format.\n */\nfunction fromArray(pbArray: PbJSONElement_JSONArray): CRDTArray {\n  const rgaTreeList = new RGATreeList();\n  for (const pbRGANode of pbArray.nodes) {\n    // eslint-disable-next-line\n    rgaTreeList.insert(fromElement(pbRGANode.element!));\n  }\n\n  const arr = new CRDTArray(fromTimeTicket(pbArray.createdAt)!, rgaTreeList);\n  arr.setMovedAt(fromTimeTicket(pbArray.movedAt));\n  arr.setRemovedAt(fromTimeTicket(pbArray.removedAt));\n  return arr;\n}\n\n/**\n * `fromPrimitive` converts the given Protobuf format to model format.\n */\nfunction fromPrimitive(pbPrimitive: PbJSONElement_Primitive): Primitive {\n  const primitive = Primitive.of(\n    Primitive.valueFromBytes(\n      fromValueType(pbPrimitive.type),\n      pbPrimitive.value,\n    ),\n    fromTimeTicket(pbPrimitive.createdAt)!,\n  );\n  primitive.setMovedAt(fromTimeTicket(pbPrimitive.movedAt));\n  primitive.setRemovedAt(fromTimeTicket(pbPrimitive.removedAt));\n  return primitive;\n}\n\n/**\n * `fromText` converts the given Protobuf format to model format.\n */\nfunction fromText<A extends Indexable>(\n  pbText: PbJSONElement_Text,\n): CRDTText<A> {\n  const rgaTreeSplit = new RGATreeSplit<CRDTTextValue>();\n\n  let prev = rgaTreeSplit.getHead();\n  for (const pbNode of pbText.nodes) {\n    const current = rgaTreeSplit.insertAfter(prev, fromTextNode(pbNode));\n    if (pbNode.insPrevId) {\n      current.setInsPrev(\n        rgaTreeSplit.findNode(fromTextNodeID(pbNode.insPrevId!)),\n      );\n    }\n    prev = current;\n  }\n  const text = new CRDTText<A>(rgaTreeSplit, fromTimeTicket(pbText.createdAt)!);\n  text.setMovedAt(fromTimeTicket(pbText.movedAt));\n  text.setRemovedAt(fromTimeTicket(pbText.removedAt));\n  return text;\n}\n\n/**\n * `fromCounter` converts the given Protobuf format to model format.\n */\nfunction fromCounter(pbCounter: PbJSONElement_Counter): CRDTCounter {\n  const counter = CRDTCounter.create(\n    fromCounterType(pbCounter.type),\n    CRDTCounter.valueFromBytes(\n      fromCounterType(pbCounter.type),\n      pbCounter.value,\n    ),\n    fromTimeTicket(pbCounter.createdAt)!,\n  );\n  counter.setMovedAt(fromTimeTicket(pbCounter.movedAt));\n  counter.setRemovedAt(fromTimeTicket(pbCounter.removedAt));\n  return counter;\n}\n\n/**\n * `fromTree` converts the given Protobuf format to model format.\n */\nfunction fromTree(pbTree: PbJSONElement_Tree): CRDTTree {\n  const root = fromTreeNodes(pbTree.nodes);\n  return CRDTTree.create(root!, fromTimeTicket(pbTree.createdAt)!);\n}\n\n/**\n * `fromElement` converts the given Protobuf format to model format.\n */\nfunction fromElement(pbElement: PbJSONElement): CRDTElement {\n  if (pbElement.body.case === 'jsonObject') {\n    return fromObject(pbElement.body.value!);\n  } else if (pbElement.body.case === 'jsonArray') {\n    return fromArray(pbElement.body.value!);\n  } else if (pbElement.body.case === 'primitive') {\n    return fromPrimitive(pbElement.body.value!);\n  } else if (pbElement.body.case === 'text') {\n    return fromText(pbElement.body.value!);\n  } else if (pbElement.body.case === 'counter') {\n    return fromCounter(pbElement.body.value!);\n  } else if (pbElement.body.case === 'tree') {\n    return fromTree(pbElement.body.value!);\n  } else {\n    throw new YorkieError(Code.Unimplemented, `unimplemented element`);\n  }\n}\n\n/**\n * `bytesToSnapshot` creates a Snapshot from the given byte array.\n */\nfunction bytesToSnapshot<P extends Indexable>(\n  bytes?: Uint8Array,\n): {\n  root: CRDTObject;\n  presences: Map<ActorID, P>;\n} {\n  if (!bytes) {\n    return {\n      root: CRDTObject.create(InitialTimeTicket),\n      presences: new Map(),\n    };\n  }\n\n  const snapshot = PbSnapshot.fromBinary(bytes);\n  return {\n    root: fromElement(snapshot.root!) as CRDTObject,\n    presences: fromPresences<P>(snapshot.presences),\n  };\n}\n\n/**\n * `bytesToObject` creates an JSONObject from the given byte array.\n */\nfunction bytesToObject(bytes?: Uint8Array): CRDTObject {\n  if (!bytes) {\n    throw new Error('bytes is empty');\n  }\n\n  const pbElement = PbJSONElement.fromBinary(bytes);\n  return fromObject(pbElement.body.value! as PbJSONElement_JSONObject);\n}\n\n/**\n * `objectToBytes` converts the given JSONObject to byte array.\n */\nfunction objectToBytes(obj: CRDTObject): Uint8Array {\n  return toElement(obj).toBinary();\n}\n\n/**\n * `bytesToArray` creates an CRDTArray from the given bytes.\n */\nfunction bytesToArray(bytes?: Uint8Array): CRDTArray {\n  if (!bytes) {\n    throw new Error('bytes is empty');\n  }\n\n  const pbElement = PbJSONElement.fromBinary(bytes);\n  return fromArray(pbElement.body.value! as PbJSONElement_JSONArray);\n}\n\n/**\n * `arrayToBytes` converts the given CRDTArray to bytes.\n */\nfunction arrayToBytes(array: CRDTArray): Uint8Array {\n  return toArray(array).toBinary();\n}\n\n/**\n * `bytesToTree` creates an CRDTTree from the given bytes.\n */\nfunction bytesToTree(bytes?: Uint8Array): CRDTTree {\n  if (!bytes) {\n    throw new Error('bytes is empty');\n  }\n\n  const pbElement = PbJSONElement.fromBinary(bytes);\n  return fromTree(pbElement.body.value! as PbJSONElement_Tree);\n}\n\n/**\n * `treeToBytes` converts the given tree to bytes.\n */\nfunction treeToBytes(tree: CRDTTree): Uint8Array {\n  return toTree(tree).toBinary();\n}\n\n/**\n * `bytesToHex` creates an hex string from the given byte array.\n */\nfunction bytesToHex(bytes?: Uint8Array): string {\n  if (!bytes) {\n    return '';\n  }\n\n  return Array.from(bytes)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\n/**\n * `toHexString` converts the given byte array to hex string.\n */\nfunction toHexString(bytes: Uint8Array): string {\n  return bytesToHex(bytes);\n}\n\n/**\n * `hexToBytes` converts the given hex string to byte array.\n */\nfunction hexToBytes(hex: string): Uint8Array {\n  return new Uint8Array(\n    hex.match(/.{1,2}/g)!.map((byte) => parseInt(byte, 16)),\n  );\n}\n\n/**\n * `toUnit8Array` converts the given hex string to byte array.\n */\nfunction toUint8Array(hex: string): Uint8Array {\n  return hexToBytes(hex);\n}\n\n/**\n * `bytesToChangeID` creates a ChangeID from the given bytes.\n */\nfunction bytesToChangeID(bytes: Uint8Array): ChangeID {\n  const pbChangeID = PbChangeID.fromBinary(bytes);\n  return fromChangeID(pbChangeID);\n}\n\n/**\n * `bytesToOperation` creates an Operation from the given bytes.\n */\nfunction bytesToOperation(bytes: Uint8Array): Operation {\n  const pbOperation = PbOperation.fromBinary(bytes);\n  return fromOperation(pbOperation)!;\n}\n\n/**\n * `converter` is a converter that converts the given model to protobuf format.\n * is also used to convert models to bytes and vice versa.\n */\nexport const converter = {\n  fromPresence,\n  toChangePack,\n  fromChangePack,\n  fromChanges,\n  objectToBytes,\n  bytesToObject,\n  bytesToSnapshot,\n  bytesToHex,\n  hexToBytes,\n  toHexString,\n  toUint8Array,\n  toOperation,\n  toChangeID,\n  PbChangeID,\n  bytesToChangeID,\n  bytesToOperation,\n};\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type UUID = string;\n\n/**\n * `uuid` generates uuid string\n * @see http://www.ietf.org/rfc/rfc4122.txt\n */\nexport function uuid(): UUID {\n  return 'xxxxxxxx-xxxx-4xxxy-xxxx-xxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import { Document, Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { SyncMode } from '@yorkie-js-sdk/src/client/client';\n\n/**\n * `WatchStream` is a stream that watches the changes of the document.\n */\nexport type WatchStream = any; // TODO(hackerwins): Define proper type of watchStream.\n\n/**\n * `Attachment` is a class that manages the state of the document.\n */\nexport class Attachment<T, P extends Indexable> {\n  // TODO(hackerwins): Consider to changing the modifiers of the following properties to private.\n  private reconnectStreamDelay: number;\n  doc: Document<T, P>;\n  docID: string;\n  syncMode: SyncMode;\n  remoteChangeEventReceived: boolean;\n\n  watchStream?: WatchStream;\n  watchLoopTimerID?: ReturnType<typeof setTimeout>;\n  watchAbortController?: AbortController;\n\n  constructor(\n    reconnectStreamDelay: number,\n    doc: Document<T, P>,\n    docID: string,\n    syncMode: SyncMode,\n  ) {\n    this.reconnectStreamDelay = reconnectStreamDelay;\n    this.doc = doc;\n    this.docID = docID;\n    this.syncMode = syncMode;\n    this.remoteChangeEventReceived = false;\n  }\n\n  /**\n   * `changeSyncMode` changes the sync mode of the document.\n   */\n  public changeSyncMode(syncMode: SyncMode) {\n    this.syncMode = syncMode;\n  }\n\n  /**\n   * `needRealtimeSync` returns whether the document needs to be synced in real time.\n   */\n  public needRealtimeSync(): boolean {\n    if (this.syncMode === SyncMode.RealtimeSyncOff) {\n      return false;\n    }\n\n    if (this.syncMode === SyncMode.RealtimePushOnly) {\n      return this.doc.hasLocalChanges();\n    }\n\n    return (\n      this.syncMode !== SyncMode.Manual &&\n      (this.doc.hasLocalChanges() || this.remoteChangeEventReceived)\n    );\n  }\n\n  /**\n   * `runWatchLoop` runs the watch loop.\n   */\n  public async runWatchLoop(\n    watchStreamCreator: (onDisconnect: () => void) => Promise<WatchStream>,\n  ): Promise<void> {\n    const doLoop = async (): Promise<void> => {\n      if (this.watchStream) {\n        return Promise.resolve();\n      }\n      if (this.watchLoopTimerID) {\n        clearTimeout(this.watchLoopTimerID);\n        this.watchLoopTimerID = undefined;\n      }\n\n      try {\n        [this.watchStream, this.watchAbortController] =\n          await watchStreamCreator(() => {\n            this.watchStream = undefined;\n            this.watchAbortController = undefined;\n            this.watchLoopTimerID = setTimeout(\n              doLoop,\n              this.reconnectStreamDelay,\n            );\n          });\n      } catch (err) {\n        // TODO(hackerwins): For now, if the creation of the watch stream fails,\n        // it is considered normal and the watch loop is executed again after a\n        // certain period of time.\n        // In the future, we need to find a better way to handle this.\n      }\n    };\n\n    await doLoop();\n  }\n\n  /**\n   * `cancelWatchStream` cancels the watch stream.\n   */\n  public cancelWatchStream(): void {\n    if (this.watchStream && this.watchAbortController) {\n      this.watchAbortController.abort();\n      this.watchStream = undefined;\n      this.watchAbortController = undefined;\n    }\n    clearTimeout(this.watchLoopTimerID);\n    this.watchLoopTimerID = undefined;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { uuid } from '@yorkie-js-sdk/src/util/uuid';\n\nexport type NextFn<T> = (value: T) => void;\n\nexport type ErrorFn = (error: Error) => void;\n\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  next: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Unsubscribe = () => void;\n\nexport interface SubscribeFn<T> {\n  (\n    next: Observer<T> | NextFn<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  (observer: Observer<T>): Unsubscribe;\n}\n\ninterface ObserverEntry<T> {\n  subscriptionID: string;\n  observer: Observer<T>;\n}\n\nconst Noop = (): void => {\n  // Do nothing\n};\n\n/**\n * `ObserverProxy` is proxy of `Observer`.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  public finalized = false;\n\n  private observers: Array<ObserverEntry<T>> | undefined = [];\n  private finalError?: Error;\n\n  constructor(executor: Executor<T>) {\n    try {\n      executor(this);\n    } catch (error: any) {\n      this.error(error);\n    }\n  }\n\n  /**\n   * `next` iterates next observer synchronously.\n   */\n  public next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  /**\n   * `error` invoke error.\n   */\n  public error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error!(error);\n    });\n    this.close(error);\n  }\n\n  /**\n   * `complete` completes observer.\n   */\n  public complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete!();\n    });\n    this.close();\n  }\n\n  /**\n   * `subscribe` is a function for subscribing observer.\n   */\n  public subscribe(\n    nextOrObserver: Observer<T> | NextFn<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (!nextOrObserver) {\n      logger.fatal('missing observer');\n    }\n\n    if (this.finalized) {\n      logger.fatal('observable is finalized due to previous error');\n    }\n\n    if (typeof nextOrObserver === 'object') {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete,\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = Noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = Noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = Noop as CompleteFn;\n    }\n\n    const id = uuid();\n    const unsub = this.unsubscribeOne.bind(this, id);\n\n    this.observers!.push({\n      subscriptionID: id,\n      observer: observer as Observer<T>,\n    });\n\n    if (this.finalized) {\n      try {\n        if (this.finalError) {\n          observer.error!(this.finalError);\n        } else {\n          observer.complete!();\n        }\n      } catch (err) {\n        // nothing\n        logger.warn(err);\n      }\n    }\n\n    return unsub;\n  }\n\n  private unsubscribeOne(id: string): void {\n    this.observers = this.observers?.filter((it) => it.subscriptionID !== id);\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      return;\n    }\n\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    if (this.observers !== undefined && this.observers[i] !== undefined) {\n      try {\n        fn(this.observers[i].observer);\n      } catch (err) {\n        logger.error(err);\n      }\n    }\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n\n    this.observers = undefined;\n  }\n}\n\nexport interface Observable<T> {\n  subscribe: SubscribeFn<T>;\n  getProxy?: () => ObserverProxy<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * `createObservable` creates a new instance of ObserverProxy\n * and subscribe the instance.\n */\nexport function createObservable<T>(executor: Executor<T>): Observable<T> {\n  const proxy = new ObserverProxy(executor);\n  return {\n    subscribe: proxy.subscribe.bind(proxy),\n    getProxy: (): ObserverProxy<T> => {\n      return proxy;\n    },\n  };\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TimeTicket,\n  InitialDelimiter,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport {\n  CRDTContainer,\n  CRDTElement,\n} from '@yorkie-js-sdk/src/document/crdt/element';\nimport { Operation } from '@yorkie-js-sdk/src/document/operation/operation';\nimport { ChangeID } from '@yorkie-js-sdk/src/document/change/change_id';\nimport { Change } from '@yorkie-js-sdk/src/document/change/change';\nimport { PresenceChange } from '@yorkie-js-sdk/src/document/presence/presence';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport { deepcopy } from '@yorkie-js-sdk/src/util/object';\nimport { GCPair } from '@yorkie-js-sdk/src/document/crdt/gc';\n\n/**\n * `ChangeContext` is used to record the context of modification when editing\n * a document. Each time we add an operation, a new time ticket is issued.\n * Finally returns a Change after the modification has been completed.\n */\nexport class ChangeContext<P extends Indexable = Indexable> {\n  private id: ChangeID;\n  private delimiter: number;\n  private message?: string;\n\n  private root: CRDTRoot;\n  private operations: Array<Operation>;\n  private presenceChange?: PresenceChange<P>;\n\n  /**\n   * `previousPresence` stores the previous presence to be used for undoing\n   * presence changes.\n   */\n  private previousPresence: P;\n\n  /**\n   * `reversePresenceKeys` stores the keys of the presence to be used for undoing\n   * presence changes.\n   */\n  private reversePresenceKeys: Set<string>;\n\n  constructor(id: ChangeID, root: CRDTRoot, presence: P, message?: string) {\n    this.id = id;\n    this.delimiter = InitialDelimiter;\n\n    this.root = root;\n    this.operations = [];\n    this.previousPresence = deepcopy(presence);\n    this.presenceChange = undefined;\n    this.reversePresenceKeys = new Set();\n    this.message = message;\n  }\n\n  /**\n   * `create` creates a new instance of ChangeContext.\n   */\n  public static create<P extends Indexable>(\n    id: ChangeID,\n    root: CRDTRoot,\n    presence: P,\n    message?: string,\n  ): ChangeContext<P> {\n    return new ChangeContext(id, root, presence, message);\n  }\n\n  /**\n   * `push` pushes the given operation to this context.\n   */\n  public push(operation: Operation): void {\n    this.operations.push(operation);\n  }\n\n  /**\n   * `registerElement` registers the given element to the root.\n   */\n  public registerElement(element: CRDTElement, parent: CRDTContainer): void {\n    this.root.registerElement(element, parent);\n  }\n\n  /**\n   * `registerRemovedElement` register removed element for garbage collection.\n   */\n  public registerRemovedElement(deleted: CRDTElement): void {\n    this.root.registerRemovedElement(deleted);\n  }\n\n  /**\n   * `registerGCPair` registers the given pair to hash table.\n   */\n  public registerGCPair(pair: GCPair): void {\n    this.root.registerGCPair(pair);\n  }\n\n  /**\n   * `getChange` creates a new instance of Change in this context.\n   */\n  public getChange(): Change<P> {\n    return Change.create<P>({\n      id: this.id,\n      operations: this.operations,\n      presenceChange: this.presenceChange,\n      message: this.message,\n    });\n  }\n\n  /**\n   * `hasChange` returns whether this context has change or not.\n   */\n  public hasChange(): boolean {\n    return this.operations.length > 0 || this.presenceChange !== undefined;\n  }\n\n  /**\n   * `setPresenceChange` registers the presence change to this context.\n   */\n  public setPresenceChange(presenceChange: PresenceChange<P>) {\n    this.presenceChange = presenceChange;\n  }\n\n  /**\n   * `setReversePresence` registers the previous presence to undo presence updates.\n   */\n  public setReversePresence(\n    presence: Partial<P>,\n    option?: { addToHistory: boolean },\n  ) {\n    for (const key of Object.keys(presence)) {\n      if (option?.addToHistory) {\n        this.reversePresenceKeys.add(key);\n      } else {\n        this.reversePresenceKeys.delete(key);\n      }\n    }\n  }\n\n  /**\n   * `toReversePresence` returns the reverse presence of this context.\n   */\n  public getReversePresence() {\n    if (this.reversePresenceKeys.size === 0) return undefined;\n\n    const reversePresence: Partial<P> = {};\n    for (const key of this.reversePresenceKeys) {\n      reversePresence[key as keyof P] = this.previousPresence[key];\n    }\n    return reversePresence;\n  }\n\n  /**\n   * `issueTimeTicket` creates a time ticket to be used to create a new operation.\n   */\n  public issueTimeTicket(): TimeTicket {\n    this.delimiter += 1;\n    return this.id.createTimeTicket(this.delimiter);\n  }\n\n  /**\n   * `getLastTimeTicket` returns the last time ticket issued in this context.\n   */\n  public getLastTimeTicket(): TimeTicket {\n    return this.id.createTimeTicket(this.delimiter);\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport {\n  InitialTimeTicket,\n  TimeTicket,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport {\n  CRDTContainer,\n  CRDTElement,\n} from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport { GCPair } from '@yorkie-js-sdk/src/document/crdt/gc';\nimport { CRDTText } from '@yorkie-js-sdk/src/document/crdt/text';\nimport { CRDTTree } from '@yorkie-js-sdk/src/document/crdt/tree';\n\n/**\n * `CRDTElementPair` is a structure that represents a pair of element and its\n * parent. It is used to find the parent of a specific element to perform\n * garbage collection and to find the path of a specific element.\n */\ninterface CRDTElementPair {\n  element: CRDTElement;\n  parent?: CRDTContainer;\n}\n\n/**\n * `CRDTRoot` is a structure that represents the root. It has a hash table of\n * all elements to find a specific element when applying remote changes\n * received from server.\n *\n * Every element has a unique `TimeTicket` at creation, which allows us to find\n * a particular element.\n */\nexport class CRDTRoot {\n  /**\n   * `rootObject` is the root object of the document.\n   */\n  private rootObject: CRDTObject;\n\n  /**\n   * `elementPairMapByCreatedAt` is a hash table that maps the creation time of\n   * an element to the element itself and its parent.\n   */\n  private elementPairMapByCreatedAt: Map<string, CRDTElementPair>;\n\n  /**\n   * `gcElementSetByCreatedAt` is a hash set that contains the creation\n   * time of the removed element. It is used to find the removed element when\n   * executing garbage collection.\n   */\n  private gcElementSetByCreatedAt: Set<string>;\n\n  /**\n   * `gcPairMap` is a hash table that maps the IDString of GCChild to the\n   * element itself and its parent.\n   */\n  private gcPairMap: Map<string, GCPair>;\n\n  constructor(rootObject: CRDTObject) {\n    this.rootObject = rootObject;\n    this.elementPairMapByCreatedAt = new Map();\n    this.gcElementSetByCreatedAt = new Set();\n    this.gcPairMap = new Map();\n    this.registerElement(rootObject, undefined);\n\n    rootObject.getDescendants((elem) => {\n      if (elem.getRemovedAt()) {\n        this.registerRemovedElement(elem);\n      }\n      if (elem instanceof CRDTText || elem instanceof CRDTTree) {\n        for (const pair of elem.getGCPairs()) {\n          this.registerGCPair(pair);\n        }\n      }\n      return false;\n    });\n  }\n\n  /**\n   * `create` creates a new instance of Root.\n   */\n  public static create(): CRDTRoot {\n    return new CRDTRoot(CRDTObject.create(InitialTimeTicket));\n  }\n\n  /**\n   * `findByCreatedAt` returns the element of given creation time.\n   */\n  public findByCreatedAt(createdAt: TimeTicket): CRDTElement | undefined {\n    const pair = this.elementPairMapByCreatedAt.get(createdAt.toIDString());\n    if (!pair) {\n      return;\n    }\n\n    return pair.element;\n  }\n\n  /**\n   * `findElementPairByCreatedAt` returns the element and parent pair\n   * of given creation time.\n   */\n  public findElementPairByCreatedAt(\n    createdAt: TimeTicket,\n  ): CRDTElementPair | undefined {\n    return this.elementPairMapByCreatedAt.get(createdAt.toIDString());\n  }\n\n  /**\n   * `createSubPaths` creates an array of the sub paths for the given element.\n   */\n  public createSubPaths(createdAt: TimeTicket): Array<string> {\n    let pair = this.elementPairMapByCreatedAt.get(createdAt.toIDString());\n    if (!pair) {\n      return [];\n    }\n\n    const subPaths: Array<string> = [];\n    while (pair.parent) {\n      const createdAt = pair.element.getCreatedAt();\n      const subPath = pair.parent.subPathOf(createdAt);\n      if (subPath === undefined) {\n        logger.fatal(`cant find the given element: ${createdAt.toIDString()}`);\n      }\n\n      subPaths.unshift(subPath!);\n      pair = this.elementPairMapByCreatedAt.get(\n        pair.parent.getCreatedAt().toIDString(),\n      )!;\n    }\n\n    subPaths.unshift('$');\n    return subPaths;\n  }\n\n  /**\n   * `createPath` creates path of the given element.\n   */\n  public createPath(createdAt: TimeTicket): string {\n    return this.createSubPaths(createdAt).join('.');\n  }\n\n  /**\n   * `registerElement` registers the given element and its descendants to hash table.\n   */\n  public registerElement(element: CRDTElement, parent?: CRDTContainer): void {\n    this.elementPairMapByCreatedAt.set(element.getCreatedAt().toIDString(), {\n      parent,\n      element,\n    });\n\n    if (element instanceof CRDTContainer) {\n      element.getDescendants((elem, parent) => {\n        this.registerElement(elem, parent);\n        return false;\n      });\n    }\n  }\n\n  /**\n   * `deregisterElement` deregister the given element and its descendants from hash table.\n   */\n  public deregisterElement(element: CRDTElement): number {\n    let count = 0;\n\n    const deregisterElementInternal = (elem: CRDTElement) => {\n      const createdAt = elem.getCreatedAt().toIDString();\n      this.elementPairMapByCreatedAt.delete(createdAt);\n      this.gcElementSetByCreatedAt.delete(createdAt);\n      count++;\n    };\n\n    deregisterElementInternal(element);\n    if (element instanceof CRDTContainer) {\n      element.getDescendants((e) => {\n        deregisterElementInternal(e);\n        return false;\n      });\n    }\n\n    return count;\n  }\n\n  /**\n   * `registerRemovedElement` registers the given element to the hash set.\n   */\n  public registerRemovedElement(element: CRDTElement): void {\n    this.gcElementSetByCreatedAt.add(element.getCreatedAt().toIDString());\n  }\n\n  /**\n   * `registerGCPair` registers the given pair to hash table.\n   */\n  public registerGCPair(pair: GCPair): void {\n    const prev = this.gcPairMap.get(pair.child.toIDString());\n    if (prev) {\n      this.gcPairMap.delete(pair.child.toIDString());\n      return;\n    }\n\n    this.gcPairMap.set(pair.child.toIDString(), pair);\n  }\n\n  /**\n   * `getElementMapSize` returns the size of element map.\n   */\n  public getElementMapSize(): number {\n    return this.elementPairMapByCreatedAt.size;\n  }\n\n  /**\n   * `getGarbageElementSetSize()` returns the size of removed element set.\n   */\n  public getGarbageElementSetSize(): number {\n    const seen = new Set<string>();\n\n    for (const createdAt of this.gcElementSetByCreatedAt) {\n      seen.add(createdAt);\n      const pair = this.elementPairMapByCreatedAt.get(createdAt)!;\n      if (pair.element instanceof CRDTContainer) {\n        pair.element.getDescendants((el) => {\n          seen.add(el.getCreatedAt().toIDString());\n          return false;\n        });\n      }\n    }\n    return seen.size;\n  }\n\n  /**\n   * `getObject` returns root object.\n   */\n  public getObject(): CRDTObject {\n    return this.rootObject;\n  }\n\n  /**\n   * `getGarbageLen` returns length of nodes which can be garbage collected.\n   */\n  public getGarbageLen(): number {\n    return this.getGarbageElementSetSize() + this.gcPairMap.size;\n  }\n\n  /**\n   * `deepcopy` copies itself deeply.\n   */\n  public deepcopy(): CRDTRoot {\n    return new CRDTRoot(this.rootObject.deepcopy());\n  }\n\n  /**\n   * `garbageCollect` purges elements that were removed before the given time.\n   */\n  public garbageCollect(ticket: TimeTicket): number {\n    let count = 0;\n\n    for (const createdAt of this.gcElementSetByCreatedAt) {\n      const pair = this.elementPairMapByCreatedAt.get(createdAt)!;\n      if (\n        pair.element.getRemovedAt() &&\n        ticket.compare(pair.element.getRemovedAt()!) >= 0\n      ) {\n        pair.parent!.purge(pair.element);\n        count += this.deregisterElement(pair.element);\n      }\n    }\n\n    for (const [, pair] of this.gcPairMap) {\n      const removedAt = pair.child.getRemovedAt();\n      if (removedAt !== undefined && ticket.compare(removedAt) >= 0) {\n        pair.parent.purge(pair.child);\n\n        this.gcPairMap.delete(pair.child.toIDString());\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this root object.\n   */\n  public toJSON(): string {\n    return this.rootObject.toJSON();\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this root object.\n   */\n  public toSortedJSON(): string {\n    return this.rootObject.toSortedJSON();\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, LogLevel } from '@yorkie-js-sdk/src/util/logger';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { SetOperation } from '@yorkie-js-sdk/src/document/operation/set_operation';\nimport { RemoveOperation } from '@yorkie-js-sdk/src/document/operation/remove_operation';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport {\n  toJSONElement,\n  buildCRDTElement,\n} from '@yorkie-js-sdk/src/document/json/element';\nimport * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `JSONObject` represents a JSON object, but unlike regular JSON, it has time\n * tickets created by a logical clock to resolve conflicts.\n */\nexport type JSONObject<T> = {\n  /**\n   * `getID` returns the ID(time ticket) of this Object.\n   */\n  getID?(): TimeTicket;\n\n  /**\n   * `toJSON` returns the JSON encoding of this object.\n   */\n  toJSON?(): string;\n\n  /**\n   * `toJS` returns the JSON object of this object.\n   */\n  toJS?(): T;\n\n  /**\n   * `toJSForTest` returns the JSON object of this object for debugging.\n   * @internal\n   */\n  toJSForTest?(): Devtools.JSONElement;\n} & T;\n\n/**\n * `createJSONObject` creates a new instance of JSONObject.\n */\nexport function createJSONObject<T>(\n  context: ChangeContext,\n  target: CRDTObject,\n): JSONObject<T> {\n  const objectProxy = new ObjectProxy(context);\n  return new Proxy(target, objectProxy.getHandlers()) as any;\n}\n\n/**\n * `ObjectProxy` is a proxy representing `Object`.\n */\nexport class ObjectProxy {\n  private context: ChangeContext;\n  private handlers: any;\n\n  constructor(context: ChangeContext) {\n    this.context = context;\n    this.handlers = {\n      set: (target: CRDTObject, key: string, value: any): boolean => {\n        if (logger.isEnabled(LogLevel.Trivial)) {\n          logger.trivial(`obj[${key}]=${JSON.stringify(value)}`);\n        }\n\n        ObjectProxy.setInternal(context, target, key, value);\n        return true;\n      },\n\n      get: (\n        target: CRDTObject,\n        keyOrMethod: Extract<keyof JSONObject<any>, 'string'>,\n      ): any => {\n        if (logger.isEnabled(LogLevel.Trivial)) {\n          logger.trivial(`obj[${keyOrMethod}]`);\n        }\n\n        if (keyOrMethod === 'getID') {\n          return (): TimeTicket => {\n            return target.getCreatedAt();\n          };\n        } else if (keyOrMethod === 'toJSON' || keyOrMethod === 'toString') {\n          return (): string => {\n            return target.toJSON();\n          };\n        } else if (keyOrMethod === 'toJS') {\n          return (): object => {\n            return target.toJS();\n          };\n        } else if (keyOrMethod === 'toJSForTest') {\n          return (): Devtools.JSONElement => {\n            return target.toJSForTest();\n          };\n        }\n\n        return toJSONElement(context, target.get(keyOrMethod));\n      },\n\n      ownKeys: (target: CRDTObject): Array<string> => {\n        return target.getKeys();\n      },\n\n      getOwnPropertyDescriptor: () => {\n        return {\n          enumerable: true,\n          configurable: true,\n        };\n      },\n\n      deleteProperty: (target: CRDTObject, key: string): boolean => {\n        if (logger.isEnabled(LogLevel.Trivial)) {\n          logger.trivial(`obj[${key}]`);\n        }\n\n        ObjectProxy.deleteInternal(context, target, key);\n        return true;\n      },\n    };\n  }\n\n  /**\n   * `setInternal` sets a new Object for the given key\n   */\n  public static setInternal(\n    context: ChangeContext,\n    target: CRDTObject,\n    key: string,\n    value: unknown,\n  ): void {\n    if (key.includes('.')) {\n      throw new YorkieError(\n        Code.InvalidObjectKey,\n        `key must not contain the '.'.`,\n      );\n    }\n\n    const createdAt = context.issueTimeTicket();\n    const element = buildCRDTElement(context, value, createdAt);\n    const removed = target.set(key, element, createdAt);\n    context.registerElement(element, target);\n    if (removed) {\n      context.registerRemovedElement(removed);\n    }\n    context.push(\n      SetOperation.create(\n        key,\n        element.deepcopy(),\n        target.getCreatedAt(),\n        createdAt,\n      ),\n    );\n  }\n\n  /**\n   * `buildObjectMembers` constructs an object where all values from the\n   * user-provided object are transformed into CRDTElements.\n   * This function takes an object and iterates through its values,\n   * converting each value into a corresponding CRDTElement.\n   */\n  public static buildObjectMembers(\n    context: ChangeContext,\n    value: object,\n  ): { [key: string]: CRDTElement } {\n    const members: { [key: string]: CRDTElement } = {};\n    for (const [k, v] of Object.entries(value)) {\n      if (k.includes('.')) {\n        throw new YorkieError(\n          Code.InvalidObjectKey,\n          `key must not contain the '.'.`,\n        );\n      }\n\n      const createdAt = context.issueTimeTicket();\n      const elem = buildCRDTElement(context, v, createdAt);\n      members[k] = elem;\n    }\n    return members;\n  }\n\n  /**\n   * `deleteInternal` deletes the value of the given key.\n   */\n  public static deleteInternal(\n    context: ChangeContext,\n    target: CRDTObject,\n    key: string,\n  ): void {\n    const ticket = context.issueTimeTicket();\n    const deleted = target.deleteByKey(key, ticket);\n    if (!deleted) {\n      return;\n    }\n\n    context.push(\n      RemoveOperation.create(\n        target.getCreatedAt(),\n        deleted.getCreatedAt(),\n        ticket,\n      ),\n    );\n    context.registerRemovedElement(deleted);\n  }\n\n  /**\n   * `getHandlers` gets handlers.\n   */\n  public getHandlers(): any {\n    return this.handlers;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, LogLevel } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { AddOperation } from '@yorkie-js-sdk/src/document/operation/add_operation';\nimport { MoveOperation } from '@yorkie-js-sdk/src/document/operation/move_operation';\nimport { RemoveOperation } from '@yorkie-js-sdk/src/document/operation/remove_operation';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport { Primitive } from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport {\n  JSONElement,\n  WrappedElement,\n  toWrappedElement,\n  toJSONElement,\n  buildCRDTElement,\n} from '@yorkie-js-sdk/src/document/json/element';\nimport * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `JSONArray` represents JSON array, but unlike regular JSON, it has time\n * tickets created by a logical clock to resolve conflicts.\n */\nexport type JSONArray<T> = {\n  /**\n   * `getID` returns the ID, `TimeTicket` of this Object.\n   */\n  getID?(): TimeTicket;\n\n  /**\n   * `getElementByID` returns the element for the given ID.\n   */\n  getElementByID?(createdAt: TimeTicket): WrappedElement<T>;\n\n  /**\n   * `getElementByIndex` returns the element for the given index.\n   */\n  getElementByIndex?(index: number): WrappedElement<T>;\n\n  /**\n   * `getLast` returns the last element of this array.\n   */\n  getLast?(): WrappedElement<T>;\n\n  /**\n   * `deleteByID` deletes the element of the given ID.\n   */\n  deleteByID?(createdAt: TimeTicket): WrappedElement<T>;\n\n  /**\n   * `insertBefore` inserts a value before the given next element.\n   */\n  insertBefore?(nextID: TimeTicket, value: any): WrappedElement<T>;\n\n  /**\n   * `insertAfter` inserts a value after the given previous element.\n   */\n  insertAfter?(prevID: TimeTicket, value: any): WrappedElement<T>;\n\n  /**\n   * `moveBefore` moves the element before the given next element.\n   */\n  moveBefore?(nextID: TimeTicket, id: TimeTicket): void;\n\n  /**\n   * `moveAfter` moves the element after the given previous element.\n   */\n  moveAfter?(prevID: TimeTicket, id: TimeTicket): void;\n\n  /**\n   * `moveFront` moves the element before the first element.\n   */\n  moveFront?(id: TimeTicket): void;\n\n  /**\n   * `moveLast` moves the element after the last element.\n   */\n  moveLast?(id: TimeTicket): void;\n\n  /**\n   * `toTestString` returns a String containing the meta data of the node\n   * for debugging purpose.\n   */\n  toTestString?(): string;\n\n  /**\n   * `toJSForTest` returns the JSON object of this array for debugging.\n   * @internal\n   */\n  toJSForTest?(): Devtools.JSONElement;\n} & Array<T>;\n\n/**\n * `createJSONArray` creates a new instance of JSONArray.\n */\nexport function createJSONArray(\n  context: ChangeContext,\n  target: CRDTArray,\n): JSONArray<WrappedElement> {\n  const arrayProxy = new ArrayProxy(context, target);\n  return new Proxy(target, arrayProxy.getHandlers()) as any;\n}\n\n/**\n * `isNumericString` checks if value is numeric string.\n */\nfunction isNumericString(val: any): boolean {\n  if (typeof val === 'string' || val instanceof String) {\n    return !isNaN(val as any);\n  }\n  return false;\n}\n\n/**\n * `isReadOnlyArrayMethod` checks if the method is a standard array read-only operation.\n */\nfunction isReadOnlyArrayMethod(method: string): boolean {\n  return [\n    'concat',\n    'entries',\n    'every',\n    'filter',\n    'find',\n    'findIndex',\n    'forEach',\n    'join',\n    'keys',\n    'map',\n    'reduce',\n    'reduceRight',\n    'slice',\n    'some',\n    'toLocaleString',\n    'toString',\n    'values',\n  ].includes(method);\n}\n\n/**\n * `ArrayProxy` is a proxy for Array.\n */\nexport class ArrayProxy {\n  private context: ChangeContext;\n  private handlers: any;\n  private array: CRDTArray;\n\n  constructor(context: ChangeContext, array: CRDTArray) {\n    this.context = context;\n    this.array = array;\n    this.handlers = {\n      get: (\n        target: CRDTArray,\n        method: keyof JSONArray<unknown>,\n        receiver: any,\n      ): any => {\n        if (method === 'getID') {\n          return (): TimeTicket => {\n            return target.getCreatedAt();\n          };\n        } else if (method === 'getElementByID') {\n          return (createdAt: TimeTicket): WrappedElement | undefined => {\n            const elem = target.getByID(createdAt);\n            if (!elem || elem.isRemoved()) {\n              return;\n            }\n            return toWrappedElement(context, elem);\n          };\n        } else if (method === 'getElementByIndex') {\n          return (index: number): WrappedElement | undefined => {\n            const elem = target.get(index);\n            return toWrappedElement(context, elem);\n          };\n        } else if (method === 'getLast') {\n          return (): WrappedElement | undefined => {\n            return toWrappedElement(context, target.getLast());\n          };\n        } else if (method === 'deleteByID') {\n          return (createdAt: TimeTicket): WrappedElement | undefined => {\n            const deleted = ArrayProxy.deleteInternalByID(\n              context,\n              target,\n              createdAt,\n            );\n            return toWrappedElement(context, deleted);\n          };\n        } else if (method === 'insertAfter') {\n          return (\n            prevID: TimeTicket,\n            value: any,\n          ): WrappedElement | undefined => {\n            const inserted = ArrayProxy.insertAfterInternal(\n              context,\n              target,\n              prevID,\n              value,\n            );\n            return toWrappedElement(context, inserted);\n          };\n        } else if (method === 'insertBefore') {\n          return (\n            nextID: TimeTicket,\n            value: any,\n          ): WrappedElement | undefined => {\n            const inserted = ArrayProxy.insertBeforeInternal(\n              context,\n              target,\n              nextID,\n              value,\n            );\n            return toWrappedElement(context, inserted);\n          };\n        } else if (method === 'moveBefore') {\n          return (nextID: TimeTicket, id: TimeTicket): void => {\n            ArrayProxy.moveBeforeInternal(context, target, nextID, id);\n          };\n          // JavaScript Native API\n        } else if (method === 'moveAfter') {\n          return (prevID: TimeTicket, id: TimeTicket): void => {\n            ArrayProxy.moveAfterInternal(context, target, prevID, id);\n          };\n        } else if (method === 'moveFront') {\n          return (id: TimeTicket): void => {\n            ArrayProxy.moveFrontInternal(context, target, id);\n          };\n        } else if (method === 'moveLast') {\n          return (id: TimeTicket): void => {\n            ArrayProxy.moveLastInternal(context, target, id);\n          };\n        } else if (isNumericString(method)) {\n          return toJSONElement(context, target.get(Number(method as string)));\n        } else if (method === 'push') {\n          return (value: any): number => {\n            return ArrayProxy.pushInternal(context, target, value);\n          };\n        } else if (method === 'splice') {\n          return (\n            start: number,\n            deleteCount?: number,\n            ...items: Array<any>\n          ): JSONArray<JSONElement> => {\n            return ArrayProxy.splice(\n              context,\n              target,\n              start,\n              deleteCount,\n              ...items,\n            );\n          };\n        } else if (method === 'length') {\n          return target.length;\n        } else if (typeof method === 'symbol' && method === Symbol.iterator) {\n          return ArrayProxy.iteratorInternal.bind(this, context, target);\n        } else if (method === 'includes') {\n          return (searchElement: JSONElement, fromIndex?: number): boolean => {\n            return ArrayProxy.includes(\n              context,\n              target,\n              searchElement,\n              fromIndex,\n            );\n          };\n        } else if (method === 'indexOf') {\n          return (searchElement: JSONElement, fromIndex?: number): number => {\n            return ArrayProxy.indexOf(\n              context,\n              target,\n              searchElement,\n              fromIndex,\n            );\n          };\n        } else if (method === 'lastIndexOf') {\n          return (searchElement: JSONElement, fromIndex?: number): number => {\n            return ArrayProxy.lastIndexOf(\n              context,\n              target,\n              searchElement,\n              fromIndex,\n            );\n          };\n        } else if (method === 'toJSForTest') {\n          return (): Devtools.JSONElement => {\n            return target.toJSForTest();\n          };\n        } else if (method === 'toTestString') {\n          return (): string => ArrayProxy.toTestString(target);\n        } else if (\n          typeof method === 'string' &&\n          isReadOnlyArrayMethod(method)\n        ) {\n          return (...args: any) => {\n            const arr = Array.from(target).map((elem) =>\n              toJSONElement(context, elem),\n            );\n            return Array.prototype[method as any].apply(arr, args);\n          };\n        }\n\n        // TODO we need to distinguish between the case we need to call default\n        // behavior and the case where we need to call an internal method\n        // throw new TypeError(`Unsupported method: ${String(method)}`);\n        return Reflect.get(target, method, receiver);\n      },\n\n      deleteProperty: (target: CRDTArray, key: string): boolean => {\n        if (logger.isEnabled(LogLevel.Trivial)) {\n          logger.trivial(`array[${key}]`);\n        }\n        ArrayProxy.deleteInternalByIndex(context, target, Number.parseInt(key));\n        return true;\n      },\n    };\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public static *iteratorInternal(\n    change: ChangeContext,\n    target: CRDTArray,\n  ): IterableIterator<WrappedElement> {\n    for (const elem of target) {\n      yield toWrappedElement(change, elem)!;\n    }\n  }\n\n  /**\n   * `buildArrayElements` constructs array elements based on the user-provided array.\n   */\n  public static buildArrayElements(\n    context: ChangeContext,\n    value: Array<unknown>,\n  ): Array<CRDTElement> {\n    const elements: Array<CRDTElement> = [];\n    for (const v of value) {\n      const createdAt = context.issueTimeTicket();\n      const elem = buildCRDTElement(context, v, createdAt);\n      elements.push(elem);\n    }\n    return elements;\n  }\n\n  /**\n   * `pushInternal` pushes the value to the target array.\n   */\n  public static pushInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    value: unknown,\n  ): number {\n    ArrayProxy.insertAfterInternal(\n      context,\n      target,\n      target.getLastCreatedAt(),\n      value,\n    );\n    return target.length;\n  }\n\n  /**\n   * `moveBeforeInternal` moves the given `createdAt` element\n   * after the previously created element.\n   */\n  public static moveBeforeInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    nextCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n  ): void {\n    const ticket = context.issueTimeTicket();\n    const prevCreatedAt = target.getPrevCreatedAt(nextCreatedAt);\n    target.moveAfter(prevCreatedAt, createdAt, ticket);\n    context.push(\n      MoveOperation.create(\n        target.getCreatedAt(),\n        prevCreatedAt,\n        createdAt,\n        ticket,\n      ),\n    );\n  }\n\n  /**\n   * `moveAfterInternal` moves the given `createdAt` element\n   * after the specific element.\n   */\n  public static moveAfterInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    prevCreatedAt: TimeTicket,\n    createdAt: TimeTicket,\n  ): void {\n    const ticket = context.issueTimeTicket();\n    target.moveAfter(prevCreatedAt, createdAt, ticket);\n    context.push(\n      MoveOperation.create(\n        target.getCreatedAt(),\n        prevCreatedAt,\n        createdAt,\n        ticket,\n      ),\n    );\n  }\n\n  /**\n   * `moveFrontInternal` moves the given `createdAt` element\n   * at the first of array.\n   */\n  public static moveFrontInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    createdAt: TimeTicket,\n  ): void {\n    const ticket = context.issueTimeTicket();\n    const head = target.getHead();\n    target.moveAfter(head.getCreatedAt(), createdAt, ticket);\n    context.push(\n      MoveOperation.create(\n        target.getCreatedAt(),\n        head.getCreatedAt(),\n        createdAt,\n        ticket,\n      ),\n    );\n  }\n\n  /**\n   * `moveLastInternal` moves the given `createdAt` element\n   * at the last of array.\n   */\n  public static moveLastInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    createdAt: TimeTicket,\n  ): void {\n    const ticket = context.issueTimeTicket();\n    const last = target.getLastCreatedAt();\n    target.moveAfter(last, createdAt, ticket);\n    context.push(\n      MoveOperation.create(target.getCreatedAt(), last, createdAt, ticket),\n    );\n  }\n\n  /**\n   * `insertAfterInternal` inserts the value after the previously created element.\n   */\n  public static insertAfterInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    prevCreatedAt: TimeTicket,\n    value: unknown,\n  ): CRDTElement {\n    const createdAt = context.issueTimeTicket();\n    const element = buildCRDTElement(context, value, createdAt);\n    target.insertAfter(prevCreatedAt, element);\n    context.registerElement(element, target);\n    context.push(\n      AddOperation.create(\n        target.getCreatedAt(),\n        prevCreatedAt,\n        element.deepcopy(),\n        createdAt,\n      ),\n    );\n    return element;\n  }\n\n  /**\n   * `insertBeforeInternal` inserts the value before the previously created element.\n   */\n  public static insertBeforeInternal(\n    context: ChangeContext,\n    target: CRDTArray,\n    nextCreatedAt: TimeTicket,\n    value: unknown,\n  ): CRDTElement {\n    return ArrayProxy.insertAfterInternal(\n      context,\n      target,\n      target.getPrevCreatedAt(nextCreatedAt),\n      value,\n    );\n  }\n\n  /**\n   * `deleteInternalByIndex` deletes target element of given index.\n   */\n  public static deleteInternalByIndex(\n    context: ChangeContext,\n    target: CRDTArray,\n    index: number,\n  ): CRDTElement | undefined {\n    const ticket = context.issueTimeTicket();\n    const deleted = target.deleteByIndex(index, ticket);\n    if (!deleted) {\n      return;\n    }\n\n    context.push(\n      RemoveOperation.create(\n        target.getCreatedAt(),\n        deleted.getCreatedAt(),\n        ticket,\n      ),\n    );\n    context.registerRemovedElement(deleted);\n    return deleted;\n  }\n\n  /**\n   * `deleteInternalByID` deletes the element of the given ID.\n   */\n  public static deleteInternalByID(\n    context: ChangeContext,\n    target: CRDTArray,\n    createdAt: TimeTicket,\n  ): CRDTElement {\n    const ticket = context.issueTimeTicket();\n    const deleted = target.delete(createdAt, ticket);\n    context.push(\n      RemoveOperation.create(\n        target.getCreatedAt(),\n        deleted.getCreatedAt(),\n        ticket,\n      ),\n    );\n    context.registerRemovedElement(deleted);\n    return deleted;\n  }\n\n  /**\n   * `splice` is a method to remove elements from the array.\n   */\n  public static splice(\n    context: ChangeContext,\n    target: CRDTArray,\n    start: number,\n    deleteCount?: number,\n    ...items: Array<any>\n  ): JSONArray<JSONElement> {\n    const length = target.length;\n    const from =\n      start >= 0 ? Math.min(start, length) : Math.max(length + start, 0);\n    const to =\n      deleteCount === undefined\n        ? length\n        : deleteCount < 0\n        ? from\n        : Math.min(from + deleteCount, length);\n    const removeds: JSONArray<JSONElement> = [];\n    for (let i = from; i < to; i++) {\n      const removed = ArrayProxy.deleteInternalByIndex(context, target, from);\n      if (removed) {\n        const removedElem = removed.deepcopy();\n        removedElem.setRemovedAt();\n        removeds.push(toJSONElement(context, removedElem)!);\n      }\n    }\n    if (items) {\n      let previousID =\n        from === 0 ? target.getHead().getID() : target.get(from - 1)!.getID();\n      for (const item of items) {\n        const newElem = ArrayProxy.insertAfterInternal(\n          context,\n          target,\n          previousID,\n          item,\n        );\n        previousID = newElem.getID();\n      }\n    }\n    return removeds;\n  }\n\n  /**\n   * `includes` returns true if the given element is in the array.\n   */\n  public static includes(\n    context: ChangeContext,\n    target: CRDTArray,\n    searchElement: JSONElement,\n    fromIndex?: number,\n  ): boolean {\n    const length = target.length;\n    const from =\n      fromIndex === undefined\n        ? 0\n        : fromIndex < 0\n        ? Math.max(fromIndex + length, 0)\n        : fromIndex;\n\n    if (from >= length) return false;\n\n    if (Primitive.isSupport(searchElement)) {\n      const arr = Array.from(target).map((elem) =>\n        toJSONElement(context, elem),\n      );\n      return arr.includes(searchElement, from);\n    }\n\n    for (let i = from; i < length; i++) {\n      if (\n        target.get(i)?.getID() === (searchElement as WrappedElement).getID!()\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * `indexOf` returns the index of the given element.\n   */\n  public static indexOf(\n    context: ChangeContext,\n    target: CRDTArray,\n    searchElement: JSONElement,\n    fromIndex?: number,\n  ): number {\n    const length = target.length;\n    const from =\n      fromIndex === undefined\n        ? 0\n        : fromIndex < 0\n        ? Math.max(fromIndex + length, 0)\n        : fromIndex;\n\n    if (from >= length) return -1;\n\n    if (Primitive.isSupport(searchElement)) {\n      const arr = Array.from(target).map((elem) =>\n        toJSONElement(context, elem),\n      );\n      return arr.indexOf(searchElement, from);\n    }\n\n    for (let i = from; i < length; i++) {\n      if (\n        target.get(i)?.getID() === (searchElement as WrappedElement).getID!()\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * `lastIndexOf` returns the last index of the given element.\n   */\n  public static lastIndexOf(\n    context: ChangeContext,\n    target: CRDTArray,\n    searchElement: JSONElement,\n    fromIndex?: number,\n  ): number {\n    const length = target.length;\n    const from =\n      fromIndex === undefined || fromIndex >= length\n        ? length - 1\n        : fromIndex < 0\n        ? fromIndex + length\n        : fromIndex;\n\n    if (from < 0) return -1;\n\n    if (Primitive.isSupport(searchElement)) {\n      const arr = Array.from(target).map((elem) =>\n        toJSONElement(context, elem),\n      );\n      return arr.lastIndexOf(searchElement, from);\n    }\n\n    for (let i = from; i > 0; i--) {\n      if (\n        target.get(i)?.getID() === (searchElement as WrappedElement).getID!()\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  /**\n   * `toTestString` returns a String containing the meta data of the node\n   * for debugging purpose.\n   */\n  public static toTestString(target: CRDTArray): string {\n    return target.toTestString();\n  }\n\n  /**\n   * `getHandlers` gets handlers.\n   */\n  public getHandlers(): any {\n    return this.handlers;\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, LogLevel } from '@yorkie-js-sdk/src/util/logger';\nimport { Indexable } from '@yorkie-js-sdk/src/document/document';\nimport {\n  TimeTicket,\n  TimeTicketStruct,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport {\n  RGATreeSplitPos,\n  RGATreeSplitPosRange,\n} from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { CRDTText, TextValueType } from '@yorkie-js-sdk/src/document/crdt/text';\nimport { EditOperation } from '@yorkie-js-sdk/src/document/operation/edit_operation';\nimport { StyleOperation } from '@yorkie-js-sdk/src/document/operation/style_operation';\nimport { stringifyObjectValues } from '@yorkie-js-sdk/src/util/object';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `TextPosStruct` represents the structure of RGATreeSplitPos.\n * It is used to serialize and deserialize the RGATreeSplitPos.\n */\nexport type TextPosStruct = {\n  id: { createdAt: TimeTicketStruct; offset: number };\n  relativeOffset: number;\n};\n\n/**\n * `TextPosStructRange` represents the structure of RGATreeSplitPosRange.\n * It is used to serialize and deserialize the RGATreeSplitPosRange.\n */\nexport type TextPosStructRange = [TextPosStruct, TextPosStruct];\n\n/**\n * `Text` is an extended data type for the contents of a text editor.\n */\nexport class Text<A extends Indexable = Indexable> {\n  private context?: ChangeContext;\n  private text?: CRDTText<A>;\n\n  constructor(context?: ChangeContext, text?: CRDTText<A>) {\n    this.context = context;\n    this.text = text;\n  }\n\n  /**\n   * `initialize` initialize this text with context and internal text.\n   * @internal\n   */\n  public initialize(context: ChangeContext, text: CRDTText<A>): void {\n    this.context = context;\n    this.text = text;\n  }\n\n  /**\n   * `getID` returns the ID of this text.\n   */\n  public getID(): TimeTicket {\n    return this.text!.getID();\n  }\n\n  /**\n   * `edit` edits this text with the given content.\n   */\n  edit(\n    fromIdx: number,\n    toIdx: number,\n    content: string,\n    attributes?: A,\n  ): [number, number] | undefined {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      return;\n    }\n\n    if (fromIdx > toIdx) {\n      logger.fatal('from should be less than or equal to to');\n      return;\n    }\n\n    const range = this.text.indexRangeToPosRange(fromIdx, toIdx);\n    if (logger.isEnabled(LogLevel.Debug)) {\n      logger.debug(\n        `EDIT: f:${fromIdx}->${range[0].toTestString()}, t:${toIdx}->${range[1].toTestString()} c:${content}`,\n      );\n    }\n    const attrs = attributes ? stringifyObjectValues(attributes) : undefined;\n    const ticket = this.context.issueTimeTicket();\n    const [maxCreatedAtMapByActor, , pairs, rangeAfterEdit] = this.text.edit(\n      range,\n      content,\n      ticket,\n      attrs,\n    );\n\n    for (const pair of pairs) {\n      this.context!.registerGCPair(pair);\n    }\n\n    this.context.push(\n      new EditOperation(\n        this.text.getCreatedAt(),\n        range[0],\n        range[1],\n        maxCreatedAtMapByActor,\n        content,\n        attrs ? new Map(Object.entries(attrs)) : new Map(),\n        ticket,\n      ),\n    );\n\n    return this.text.findIndexesFromRange(rangeAfterEdit);\n  }\n\n  /**\n   * `delete` deletes the text in the given range.\n   */\n  delete(fromIdx: number, toIdx: number): [number, number] | undefined {\n    return this.edit(fromIdx, toIdx, '');\n  }\n\n  /**\n   * `empty` makes the text empty.\n   */\n  empty(): [number, number] | undefined {\n    return this.edit(0, this.length, '');\n  }\n\n  /**\n   * `setStyle` styles this text with the given attributes.\n   */\n  setStyle(fromIdx: number, toIdx: number, attributes: A): boolean {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      return false;\n    }\n\n    if (fromIdx > toIdx) {\n      logger.fatal('from should be less than or equal to to');\n      return false;\n    }\n\n    const range = this.text.indexRangeToPosRange(fromIdx, toIdx);\n    if (logger.isEnabled(LogLevel.Debug)) {\n      logger.debug(\n        `STYL: f:${fromIdx}->${range[0].toTestString()}, t:${toIdx}->${range[1].toTestString()} a:${JSON.stringify(\n          attributes,\n        )}`,\n      );\n    }\n\n    const attrs = stringifyObjectValues(attributes);\n    const ticket = this.context.issueTimeTicket();\n    const [maxCreatedAtMapByActor, pairs] = this.text.setStyle(\n      range,\n      attrs,\n      ticket,\n    );\n\n    for (const pair of pairs) {\n      this.context!.registerGCPair(pair);\n    }\n\n    this.context.push(\n      new StyleOperation(\n        this.text.getCreatedAt(),\n        range[0],\n        range[1],\n        maxCreatedAtMapByActor,\n        new Map(Object.entries(attrs)),\n        ticket,\n      ),\n    );\n\n    return true;\n  }\n\n  /**\n   * `indexRangeToPosRange` returns TextRangeStruct of the given index range.\n   */\n  indexRangeToPosRange(range: [number, number]): TextPosStructRange {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const textRange = this.text.indexRangeToPosRange(range[0], range[1]);\n    return [textRange[0].toStruct(), textRange[1].toStruct()];\n  }\n\n  /**\n   * `posRangeToIndexRange` returns indexes of the given TextRangeStruct.\n   */\n  posRangeToIndexRange(range: TextPosStructRange): [number, number] {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const textRange = this.text.findIndexesFromRange([\n      RGATreeSplitPos.fromStruct(range[0]),\n      RGATreeSplitPos.fromStruct(range[1]),\n    ]);\n    return [textRange[0], textRange[1]];\n  }\n\n  /**\n   * `toTestString` returns a String containing the meta data of the node\n   * for debugging purpose.\n   */\n  toTestString(): string {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    return this.text.toTestString();\n  }\n\n  /**\n   * `values` returns values of this text.\n   */\n  values(): Array<TextValueType<A>> {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    return this.text.values();\n  }\n\n  /**\n   * `length` returns size of RGATreeList.\n   */\n  public get length(): number {\n    return this.text!.length;\n  }\n\n  /**\n   * `checkWeight` returns false when there is an incorrect weight node.\n   * for debugging purpose.\n   */\n  public checkWeight(): boolean {\n    return this.text!.checkWeight();\n  }\n\n  /**\n   * `toString` returns the string representation of this text.\n   */\n  toString(): string {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      return '';\n    }\n\n    return this.text.toString();\n  }\n\n  /**\n   * `toJSON` returns the JSON string of this tree.\n   */\n  public toJSON(): string {\n    if (!this.context || !this.text) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.text.toJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   * @internal\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    if (!this.context || !this.text) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.text.toJSForTest();\n  }\n\n  /**\n   * `createRangeForTest` returns pair of RGATreeSplitNodePos of the given indexes\n   * for testing purpose.\n   */\n  createRangeForTest(fromIdx: number, toIdx: number): RGATreeSplitPosRange {\n    if (!this.context || !this.text) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    return this.text.indexRangeToPosRange(fromIdx, toIdx);\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport { Primitive } from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport { IncreaseOperation } from '@yorkie-js-sdk/src/document/operation/increase_operation';\nimport Long from 'long';\nimport {\n  CounterType,\n  CRDTCounter,\n} from '@yorkie-js-sdk/src/document/crdt/counter';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `Counter` is a custom data type that is used to counter.\n */\nexport class Counter {\n  private valueType: CounterType;\n  private value: number | Long;\n  private context?: ChangeContext;\n  private counter?: CRDTCounter;\n\n  constructor(valueType: CounterType, value: number | Long) {\n    this.valueType = valueType;\n    this.value = value;\n  }\n\n  /**\n   * `initialize` initialize this text with context and internal text.\n   * @internal\n   */\n  public initialize(context: ChangeContext, counter: CRDTCounter): void {\n    this.valueType = counter.getValueType();\n    this.context = context;\n    this.counter = counter;\n    this.value = counter.getValue();\n  }\n\n  /**\n   * `getID` returns the ID of this text.\n   */\n  public getID(): TimeTicket {\n    return this.counter!.getID();\n  }\n\n  /**\n   * `getValue` returns the value of this counter;\n   * @internal\n   */\n  public getValue(): number | Long {\n    return this.value;\n  }\n\n  /**\n   * `getValueType` returns the value type of this counter.\n   */\n  public getValueType(): CounterType {\n    return this.valueType;\n  }\n\n  /**\n   * `increase` increases numeric data.\n   */\n  public increase(v: number | Long): Counter {\n    if (!this.context || !this.counter) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const ticket = this.context.issueTimeTicket();\n    const value = Primitive.of(v, ticket);\n    if (!value.isNumericType()) {\n      throw new TypeError(\n        `Unsupported type of value: ${typeof value.getValue()}`,\n      );\n    }\n\n    this.counter.increase(value);\n    this.context.push(\n      IncreaseOperation.create(this.counter.getCreatedAt(), value, ticket),\n    );\n\n    return this;\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   * @internal\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    if (!this.context || !this.counter) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.counter.toJSForTest();\n  }\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport {\n  CRDTTree,\n  CRDTTreeNodeID,\n  CRDTTreeNode,\n  CRDTTreePos,\n} from '@yorkie-js-sdk/src/document/crdt/tree';\n\nimport {\n  IndexTree,\n  DefaultRootType,\n  DefaultTextType,\n} from '@yorkie-js-sdk/src/util/index_tree';\nimport { TreeEditOperation } from '@yorkie-js-sdk/src/document/operation/tree_edit_operation';\nimport { isEmpty, stringifyObjectValues } from '@yorkie-js-sdk/src/util/object';\nimport { RHT } from '../crdt/rht';\nimport { TreeStyleOperation } from '../operation/tree_style_operation';\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport type {\n  ElementNode,\n  TextNode,\n  TreeNode,\n  TreeChange,\n  TreeChangeType,\n  TreePosStructRange,\n  CRDTTreeNodeIDStruct,\n} from '@yorkie-js-sdk/src/document/crdt/tree';\nimport type * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * NOTE(hackerwins): In normal case, we should define the following types in\n * json package, because they are directly used by the user. However, we define\n * them in crdt package to avoid circular dependency between json and crdt.\n */\nexport {\n  TreeNode,\n  ElementNode,\n  TextNode,\n  TreeChange,\n  TreeChangeType,\n  TreePosStructRange,\n  CRDTTreeNodeIDStruct,\n};\n\n/**\n * `buildDescendants` builds descendants of the given tree node.\n */\nfunction buildDescendants(\n  treeNode: TreeNode,\n  parent: CRDTTreeNode,\n  context: ChangeContext,\n) {\n  const { type } = treeNode;\n  const ticket = context.issueTimeTicket();\n\n  if (type === DefaultTextType) {\n    validateTextNode(treeNode as TextNode);\n    const { value } = treeNode as TextNode;\n    const textNode = CRDTTreeNode.create(\n      CRDTTreeNodeID.of(ticket, 0),\n      type,\n      value,\n    );\n\n    parent.append(textNode);\n  } else {\n    const { children = [] } = treeNode as ElementNode;\n    let { attributes } = treeNode as ElementNode;\n    let attrs;\n\n    if (typeof attributes === 'object' && !isEmpty(attributes)) {\n      attributes = stringifyObjectValues(attributes);\n      attrs = new RHT();\n\n      for (const [key, value] of Object.entries(attributes)) {\n        attrs.set(key, value, ticket);\n      }\n    }\n    const elementNode = CRDTTreeNode.create(\n      CRDTTreeNodeID.of(ticket, 0),\n      type,\n      undefined,\n      attrs,\n    );\n\n    parent.append(elementNode);\n\n    for (const child of children) {\n      buildDescendants(child, elementNode, context);\n    }\n  }\n}\n\n/**\n * createCRDTTreeNode returns CRDTTreeNode by given TreeNode.\n */\nfunction createCRDTTreeNode(context: ChangeContext, content: TreeNode) {\n  const { type } = content;\n  const ticket = context.issueTimeTicket();\n\n  let root;\n  if (content.type === DefaultTextType) {\n    const { value } = content as TextNode;\n    root = CRDTTreeNode.create(CRDTTreeNodeID.of(ticket, 0), type, value);\n  } else if (content) {\n    const { children = [] } = content as ElementNode;\n    let { attributes } = content as ElementNode;\n    let attrs;\n\n    if (typeof attributes === 'object' && !isEmpty(attributes)) {\n      attributes = stringifyObjectValues(attributes);\n      attrs = new RHT();\n\n      for (const [key, value] of Object.entries(attributes)) {\n        attrs.set(key, value, ticket);\n      }\n    }\n\n    root = CRDTTreeNode.create(\n      CRDTTreeNodeID.of(context.issueTimeTicket(), 0),\n      type,\n      undefined,\n      attrs,\n    );\n\n    for (const child of children) {\n      buildDescendants(child, root, context);\n    }\n  }\n\n  return root;\n}\n\n/**\n * `validateTextNode` ensures that a text node has a non-empty string value.\n */\nfunction validateTextNode(textNode: TextNode): boolean {\n  if (!textNode.value.length) {\n    throw new Error('text node cannot have empty value');\n  }\n\n  return true;\n}\n\n/**\n * `validateTreeNodes` ensures that treeNodes consists of only one type.\n */\nfunction validateTreeNodes(treeNodes: Array<TreeNode>): boolean {\n  if (!treeNodes.length) {\n    return true;\n  }\n\n  const firstTreeNodeType = treeNodes[0].type;\n  if (firstTreeNodeType === DefaultTextType) {\n    for (const treeNode of treeNodes) {\n      const { type } = treeNode;\n      if (type !== DefaultTextType) {\n        throw new Error('element node and text node cannot be passed together');\n      }\n      validateTextNode(treeNode as TextNode);\n    }\n  } else {\n    for (const treeNode of treeNodes) {\n      const { type } = treeNode;\n      if (type === DefaultTextType) {\n        throw new Error('element node and text node cannot be passed together');\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * `Tree` is a CRDT-based tree structure that is used to represent the document\n * tree of text-based editor such as ProseMirror.\n */\nexport class Tree {\n  private initialRoot?: ElementNode;\n  private context?: ChangeContext;\n  private tree?: CRDTTree;\n\n  constructor(initialRoot?: ElementNode) {\n    this.initialRoot = initialRoot;\n  }\n\n  /**\n   * `initialize` initialize this tree with context and internal tree.\n   * @internal\n   */\n  public initialize(context: ChangeContext, tree: CRDTTree): void {\n    this.context = context;\n    this.tree = tree;\n  }\n\n  /**\n   * `getID` returns the ID of this tree.\n   */\n  public getID(): TimeTicket {\n    return this.tree!.getID();\n  }\n\n  /**\n   * `buildRoot` builds the root of this tree with the given initial root\n   * which set by the user.\n   */\n  public buildRoot(context: ChangeContext): CRDTTreeNode {\n    if (!this.initialRoot) {\n      return CRDTTreeNode.create(\n        CRDTTreeNodeID.of(context.issueTimeTicket(), 0),\n        DefaultRootType,\n      );\n    }\n\n    // TODO(hackerwins): Need to use the ticket of operation of creating tree.\n    const root = CRDTTreeNode.create(\n      CRDTTreeNodeID.of(context.issueTimeTicket(), 0),\n      this.initialRoot.type,\n    );\n\n    for (const child of this.initialRoot.children) {\n      buildDescendants(child, root, context);\n    }\n\n    return root;\n  }\n\n  /**\n   * `getSize` returns the size of this tree.\n   */\n  public getSize(): number {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.getSize();\n  }\n\n  /**\n   * `getNodeSize` returns the node size of this tree.\n   */\n  public getNodeSize(): number {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.getNodeSize();\n  }\n\n  /**\n   * `getIndexTree` returns the index tree of this tree.\n   */\n  public getIndexTree(): IndexTree<CRDTTreeNode> {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.getIndexTree();\n  }\n\n  /**\n   * `styleByPath` sets the attributes to the elements of the given path.\n   */\n  public styleByPath(path: Array<number>, attributes: { [key: string]: any }) {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    if (!path.length) {\n      throw new Error('path should not be empty');\n    }\n    const [fromPos, toPos] = this.tree.pathToPosRange(path);\n    const ticket = this.context.issueTimeTicket();\n    const attrs = attributes ? stringifyObjectValues(attributes) : undefined;\n\n    const [maxCreationMapByActor] = this.tree!.style(\n      [fromPos, toPos],\n      attrs,\n      ticket,\n    );\n\n    this.context.push(\n      TreeStyleOperation.create(\n        this.tree.getCreatedAt(),\n        fromPos,\n        toPos,\n        maxCreationMapByActor,\n        attrs ? new Map(Object.entries(attrs)) : new Map(),\n        ticket,\n      ),\n    );\n  }\n\n  /**\n   * `style` sets the attributes to the elements of the given range.\n   */\n  public style(\n    fromIdx: number,\n    toIdx: number,\n    attributes: { [key: string]: any },\n  ) {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    if (fromIdx > toIdx) {\n      throw new Error('from should be less than or equal to to');\n    }\n\n    const fromPos = this.tree.findPos(fromIdx);\n    const toPos = this.tree.findPos(toIdx);\n    const ticket = this.context.issueTimeTicket();\n    const attrs = attributes ? stringifyObjectValues(attributes) : undefined;\n\n    const [maxCreationMapByActor, pairs] = this.tree!.style(\n      [fromPos, toPos],\n      attrs,\n      ticket,\n    );\n\n    for (const pair of pairs) {\n      this.context!.registerGCPair(pair);\n    }\n\n    this.context.push(\n      TreeStyleOperation.create(\n        this.tree.getCreatedAt(),\n        fromPos,\n        toPos,\n        maxCreationMapByActor,\n        attrs ? new Map(Object.entries(attrs)) : new Map(),\n        ticket,\n      ),\n    );\n  }\n\n  /**\n   * `removeStyle` removes the attributes to the elements of the given range.\n   */\n  public removeStyle(\n    fromIdx: number,\n    toIdx: number,\n    attributesToRemove: Array<string>,\n  ) {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    if (fromIdx > toIdx) {\n      throw new Error('from should be less than or equal to to');\n    }\n\n    const fromPos = this.tree.findPos(fromIdx);\n    const toPos = this.tree.findPos(toIdx);\n    const ticket = this.context.issueTimeTicket();\n\n    const [maxCreationMapByActor, pairs] = this.tree!.removeStyle(\n      [fromPos, toPos],\n      attributesToRemove,\n      ticket,\n    );\n\n    for (const pair of pairs) {\n      this.context!.registerGCPair(pair);\n    }\n\n    this.context.push(\n      TreeStyleOperation.createTreeRemoveStyleOperation(\n        this.tree.getCreatedAt(),\n        fromPos,\n        toPos,\n        maxCreationMapByActor,\n        attributesToRemove,\n        ticket,\n      ),\n    );\n  }\n\n  private editInternal(\n    fromPos: CRDTTreePos,\n    toPos: CRDTTreePos,\n    contents: Array<TreeNode>,\n    splitLevel = 0,\n  ): boolean {\n    if (contents.length !== 0 && contents[0]) {\n      validateTreeNodes(contents);\n      if (contents[0].type !== DefaultTextType) {\n        for (const content of contents) {\n          const { children = [] } = content as ElementNode;\n          validateTreeNodes(children);\n        }\n      }\n    }\n\n    const ticket = this.context!.getLastTimeTicket();\n    let crdtNodes = new Array<CRDTTreeNode>();\n\n    if (contents[0]?.type === DefaultTextType) {\n      let compVal = '';\n      for (const content of contents) {\n        const { value } = content as TextNode;\n        compVal += value;\n      }\n      crdtNodes.push(\n        CRDTTreeNode.create(\n          CRDTTreeNodeID.of(this.context!.issueTimeTicket(), 0),\n          DefaultTextType,\n          compVal,\n        ),\n      );\n    } else {\n      crdtNodes = contents\n        .map((content) => content && createCRDTTreeNode(this.context!, content))\n        .filter((a) => a) as Array<CRDTTreeNode>;\n    }\n\n    const [, pairs, maxCreatedAtMapByActor] = this.tree!.edit(\n      [fromPos, toPos],\n      crdtNodes.length\n        ? crdtNodes.map((crdtNode) => crdtNode?.deepcopy())\n        : undefined,\n      splitLevel,\n      ticket,\n      () => this.context!.issueTimeTicket(),\n    );\n\n    for (const pair of pairs) {\n      this.context!.registerGCPair(pair);\n    }\n\n    this.context!.push(\n      TreeEditOperation.create(\n        this.tree!.getCreatedAt(),\n        fromPos,\n        toPos,\n        crdtNodes.length ? crdtNodes : undefined,\n        splitLevel,\n        maxCreatedAtMapByActor,\n        ticket,\n      ),\n    );\n\n    return true;\n  }\n\n  /**\n   * `editByPath` edits this tree with the given node and path.\n   */\n  public editByPath(\n    fromPath: Array<number>,\n    toPath: Array<number>,\n    content?: TreeNode,\n    splitLevel = 0,\n  ): boolean {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n    if (fromPath.length !== toPath.length) {\n      throw new Error('path length should be equal');\n    }\n    if (!fromPath.length || !toPath.length) {\n      throw new Error('path should not be empty');\n    }\n\n    const fromPos = this.tree.pathToPos(fromPath);\n    const toPos = this.tree.pathToPos(toPath);\n\n    return this.editInternal(\n      fromPos,\n      toPos,\n      content ? [content] : [],\n      splitLevel,\n    );\n  }\n\n  /**\n   * `editBulkByPath` edits this tree with the given node and path.\n   */\n  public editBulkByPath(\n    fromPath: Array<number>,\n    toPath: Array<number>,\n    contents: Array<TreeNode>,\n    splitLevel = 0,\n  ): boolean {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n    if (fromPath.length !== toPath.length) {\n      throw new Error('path length should be equal');\n    }\n    if (!fromPath.length || !toPath.length) {\n      throw new Error('path should not be empty');\n    }\n\n    const fromPos = this.tree.pathToPos(fromPath);\n    const toPos = this.tree.pathToPos(toPath);\n\n    return this.editInternal(fromPos, toPos, contents, splitLevel);\n  }\n\n  /**\n   * `edit` edits this tree with the given nodes.\n   */\n  public edit(\n    fromIdx: number,\n    toIdx: number,\n    content?: TreeNode,\n    splitLevel = 0,\n  ): boolean {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n    if (fromIdx > toIdx) {\n      throw new Error('from should be less than or equal to to');\n    }\n\n    const fromPos = this.tree.findPos(fromIdx);\n    const toPos = this.tree.findPos(toIdx);\n\n    return this.editInternal(\n      fromPos,\n      toPos,\n      content ? [content] : [],\n      splitLevel,\n    );\n  }\n\n  /**\n   * `editBulk` edits this tree with the given nodes.\n   */\n  public editBulk(\n    fromIdx: number,\n    toIdx: number,\n    contents: Array<TreeNode>,\n    splitLevel = 0,\n  ): boolean {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n    if (fromIdx > toIdx) {\n      throw new Error('from should be less than or equal to to');\n    }\n\n    const fromPos = this.tree.findPos(fromIdx);\n    const toPos = this.tree.findPos(toIdx);\n\n    return this.editInternal(fromPos, toPos, contents, splitLevel);\n  }\n\n  /**\n   * `toXML` returns the XML string of this tree.\n   */\n  public toXML(): string {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.toXML();\n  }\n\n  /**\n   * `toJSON` returns the JSON string of this tree.\n   */\n  public toJSON(): string {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.toJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   * @internal\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.toJSForTest();\n  }\n\n  /**\n   * `toJSInfoForTest` returns detailed TreeNode information for use in Devtools.\n   *\n   * @internal\n   */\n  public toJSInfoForTest(): Devtools.TreeNodeInfo {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.toJSInfoForTest();\n  }\n\n  /**\n   * `getRootTreeNode` returns TreeNode of this tree.\n   */\n  public getRootTreeNode() {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.getRootTreeNode();\n  }\n\n  /**\n   * `indexToPath` returns the path of the given index.\n   */\n  public indexToPath(index: number): Array<number> {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.indexToPath(index);\n  }\n\n  /**\n   * `pathToIndex` returns the index of given path.\n   */\n  public pathToIndex(path: Array<number>): number {\n    if (!this.context || !this.tree) {\n      throw new Error('it is not initialized yet');\n    }\n\n    return this.tree.pathToIndex(path);\n  }\n\n  /**\n   * `pathRangeToPosRange` converts the path range into the position range.\n   */\n  pathRangeToPosRange(\n    range: [Array<number>, Array<number>],\n  ): TreePosStructRange {\n    if (!this.context || !this.tree) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const indexRange: [number, number] = [\n      this.tree.pathToIndex(range[0]),\n      this.tree.pathToIndex(range[1]),\n    ];\n    const posRange = this.tree.indexRangeToPosRange(indexRange);\n    return [posRange[0].toStruct(), posRange[1].toStruct()];\n  }\n\n  /**\n   * `indexRangeToPosRange` converts the index range into the position range.\n   */\n  indexRangeToPosRange(range: [number, number]): TreePosStructRange {\n    if (!this.context || !this.tree) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    return this.tree.indexRangeToPosStructRange(range);\n  }\n\n  /**\n   * `posRangeToIndexRange` converts the position range into the index range.\n   */\n  posRangeToIndexRange(range: TreePosStructRange): [number, number] {\n    if (!this.context || !this.tree) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const posRange: [CRDTTreePos, CRDTTreePos] = [\n      CRDTTreePos.fromStruct(range[0]),\n      CRDTTreePos.fromStruct(range[1]),\n    ];\n\n    return this.tree.posRangeToIndexRange(posRange);\n  }\n\n  /**\n   * `posRangeToPathRange` converts the position range into the path range.\n   */\n  posRangeToPathRange(\n    range: TreePosStructRange,\n  ): [Array<number>, Array<number>] {\n    if (!this.context || !this.tree) {\n      logger.fatal('it is not initialized yet');\n      // @ts-ignore\n      return;\n    }\n\n    const posRange: [CRDTTreePos, CRDTTreePos] = [\n      CRDTTreePos.fromStruct(range[0]),\n      CRDTTreePos.fromStruct(range[1]),\n    ];\n\n    return this.tree.posRangeToPathRange(posRange);\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport { CRDTElement } from '@yorkie-js-sdk/src/document/crdt/element';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport { CRDTArray } from '@yorkie-js-sdk/src/document/crdt/array';\nimport {\n  Primitive,\n  PrimitiveValue,\n} from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport { CRDTText } from '@yorkie-js-sdk/src/document/crdt/text';\nimport {\n  CounterType,\n  CRDTCounter,\n} from '@yorkie-js-sdk/src/document/crdt/counter';\nimport { CRDTTree } from '@yorkie-js-sdk/src/document/crdt/tree';\nimport { RGATreeSplit } from '@yorkie-js-sdk/src/document/crdt/rga_tree_split';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\n\nimport {\n  JSONObject,\n  createJSONObject,\n  ObjectProxy,\n} from '@yorkie-js-sdk/src/document/json/object';\nimport {\n  JSONArray,\n  createJSONArray,\n  ArrayProxy,\n} from '@yorkie-js-sdk/src/document/json/array';\nimport { Text } from '@yorkie-js-sdk/src/document/json/text';\nimport { Counter } from '@yorkie-js-sdk/src/document/json/counter';\nimport { Tree } from '@yorkie-js-sdk/src/document/json/tree';\nimport { Indexable } from '../document';\n\n/**\n * `createJSON` create a new instance of JSONObject.\n */\nexport function createJSON<T>(\n  context: ChangeContext,\n  target: CRDTObject,\n): JSONObject<T> {\n  return createJSONObject(context, target);\n}\n\n/**\n * `WrappedElement` is a wrapper of JSONElement that provides `getID()`.\n */\nexport type WrappedElement<T = unknown, A extends Indexable = Indexable> =\n  | Primitive\n  | JSONObject<T>\n  | JSONArray<T>\n  | Text<A>\n  | Counter\n  | Tree;\n\n/**\n * `JSONElement` is a wrapper for `CRDTElement` that provides users with an\n * easy-to-use interface for manipulating `Document`s.\n */\nexport type JSONElement<T = unknown, A extends Indexable = Indexable> =\n  | PrimitiveValue\n  | JSONObject<T>\n  | JSONArray<T>\n  | Text<A>\n  | Counter\n  | Tree;\n\n/**\n * `LeafElement` is a leaf element of JSONElement.\n */\nexport type LeafElement = PrimitiveValue | Primitive | Text | Counter | Tree;\n\n/**\n * `BaseArray` is a base type of JSONArray.\n */\nexport type BaseArray<T> = JSONArray<T> | Array<T>;\n\nexport type BaseObject<T> = JSONObject<T> | Record<string, T>;\n\n/**\n * `toWrappedElement` converts the CRDT type to `WrappedElement`.\n */\nexport function toWrappedElement(\n  context: ChangeContext,\n  elem?: CRDTElement,\n): WrappedElement | undefined {\n  if (!elem) {\n    return;\n  } else if (elem instanceof Primitive) {\n    return elem;\n  } else if (elem instanceof CRDTObject) {\n    return createJSONObject(context, elem);\n  } else if (elem instanceof CRDTArray) {\n    return createJSONArray(context, elem);\n  } else if (elem instanceof CRDTText) {\n    return new Text(context, elem);\n  } else if (elem instanceof CRDTCounter) {\n    const counter = new Counter(CounterType.IntegerCnt, 0);\n    counter.initialize(context, elem);\n    return counter;\n  } else if (elem instanceof CRDTTree) {\n    const tree = new Tree();\n    tree.initialize(context, elem);\n    return tree;\n  }\n\n  throw new TypeError(`Unsupported type of element: ${typeof elem}`);\n}\n\n/**\n * `toJSONElement` converts the CRDT type to `JSONElement`.\n */\nexport function toJSONElement(\n  context: ChangeContext,\n  elem?: CRDTElement,\n): JSONElement | undefined {\n  const wrappedElement = toWrappedElement(context, elem);\n  if (wrappedElement instanceof Primitive) {\n    return wrappedElement.getValue();\n  }\n\n  return wrappedElement;\n}\n\n/**\n * `buildCRDTElement` constructs a CRDTElement from the given value.\n */\nexport function buildCRDTElement(\n  context: ChangeContext,\n  value: unknown,\n  createdAt: TimeTicket,\n): CRDTElement {\n  let element: CRDTElement;\n  if (Primitive.isSupport(value)) {\n    element = Primitive.of(value as PrimitiveValue, createdAt);\n  } else if (Array.isArray(value)) {\n    element = CRDTArray.create(\n      createdAt,\n      ArrayProxy.buildArrayElements(context, value),\n    );\n  } else if (typeof value === 'object') {\n    if (value instanceof Text) {\n      element = CRDTText.create(RGATreeSplit.create(), createdAt);\n      value.initialize(context, element as CRDTText);\n    } else if (value instanceof Counter) {\n      element = CRDTCounter.create(\n        value.getValueType(),\n        value.getValue(),\n        createdAt,\n      );\n      value.initialize(context, element as CRDTCounter);\n    } else if (value instanceof Tree) {\n      element = CRDTTree.create(value.buildRoot(context), createdAt);\n      value.initialize(context, element as CRDTTree);\n    } else {\n      element = CRDTObject.create(\n        createdAt,\n        ObjectProxy.buildObjectMembers(context, value!),\n      );\n    }\n  } else {\n    throw new TypeError(`Unsupported type of value: ${typeof value}`);\n  }\n  return element;\n}\n","/*\n * Copyright 2023 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Operation } from './operation/operation';\nimport { Indexable } from './document';\n\n/**\n * `HistoryOperation` is a type of history operation.\n */\nexport type HistoryOperation<P extends Indexable> =\n  | Operation\n  | {\n      type: 'presence';\n      value: Partial<P>;\n    };\n\n/**\n * `MaxUndoRedoStackDepth` is the maximum depth of undo/redo stack.\n */\nexport const MaxUndoRedoStackDepth = 50;\n\n/**\n * `History` is a class that stores the history of the document.\n */\nexport class History<P extends Indexable> {\n  private undoStack: Array<Array<HistoryOperation<P>>> = [];\n  private redoStack: Array<Array<HistoryOperation<P>>> = [];\n\n  /**\n   * `hasUndo` returns true if there are undo operations.\n   */\n  public hasUndo(): boolean {\n    return this.undoStack.length > 0;\n  }\n\n  /**\n   * `hasRedo` returns true if there are redo operations.\n   */\n  public hasRedo(): boolean {\n    return this.redoStack.length > 0;\n  }\n\n  /**\n   * `pushUndo` pushes new undo operations of a change to undo stack.\n   */\n  public pushUndo(undoOps: Array<HistoryOperation<P>>): void {\n    if (this.undoStack.length >= MaxUndoRedoStackDepth) {\n      this.undoStack.shift();\n    }\n    this.undoStack.push(undoOps);\n  }\n\n  /**\n   * `popUndo` pops the last undo operations of a change from undo stack.\n   */\n  public popUndo(): Array<HistoryOperation<P>> | undefined {\n    return this.undoStack.pop();\n  }\n\n  /**\n   * `pushRedo` pushes new redo operations of a change to redo stack.\n   */\n  public pushRedo(redoOps: Array<HistoryOperation<P>>): void {\n    if (this.redoStack.length >= MaxUndoRedoStackDepth) {\n      this.redoStack.shift();\n    }\n    this.redoStack.push(redoOps);\n  }\n\n  /**\n   * `popRedo` pops the last redo operations of a change from redo stack.\n   */\n  public popRedo(): Array<HistoryOperation<P>> | undefined {\n    return this.redoStack.pop();\n  }\n\n  /**\n   * `clearRedo` flushes remaining redo operations.\n   */\n  public clearRedo(): void {\n    this.redoStack = [];\n  }\n\n  /**\n   * `getUndoStackForTest` returns the undo stack for test.\n   */\n  public getUndoStackForTest(): Array<Array<HistoryOperation<P>>> {\n    return this.undoStack;\n  }\n\n  /**\n   * `getRedoStackForTest` returns the redo stack for test.\n   */\n  public getRedoStackForTest(): Array<Array<HistoryOperation<P>>> {\n    return this.redoStack;\n  }\n}\n","/*\n * Copyright 2024 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TransactionEvent } from '@yorkie-js-sdk/src/document/document';\n\n/**\n * `EventSourceDevPanel` is the name of the source representing messages\n *  from the Devtools panel.\n */\nexport const EventSourceDevPanel = 'yorkie-devtools-panel';\n\n/**\n * `EventSourceSDK` is the name of the source representing messages\n * from the SDK.\n */\nexport const EventSourceSDK = 'yorkie-devtools-sdk';\n\n/**\n * PanelToSDKMessage is a message sent from the Devtools panel to the SDK.\n */\nexport type PanelToSDKMessage =\n  /**\n   * Informs the SDK that the panel is available.\n   */\n  | { msg: 'devtools::connect' }\n\n  /**\n   * Informs the SDK that the panel is not available.\n   */\n  | { msg: 'devtools::disconnect' }\n\n  /**\n   * Informs the SDK that the panel is interested in receiving the \"event\" for the document,\n   * starting with the initial \"full sync\" event.\n   */\n  | {\n      msg: 'devtools::subscribe';\n      docKey: string;\n    };\n\n/**\n * Definition of all messages the SDK can send to the Devtools panel.\n */\nexport type SDKToPanelMessage =\n  /**\n   * Sent when the dev panel is already opened and listened,\n   * before the sdk is loaded. If the panel receives this message,\n   * it will replay its initial \"connect\" message.\n   */\n  | {\n      msg: 'refresh-devtools';\n    }\n  /**\n   * Sent when the document is available for the panel to watch.\n   */\n  | {\n      msg: 'doc::available';\n      docKey: string;\n    }\n  /**\n   * Sent initially, to synchronize the entire current state of the document.\n   */\n  | {\n      msg: 'doc::sync::full';\n      docKey: string;\n      events: Array<TransactionEvent>;\n    }\n  /**\n   * Sent whenever the document is changed.\n   */\n  | {\n      msg: 'doc::sync::partial';\n      docKey: string;\n      event: TransactionEvent;\n    };\n\nexport type FullPanelToSDKMessage = PanelToSDKMessage & {\n  source: 'yorkie-devtools-panel';\n};\n\nexport type FullSDKToPanelMessage = SDKToPanelMessage & {\n  source: 'yorkie-devtools-sdk';\n};\n","/*\n * Copyright 2024 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Document,\n  Indexable,\n  TransactionEvent,\n} from '@yorkie-js-sdk/src/yorkie';\nimport { DocEventType } from '@yorkie-js-sdk/src/document/document';\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport type * as DevTools from './protocol';\nimport { EventSourceDevPanel, EventSourceSDK } from './protocol';\n\ntype DevtoolsStatus = 'connected' | 'disconnected' | 'synced';\nlet devtoolsStatus: DevtoolsStatus = 'disconnected';\nconst unsubsByDocKey = new Map<string, Array<() => void>>();\n\n/**\n * `transactionEventsByDocKey` stores all events in the document for replaying\n * (time-traveling feature) in Devtools. Later, external storage such as\n * IndexedDB will be used.\n */\nconst transactionEventsByDocKey = new Map<string, Array<TransactionEvent>>();\ndeclare global {\n  interface Window {\n    transactionEventsByDocKey: Map<string, Array<TransactionEvent>>;\n  }\n}\nif (typeof window !== 'undefined') {\n  window.transactionEventsByDocKey = transactionEventsByDocKey;\n}\n\n/**\n * `sendToPanel` sends a message to the devtools panel.\n */\nfunction sendToPanel(\n  message: DevTools.SDKToPanelMessage,\n  options?: { force: boolean },\n): void {\n  if (!(options?.force || devtoolsStatus !== 'disconnected')) {\n    return;\n  }\n\n  window.postMessage(\n    {\n      source: EventSourceSDK,\n      ...message,\n    },\n    '*',\n  );\n}\n\n/**\n * `setupDevtools` sets up the devtools integration. It sends messages to the\n * devtools panel when a document is available, when a document is subscribed,\n * and when a document is changed.\n */\nexport function setupDevtools<T, P extends Indexable>(\n  doc: Document<T, P>,\n): void {\n  if (\n    !doc.isEnableDevtools() ||\n    typeof window === 'undefined' ||\n    unsubsByDocKey.has(doc.getKey())\n  ) {\n    return;\n  }\n\n  transactionEventsByDocKey.set(doc.getKey(), []);\n  const unsub = doc.subscribe('all', (event) => {\n    if (\n      event.some(\n        (docEvent) =>\n          docEvent.type !== DocEventType.StatusChanged &&\n          docEvent.type !== DocEventType.Snapshot &&\n          docEvent.type !== DocEventType.LocalChange &&\n          docEvent.type !== DocEventType.RemoteChange &&\n          docEvent.type !== DocEventType.Initialized &&\n          docEvent.type !== DocEventType.Watched &&\n          docEvent.type !== DocEventType.Unwatched &&\n          docEvent.type !== DocEventType.PresenceChanged,\n      )\n    ) {\n      return;\n    }\n\n    transactionEventsByDocKey.get(doc.getKey())!.push(event);\n    if (devtoolsStatus === 'synced') {\n      sendToPanel({\n        msg: 'doc::sync::partial',\n        docKey: doc.getKey(),\n        event,\n      });\n    }\n  });\n  // TODO(chacha912): Cancel the subscription when the document is removed.\n  unsubsByDocKey.set(doc.getKey(), [unsub]);\n\n  // NOTE(chacha912): Send initial message, in case the devtool panel is already open.\n  sendToPanel(\n    {\n      msg: 'refresh-devtools',\n    },\n    { force: true },\n  );\n\n  // TODO(hackerwins): We need to ensure that this event listener should be\n  // removed later.\n  window.addEventListener(\n    'message',\n    (event: MessageEvent<DevTools.FullPanelToSDKMessage>) => {\n      if (event.data?.source !== EventSourceDevPanel) {\n        return;\n      }\n\n      const message = event.data;\n      switch (message.msg) {\n        case 'devtools::connect':\n          if (devtoolsStatus !== 'disconnected') {\n            break;\n          }\n          devtoolsStatus = 'connected';\n          sendToPanel({\n            msg: 'doc::available',\n            docKey: doc.getKey(),\n          });\n          logger.info(`[YD] Devtools connected. Doc: ${doc.getKey()}`);\n          break;\n        case 'devtools::disconnect':\n          devtoolsStatus = 'disconnected';\n          logger.info(`[YD] Devtools disconnected. Doc: ${doc.getKey()}`);\n          break;\n        case 'devtools::subscribe':\n          devtoolsStatus = 'synced';\n          sendToPanel({\n            msg: 'doc::sync::full',\n            docKey: doc.getKey(),\n            events: transactionEventsByDocKey.get(doc.getKey())!,\n          });\n          logger.info(`[YD] Devtools subscribed. Doc: ${doc.getKey()}`);\n          break;\n      }\n    },\n  );\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Long from 'long';\nimport type { WatchDocumentResponse } from '@yorkie-js-sdk/src/api/yorkie/v1/yorkie_pb';\nimport { DocEventType as PbDocEventType } from '@yorkie-js-sdk/src/api/yorkie/v1/resources_pb';\nimport { logger, LogLevel } from '@yorkie-js-sdk/src/util/logger';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport { deepcopy } from '@yorkie-js-sdk/src/util/object';\nimport {\n  Observer,\n  Observable,\n  createObservable,\n  Unsubscribe,\n  ErrorFn,\n  CompleteFn,\n  NextFn,\n} from '@yorkie-js-sdk/src/util/observable';\nimport {\n  ActorID,\n  InitialActorID,\n} from '@yorkie-js-sdk/src/document/time/actor_id';\nimport {\n  Change,\n  ChangeStruct,\n} from '@yorkie-js-sdk/src/document/change/change';\nimport {\n  ChangeID,\n  InitialChangeID,\n} from '@yorkie-js-sdk/src/document/change/change_id';\nimport { ChangeContext } from '@yorkie-js-sdk/src/document/change/context';\nimport { converter } from '@yorkie-js-sdk/src/api/converter';\nimport { ChangePack } from '@yorkie-js-sdk/src/document/change/change_pack';\nimport { CRDTRoot } from '@yorkie-js-sdk/src/document/crdt/root';\nimport { CRDTObject } from '@yorkie-js-sdk/src/document/crdt/object';\nimport {\n  createJSON,\n  JSONElement,\n  LeafElement,\n  BaseArray,\n  BaseObject,\n} from '@yorkie-js-sdk/src/document/json/element';\nimport {\n  Checkpoint,\n  InitialCheckpoint,\n} from '@yorkie-js-sdk/src/document/change/checkpoint';\nimport { TimeTicket } from '@yorkie-js-sdk/src/document/time/ticket';\nimport {\n  OpSource,\n  OperationInfo,\n  ObjectOperationInfo,\n  TextOperationInfo,\n  CounterOperationInfo,\n  ArrayOperationInfo,\n  TreeOperationInfo,\n  Operation,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nimport { JSONObject } from '@yorkie-js-sdk/src/document/json/object';\nimport { Counter } from '@yorkie-js-sdk/src/document/json/counter';\nimport { Text } from '@yorkie-js-sdk/src/document/json/text';\nimport { Tree } from '@yorkie-js-sdk/src/document/json/tree';\nimport {\n  Presence,\n  PresenceChangeType,\n} from '@yorkie-js-sdk/src/document/presence/presence';\nimport { History, HistoryOperation } from '@yorkie-js-sdk/src/document/history';\nimport { setupDevtools } from '@yorkie-js-sdk/src/devtools';\nimport * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\n/**\n * `DocumentOptions` are the options to create a new document.\n *\n * @public\n */\nexport interface DocumentOptions {\n  /**\n   * `disableGC` disables garbage collection if true.\n   */\n  disableGC?: boolean;\n\n  /**\n   * `enableDevtools` enables devtools if true.\n   */\n  enableDevtools?: boolean;\n}\n\n/**\n * `DocumentStatus` represents the status of the document.\n * @public\n */\nexport enum DocumentStatus {\n  /**\n   * Detached means that the document is not attached to the client.\n   * The actor of the ticket is created without being assigned.\n   */\n  Detached = 'detached',\n  /**\n   * Attached means that this document is attached to the client.\n   * The actor of the ticket is created with being assigned by the client.\n   */\n  Attached = 'attached',\n  /**\n   * Removed means that this document is removed. If the document is removed,\n   * it cannot be edited.\n   */\n  Removed = 'removed',\n}\n\n/**\n * `DocEventType` represents the type of the event that occurs in `Document`.\n * @public\n */\nexport enum DocEventType {\n  /**\n   * status changed event type\n   */\n  StatusChanged = 'status-changed',\n\n  /**\n   * `ConnectionChanged` means that the watch stream connection status has changed.\n   */\n  ConnectionChanged = 'connection-changed',\n\n  /**\n   * `SyncStatusChanged` means that the document sync status has changed.\n   */\n  SyncStatusChanged = 'sync-status-changed',\n\n  /**\n   * snapshot event type\n   */\n  Snapshot = 'snapshot',\n\n  /**\n   * local document change event type\n   */\n  LocalChange = 'local-change',\n\n  /**\n   * remote document change event type\n   */\n  RemoteChange = 'remote-change',\n\n  /**\n   * `Initialized` means that online clients have been loaded from the server.\n   */\n  Initialized = 'initialized',\n\n  /**\n   * `Watched` means that the client has established a connection with the server,\n   * enabling real-time synchronization.\n   */\n  Watched = 'watched',\n\n  /**\n   * `Unwatched` means that the connection has been disconnected.\n   */\n  Unwatched = 'unwatched',\n\n  /**\n   * `PresenceChanged` means that the presences of the client has updated.\n   */\n  PresenceChanged = 'presence-changed',\n}\n\n/**\n * `DocEvent` is an event that occurs in `Document`. It can be delivered\n * using `Document.subscribe()`.\n *\n * @public\n */\nexport type DocEvent<P extends Indexable = Indexable, T = OperationInfo> =\n  | StatusChangedEvent\n  | ConnectionChangedEvent\n  | SyncStatusChangedEvent\n  | SnapshotEvent\n  | LocalChangeEvent<T, P>\n  | RemoteChangeEvent<T, P>\n  | InitializedEvent<P>\n  | WatchedEvent<P>\n  | UnwatchedEvent<P>\n  | PresenceChangedEvent<P>;\n\n/**\n * `TransactionEvent` represents document events that occur within\n * a single transaction (e.g., doc.update).\n */\nexport type TransactionEvent<P extends Indexable = Indexable> = Array<\n  DocEvent<P>\n>;\n\n/**\n * @internal\n */\nexport interface BaseDocEvent {\n  type: DocEventType;\n}\n\n/**\n * `StatusChangedEvent` is an event that occurs when the status of a document changes.\n *\n * @public\n */\nexport interface StatusChangedEvent extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.StatusChanged\n   */\n  type: DocEventType.StatusChanged;\n  source: OpSource;\n  value:\n    | { status: DocumentStatus.Attached; actorID: string }\n    | { status: DocumentStatus.Detached }\n    | { status: DocumentStatus.Removed };\n}\n\n/**\n * `StreamConnectionStatus` represents whether the stream connection is connected or not.\n * @public\n */\nexport enum StreamConnectionStatus {\n  /**\n   * `Connected` means that the stream connection is connected.\n   */\n  Connected = 'connected',\n  /**\n   * `Disconnected` means that the stream connection is disconnected.\n   */\n  Disconnected = 'disconnected',\n}\n\n/**\n * `ConnectionChangedEvent` is an event that occurs when the stream connection state changes.\n *\n * @public\n */\nexport interface ConnectionChangedEvent extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.ConnectionChanged\n   */\n  type: DocEventType.ConnectionChanged;\n  value: StreamConnectionStatus;\n}\n\n/**\n * `DocumentSyncStatus` represents the result of synchronizing the document with the server.\n * @public\n */\nexport enum DocumentSyncStatus {\n  /**\n   * `Synced` means that document synced successfully.\n   */\n  Synced = 'synced',\n  /**\n   * `SyncFiled` means that document synchronization has failed.\n   */\n  SyncFailed = 'sync-failed',\n}\n\n/**\n * `SyncStatusChangedEvent` is an event that occurs when document is synced with the server.\n *\n * @public\n */\nexport interface SyncStatusChangedEvent extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.SyncStatusChanged\n   */\n  type: DocEventType.SyncStatusChanged;\n  value: DocumentSyncStatus;\n}\n\n/**\n * `SnapshotEvent` is an event that occurs when a snapshot is received from\n * the server.\n *\n * @public\n */\nexport interface SnapshotEvent extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.Snapshot\n   */\n  type: DocEventType.Snapshot;\n  source: OpSource.Remote;\n  value: { snapshot?: string; serverSeq: string };\n}\n\n/**\n * `ChangeInfo` represents the modifications made during a document update\n * and the message passed.\n */\nexport interface ChangeInfo<T = OperationInfo> {\n  message: string;\n  operations: Array<T>;\n  actor: ActorID;\n  clientSeq: number;\n  serverSeq: string;\n}\n\n/**\n * `LocalChangeEvent` is an event that occurs when the document is changed\n * by local changes.\n *\n * @public\n */\nexport interface LocalChangeEvent<\n  T = OperationInfo,\n  P extends Indexable = Indexable,\n> extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.LocalChange\n   */\n  type: DocEventType.LocalChange;\n  source: OpSource.Local | OpSource.UndoRedo;\n  value: ChangeInfo<T>;\n  rawChange?: ChangeStruct<P>;\n}\n\n/**\n * `RemoteChangeEvent` is an event that occurs when the document is changed\n * by remote changes.\n *\n * @public\n */\nexport interface RemoteChangeEvent<\n  T = OperationInfo,\n  P extends Indexable = Indexable,\n> extends BaseDocEvent {\n  /**\n   * enum {@link DocEventType}.RemoteChange\n   */\n  type: DocEventType.RemoteChange;\n  source: OpSource.Remote;\n  value: ChangeInfo<T>;\n  rawChange?: ChangeStruct<P>;\n}\n\nexport interface InitializedEvent<P extends Indexable> extends BaseDocEvent {\n  type: DocEventType.Initialized;\n  source: OpSource.Local;\n  value: Array<{ clientID: ActorID; presence: P }>;\n}\n\nexport interface WatchedEvent<P extends Indexable> extends BaseDocEvent {\n  type: DocEventType.Watched;\n  source: OpSource.Remote;\n  value: { clientID: ActorID; presence: P };\n}\n\nexport interface UnwatchedEvent<P extends Indexable> extends BaseDocEvent {\n  type: DocEventType.Unwatched;\n  source: OpSource.Remote;\n  value: { clientID: ActorID; presence: P };\n}\n\nexport interface PresenceChangedEvent<P extends Indexable>\n  extends BaseDocEvent {\n  type: DocEventType.PresenceChanged;\n  source: OpSource;\n  value: { clientID: ActorID; presence: P };\n}\n\ntype DocEventCallbackMap<P extends Indexable> = {\n  default: NextFn<\n    | SnapshotEvent\n    | LocalChangeEvent<OperationInfo, P>\n    | RemoteChangeEvent<OperationInfo, P>\n  >;\n  presence: NextFn<\n    | InitializedEvent<P>\n    | WatchedEvent<P>\n    | UnwatchedEvent<P>\n    | PresenceChangedEvent<P>\n  >;\n  'my-presence': NextFn<InitializedEvent<P> | PresenceChangedEvent<P>>;\n  others: NextFn<WatchedEvent<P> | UnwatchedEvent<P> | PresenceChangedEvent<P>>;\n  connection: NextFn<ConnectionChangedEvent>;\n  status: NextFn<StatusChangedEvent>;\n  sync: NextFn<SyncStatusChangedEvent>;\n  all: NextFn<TransactionEvent<P>>;\n};\nexport type DocEventTopic = keyof DocEventCallbackMap<never>;\nexport type DocEventCallback<P extends Indexable> =\n  DocEventCallbackMap<P>[DocEventTopic];\n\n/**\n * Indexable key, value\n * @public\n */\nexport type Indexable = Record<string, any>;\n\n/**\n * Document key type\n * @public\n */\nexport type DocumentKey = string;\n\n/**\n * `OperationInfoOfElement` represents the type of the operation info of the given element.\n */\ntype OperationInfoOfElement<TElement> = TElement extends Text\n  ? TextOperationInfo\n  : TElement extends Counter\n  ? CounterOperationInfo\n  : TElement extends Tree\n  ? TreeOperationInfo\n  : TElement extends BaseArray<any>\n  ? ArrayOperationInfo\n  : TElement extends BaseObject<any>\n  ? ObjectOperationInfo\n  : OperationInfo;\n\n/**\n * `OperationInfoOfInternal` represents the type of the operation info of the\n * given path in the Document.subscribe.\n *\n * TODO(easylogic): If the parent is optional, children cannot be inferred.\n * TODO(easylogic): Currently, the below cases of Document.subscribe are confused.\n * ```\n *  type DocType = { obj: { key: string }, text: Text }\n *  $.obj.text ->> obj's operations\n *  $.text ->> text's operations\n * ```\n */\ntype OperationInfoOfInternal<\n  TElement,\n  TKeyOrPath,\n  TDepth extends number = 0,\n> = TDepth extends 0\n  ? TElement\n  : TKeyOrPath extends `${infer TFirst}.${infer TRest}`\n  ? TFirst extends keyof TElement\n    ? TElement[TFirst] extends BaseArray<unknown>\n      ? OperationInfoOfInternal<\n          TElement[TFirst],\n          number,\n          DecreasedDepthOf<TDepth>\n        >\n      : OperationInfoOfInternal<\n          TElement[TFirst],\n          TRest,\n          DecreasedDepthOf<TDepth>\n        >\n    : OperationInfo\n  : TKeyOrPath extends keyof TElement\n  ? TElement[TKeyOrPath] extends BaseArray<unknown>\n    ? ArrayOperationInfo\n    : OperationInfoOfElement<TElement[TKeyOrPath]>\n  : OperationInfo;\n\n/**\n * `DecreasedDepthOf` represents the type of the decreased depth of the given depth.\n */\ntype DecreasedDepthOf<Depth extends number = 0> = Depth extends 10\n  ? 9\n  : Depth extends 9\n  ? 8\n  : Depth extends 8\n  ? 7\n  : Depth extends 7\n  ? 6\n  : Depth extends 6\n  ? 5\n  : Depth extends 5\n  ? 4\n  : Depth extends 4\n  ? 3\n  : Depth extends 3\n  ? 2\n  : Depth extends 2\n  ? 1\n  : Depth extends 1\n  ? 0\n  : -1;\n\n/**\n * `PathOfInternal` represents the type of the path of the given element.\n */\ntype PathOfInternal<\n  TElement,\n  Prefix extends string = '',\n  Depth extends number = 0,\n> = Depth extends 0\n  ? Prefix\n  : TElement extends Record<string, any>\n  ? {\n      [TKey in keyof TElement]: TElement[TKey] extends LeafElement\n        ? `${Prefix}${TKey & string}`\n        : TElement[TKey] extends BaseArray<infer TArrayElement>\n        ?\n            | `${Prefix}${TKey & string}`\n            | `${Prefix}${TKey & string}.${number}`\n            | PathOfInternal<\n                TArrayElement,\n                `${Prefix}${TKey & string}.${number}.`,\n                DecreasedDepthOf<Depth>\n              >\n        :\n            | `${Prefix}${TKey & string}`\n            | PathOfInternal<\n                TElement[TKey],\n                `${Prefix}${TKey & string}.`,\n                DecreasedDepthOf<Depth>\n              >;\n    }[keyof TElement]\n  : Prefix extends `${infer TRest}.`\n  ? TRest\n  : Prefix;\n\n/**\n * `OperationInfoOf` represents the type of the operation info of the given\n * path in the Document.subscribe. It is used to remove the `$.` prefix.\n */\ntype OperationInfoOf<\n  TDocument,\n  TKey extends string = '',\n  TDepth extends number = 10,\n> = TKey extends `$.${infer TPath}`\n  ? OperationInfoOfInternal<TDocument, TPath, TDepth>\n  : OperationInfoOfInternal<TDocument, TKey, TDepth>;\n\n/**\n * `PathOf` represents the type of the all possible paths in the Document.subscribe.\n */\ntype PathOf<TDocument, Depth extends number = 10> = PathOfInternal<\n  TDocument,\n  '$.',\n  Depth\n>;\n\n/**\n * `Document` is a CRDT-based data type. We can represent the model\n * of the application and edit it even while offline.\n *\n * @public\n */\nexport class Document<T, P extends Indexable = Indexable> {\n  private key: DocumentKey;\n  private status: DocumentStatus;\n  private opts: DocumentOptions;\n\n  private changeID: ChangeID;\n  private checkpoint: Checkpoint;\n  private localChanges: Array<Change<P>>;\n\n  private root: CRDTRoot;\n  private clone?: {\n    root: CRDTRoot;\n    presences: Map<ActorID, P>;\n  };\n\n  private eventStream: Observable<TransactionEvent<P>>;\n  private eventStreamObserver!: Observer<TransactionEvent<P>>;\n\n  /**\n   * `onlineClients` is a set of client IDs that are currently online.\n   */\n  private onlineClients: Set<ActorID>;\n\n  /**\n   * `presences` is a map of client IDs to their presence information.\n   */\n  private presences: Map<ActorID, P>;\n\n  /**\n   * `history` is exposed to the user to manage undo/redo operations.\n   */\n  public history;\n\n  /**\n   * `internalHistory` is used to manage undo/redo operations internally.\n   */\n  public internalHistory: History<P>;\n\n  /**\n   * `isUpdating` is whether the document is updating by updater or not. It is\n   * used to prevent the updater from calling undo/redo.\n   */\n  private isUpdating: boolean;\n\n  constructor(key: string, opts?: DocumentOptions) {\n    this.opts = opts || {};\n\n    this.key = key;\n    this.status = DocumentStatus.Detached;\n    this.root = CRDTRoot.create();\n\n    this.changeID = InitialChangeID;\n    this.checkpoint = InitialCheckpoint;\n    this.localChanges = [];\n\n    this.eventStream = createObservable<TransactionEvent<P>>((observer) => {\n      this.eventStreamObserver = observer;\n    });\n\n    this.onlineClients = new Set();\n    this.presences = new Map();\n\n    this.isUpdating = false;\n    this.internalHistory = new History();\n    this.history = {\n      canUndo: this.canUndo.bind(this),\n      canRedo: this.canRedo.bind(this),\n      undo: this.undo.bind(this),\n      redo: this.redo.bind(this),\n    };\n\n    setupDevtools(this);\n  }\n\n  /**\n   * `update` executes the given updater to update this document.\n   */\n  public update(\n    updater: (root: JSONObject<T>, presence: Presence<P>) => void,\n    message?: string,\n  ): void {\n    if (this.getStatus() === DocumentStatus.Removed) {\n      throw new YorkieError(Code.DocumentRemoved, `${this.key} is removed`);\n    }\n\n    // 01. Update the clone object and create a change.\n    this.ensureClone();\n    const actorID = this.changeID.getActorID();\n    const context = ChangeContext.create<P>(\n      this.changeID.next(),\n      this.clone!.root,\n      this.clone!.presences.get(actorID) || ({} as P),\n      message,\n    );\n\n    try {\n      const proxy = createJSON<JSONObject<T>>(\n        context,\n        this.clone!.root.getObject(),\n      );\n\n      if (!this.presences.has(actorID)) {\n        this.clone!.presences.set(actorID, {} as P);\n      }\n\n      // NOTE(hackerwins): The updater should not be able to call undo/redo.\n      // If the updater calls undo/redo, an error will be thrown.\n      this.isUpdating = true;\n      updater(\n        proxy,\n        new Presence(context, this.clone!.presences.get(actorID)!),\n      );\n    } catch (err) {\n      // drop clone because it is contaminated.\n      this.clone = undefined;\n      logger.error(err);\n      throw err;\n    } finally {\n      this.isUpdating = false;\n    }\n\n    // 02. Update the root object and presences from changes.\n    if (context.hasChange()) {\n      if (logger.isEnabled(LogLevel.Trivial)) {\n        logger.trivial(`trying to update a local change: ${this.toJSON()}`);\n      }\n\n      const change = context.getChange();\n      const { opInfos, reverseOps } = change.execute(\n        this.root,\n        this.presences,\n        OpSource.Local,\n      );\n      const reversePresence = context.getReversePresence();\n      if (reversePresence) {\n        reverseOps.push({\n          type: 'presence',\n          value: reversePresence,\n        });\n      }\n\n      this.localChanges.push(change);\n      if (reverseOps.length > 0) {\n        this.internalHistory.pushUndo(reverseOps);\n      }\n      // NOTE(chacha912): Clear redo when a new local operation is applied.\n      if (opInfos.length > 0) {\n        this.internalHistory.clearRedo();\n      }\n      this.changeID = change.getID();\n\n      // 03. Publish the document change event.\n      // NOTE(chacha912): Check opInfos, which represent the actually executed operations.\n      const event: TransactionEvent<P> = [];\n      if (opInfos.length > 0) {\n        event.push({\n          type: DocEventType.LocalChange,\n          source: OpSource.Local,\n          value: {\n            message: change.getMessage() || '',\n            operations: opInfos,\n            actor: actorID,\n            clientSeq: change.getID().getClientSeq(),\n            serverSeq: change.getID().getServerSeq(),\n          },\n          rawChange: this.isEnableDevtools() ? change.toStruct() : undefined,\n        });\n      }\n      if (change.hasPresenceChange()) {\n        event.push({\n          type: DocEventType.PresenceChanged,\n          source: OpSource.Local,\n          value: {\n            clientID: actorID,\n            presence: this.getPresence(actorID)!,\n          },\n        });\n      }\n\n      this.publish(event);\n\n      if (logger.isEnabled(LogLevel.Trivial)) {\n        logger.trivial(`after update a local change: ${this.toJSON()}`);\n      }\n    }\n  }\n\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the document is changed.\n   */\n  public subscribe(\n    next: DocEventCallbackMap<P>['default'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the clients watching the document\n   * establishe or update its presence.\n   */\n  public subscribe(\n    type: 'presence',\n    next: DocEventCallbackMap<P>['presence'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the current client establishes or updates its presence.\n   */\n  public subscribe(\n    type: 'my-presence',\n    next: DocEventCallbackMap<P>['my-presence'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the client establishes or terminates a connection,\n   * or updates its presence.\n   */\n  public subscribe(\n    type: 'others',\n    next: DocEventCallbackMap<P>['others'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the stream connection status changes.\n   */\n  public subscribe(\n    type: 'connection',\n    next: DocEventCallbackMap<P>['connection'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the document status changes.\n   */\n  public subscribe(\n    type: 'status',\n    next: DocEventCallbackMap<P>['status'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the document is synced with the server.\n   */\n  public subscribe(\n    type: 'sync',\n    next: DocEventCallbackMap<P>['sync'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   * The callback will be called when the targetPath or any of its nested values change.\n   */\n  public subscribe<\n    TPath extends PathOf<T>,\n    TOperationInfo extends OperationInfoOf<T, TPath>,\n  >(\n    targetPath: TPath,\n    next: NextFn<\n      LocalChangeEvent<TOperationInfo, P> | RemoteChangeEvent<TOperationInfo, P>\n    >,\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   */\n  public subscribe(\n    type: 'all',\n    next: DocEventCallbackMap<P>['all'],\n    error?: ErrorFn,\n    complete?: CompleteFn,\n  ): Unsubscribe;\n  /**\n   * `subscribe` registers a callback to subscribe to events on the document.\n   */\n  public subscribe<\n    TPath extends PathOf<T>,\n    TOperationInfo extends OperationInfoOf<T, TPath>,\n  >(\n    arg1: TPath | DocEventTopic | DocEventCallbackMap<P>['default'],\n    arg2?:\n      | NextFn<\n          | LocalChangeEvent<TOperationInfo, P>\n          | RemoteChangeEvent<TOperationInfo, P>\n        >\n      | DocEventCallback<P>\n      | ErrorFn,\n    arg3?: ErrorFn | CompleteFn,\n    arg4?: CompleteFn,\n  ): Unsubscribe {\n    if (typeof arg1 === 'string') {\n      if (typeof arg2 !== 'function') {\n        throw new Error('Second argument must be a callback function');\n      }\n      if (arg1 === 'presence') {\n        const callback = arg2 as DocEventCallbackMap<P>['presence'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (\n                docEvent.type !== DocEventType.Initialized &&\n                docEvent.type !== DocEventType.Watched &&\n                docEvent.type !== DocEventType.Unwatched &&\n                docEvent.type !== DocEventType.PresenceChanged\n              ) {\n                continue;\n              }\n\n              callback(docEvent);\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'my-presence') {\n        const callback = arg2 as DocEventCallbackMap<P>['my-presence'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (\n                docEvent.type !== DocEventType.Initialized &&\n                docEvent.type !== DocEventType.PresenceChanged\n              ) {\n                continue;\n              }\n\n              if (\n                docEvent.type === DocEventType.PresenceChanged &&\n                docEvent.value.clientID !== this.changeID.getActorID()\n              ) {\n                continue;\n              }\n\n              callback(docEvent);\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'others') {\n        const callback = arg2 as DocEventCallbackMap<P>['others'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (\n                docEvent.type !== DocEventType.Watched &&\n                docEvent.type !== DocEventType.Unwatched &&\n                docEvent.type !== DocEventType.PresenceChanged\n              ) {\n                continue;\n              }\n\n              if (docEvent.value.clientID !== this.changeID.getActorID()) {\n                callback(docEvent);\n              }\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'connection') {\n        const callback = arg2 as DocEventCallbackMap<P>['connection'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (docEvent.type !== DocEventType.ConnectionChanged) {\n                continue;\n              }\n              callback(docEvent);\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'status') {\n        const callback = arg2 as DocEventCallbackMap<P>['status'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (docEvent.type !== DocEventType.StatusChanged) {\n                continue;\n              }\n              callback(docEvent);\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'sync') {\n        const callback = arg2 as DocEventCallbackMap<P>['sync'];\n        return this.eventStream.subscribe(\n          (event) => {\n            for (const docEvent of event) {\n              if (docEvent.type !== DocEventType.SyncStatusChanged) {\n                continue;\n              }\n              callback(docEvent);\n            }\n          },\n          arg3,\n          arg4,\n        );\n      }\n      if (arg1 === 'all') {\n        const callback = arg2 as DocEventCallbackMap<P>['all'];\n        return this.eventStream.subscribe(callback, arg3, arg4);\n      }\n      const target = arg1;\n      const callback = arg2 as NextFn<\n        | LocalChangeEvent<TOperationInfo, P>\n        | RemoteChangeEvent<TOperationInfo, P>\n      >;\n      return this.eventStream.subscribe(\n        (event) => {\n          for (const docEvent of event) {\n            if (\n              docEvent.type !== DocEventType.LocalChange &&\n              docEvent.type !== DocEventType.RemoteChange\n            ) {\n              continue;\n            }\n\n            const targetOps: Array<TOperationInfo> = [];\n            for (const op of docEvent.value.operations) {\n              if (this.isSameElementOrChildOf(op.path, target)) {\n                targetOps.push(op as TOperationInfo);\n              }\n            }\n            targetOps.length &&\n              callback({\n                ...docEvent,\n                value: { ...docEvent.value, operations: targetOps },\n              });\n          }\n        },\n        arg3,\n        arg4,\n      );\n    }\n    if (typeof arg1 === 'function') {\n      const callback = arg1 as DocEventCallbackMap<P>['default'];\n      const error = arg2 as ErrorFn;\n      const complete = arg3 as CompleteFn;\n      return this.eventStream.subscribe(\n        (event) => {\n          for (const docEvent of event) {\n            if (\n              docEvent.type !== DocEventType.Snapshot &&\n              docEvent.type !== DocEventType.LocalChange &&\n              docEvent.type !== DocEventType.RemoteChange\n            ) {\n              continue;\n            }\n\n            callback(docEvent);\n          }\n        },\n        error,\n        complete,\n      );\n    }\n    throw new Error(`\"${arg1}\" is not a valid`);\n  }\n\n  /**\n   * `publish` triggers an event in this document, which can be received by\n   * callback functions from document.subscribe().\n   */\n  public publish(event: TransactionEvent<P>) {\n    if (this.eventStreamObserver) {\n      this.eventStreamObserver.next(event);\n    }\n  }\n\n  private isSameElementOrChildOf(elem: string, parent: string): boolean {\n    if (parent === elem) {\n      return true;\n    }\n\n    const nodePath = elem.split('.');\n    const targetPath = parent.split('.');\n    return targetPath.every((path, index) => path === nodePath[index]);\n  }\n\n  /**\n   * `applyChangePack` applies the given change pack into this document.\n   * 1. Remove local changes applied to server.\n   * 2. Update the checkpoint.\n   * 3. Do Garbage collection.\n   *\n   * @param pack - change pack\n   * @internal\n   */\n  public applyChangePack(pack: ChangePack<P>): void {\n    if (pack.hasSnapshot()) {\n      this.applySnapshot(\n        pack.getCheckpoint().getServerSeq(),\n        pack.getSnapshot(),\n      );\n    } else if (pack.hasChanges()) {\n      this.applyChanges(pack.getChanges(), OpSource.Remote);\n    }\n\n    // 02. Remove local changes applied to server.\n    while (this.localChanges.length) {\n      const change = this.localChanges[0];\n      if (change.getID().getClientSeq() > pack.getCheckpoint().getClientSeq()) {\n        break;\n      }\n      this.localChanges.shift();\n    }\n\n    // 03. Update the checkpoint.\n    this.checkpoint = this.checkpoint.forward(pack.getCheckpoint());\n\n    // 04. Do Garbage collection.\n    this.garbageCollect(pack.getMinSyncedTicket()!);\n\n    // 05. Update the status.\n    if (pack.getIsRemoved()) {\n      this.applyStatus(DocumentStatus.Removed);\n    }\n\n    if (logger.isEnabled(LogLevel.Trivial)) {\n      logger.trivial(`${this.root.toJSON()}`);\n    }\n  }\n\n  /**\n   * `getCheckpoint` returns the checkpoint of this document.\n   *\n   * @internal\n   */\n  public getCheckpoint(): Checkpoint {\n    return this.checkpoint;\n  }\n\n  /**\n   * `getChangeID` returns the change id of this document.\n   *\n   * @internal\n   */\n  public getChangeID(): ChangeID {\n    return this.changeID;\n  }\n\n  /**\n   * `hasLocalChanges` returns whether this document has local changes or not.\n   */\n  public hasLocalChanges(): boolean {\n    return this.localChanges.length > 0;\n  }\n\n  /**\n   * `ensureClone` make a clone of root.\n   *\n   * @internal\n   */\n  public ensureClone(): void {\n    if (this.clone) {\n      return;\n    }\n\n    this.clone = {\n      root: this.root.deepcopy(),\n      presences: deepcopy(this.presences),\n    };\n  }\n\n  /**\n   * `createChangePack` create change pack of the local changes to send to the\n   * remote server.\n   *\n   * @internal\n   */\n  public createChangePack(): ChangePack<P> {\n    const changes = Array.from(this.localChanges);\n    const checkpoint = this.checkpoint.increaseClientSeq(changes.length);\n    return ChangePack.create(this.key, checkpoint, false, changes);\n  }\n\n  /**\n   * `setActor` sets actor into this document. This is also applied in the local\n   * changes the document has.\n   *\n   * @internal\n   */\n  public setActor(actorID: ActorID): void {\n    for (const change of this.localChanges) {\n      change.setActor(actorID);\n    }\n    this.changeID = this.changeID.setActor(actorID);\n\n    // TODO(hackerwins): If the given actorID is not IntialActorID, we need to\n    // update InitialActor of the root and clone.\n  }\n\n  /**\n   * `isEnableDevtools` returns whether devtools is enabled or not.\n   */\n  public isEnableDevtools(): boolean {\n    return !!this.opts.enableDevtools;\n  }\n\n  /**\n   * `getKey` returns the key of this document.\n   */\n  public getKey(): string {\n    return this.key;\n  }\n\n  /**\n   * `getStatus` returns the status of this document.\n   */\n  public getStatus(): DocumentStatus {\n    return this.status;\n  }\n\n  /**\n   * `getClone` return clone object.\n   *\n   * @internal\n   */\n  public getCloneRoot(): CRDTObject | undefined {\n    if (!this.clone) {\n      return;\n    }\n\n    return this.clone.root.getObject();\n  }\n\n  /**\n   * `getRoot` returns a new proxy of cloned root.\n   */\n  public getRoot(): JSONObject<T> {\n    this.ensureClone();\n\n    const context = ChangeContext.create(\n      this.changeID.next(),\n      this.clone!.root,\n      this.clone!.presences.get(this.changeID.getActorID()) || ({} as P),\n    );\n    return createJSON<T>(context, this.clone!.root.getObject());\n  }\n\n  /**\n   * `garbageCollect` purges elements that were removed before the given time.\n   *\n   * @internal\n   */\n  public garbageCollect(ticket: TimeTicket): number {\n    if (this.opts.disableGC) {\n      return 0;\n    }\n\n    if (this.clone) {\n      this.clone.root.garbageCollect(ticket);\n    }\n    return this.root.garbageCollect(ticket);\n  }\n\n  /**\n   * `getRootObject` returns root object.\n   *\n   * @internal\n   */\n  public getRootObject(): CRDTObject {\n    return this.root.getObject();\n  }\n\n  /**\n   * `getGarbageLen` returns the length of elements should be purged.\n   *\n   * @internal\n   */\n  public getGarbageLen(): number {\n    return this.root.getGarbageLen();\n  }\n\n  /**\n   * `getGarbageLenFromClone` returns the length of elements should be purged from clone.\n   */\n  public getGarbageLenFromClone(): number {\n    return this.clone!.root.getGarbageLen();\n  }\n\n  /**\n   * `toJSON` returns the JSON encoding of this document.\n   */\n  public toJSON(): string {\n    return this.root.toJSON();\n  }\n\n  /**\n   * `toSortedJSON` returns the sorted JSON encoding of this document.\n   */\n  public toSortedJSON(): string {\n    return this.root.toSortedJSON();\n  }\n\n  /**\n   * `toJSForTest` returns value with meta data for testing.\n   */\n  public toJSForTest(): Devtools.JSONElement {\n    return {\n      ...this.getRoot().toJSForTest!(),\n      key: 'root',\n    };\n  }\n\n  /**\n   * `applySnapshot` applies the given snapshot into this document.\n   */\n  public applySnapshot(serverSeq: Long, snapshot?: Uint8Array) {\n    const { root, presences } = converter.bytesToSnapshot<P>(snapshot);\n    this.root = new CRDTRoot(root);\n    this.presences = presences;\n    this.changeID = this.changeID.syncLamport(serverSeq);\n\n    // drop clone because it is contaminated.\n    this.clone = undefined;\n\n    this.publish([\n      {\n        type: DocEventType.Snapshot,\n        source: OpSource.Remote,\n        value: {\n          snapshot: this.isEnableDevtools()\n            ? converter.bytesToHex(snapshot)\n            : undefined,\n          serverSeq: serverSeq.toString(),\n        },\n      },\n    ]);\n  }\n\n  /**\n   * `applyChanges` applies the given changes into this document.\n   */\n  public applyChanges(changes: Array<Change<P>>, source: OpSource): void {\n    if (logger.isEnabled(LogLevel.Debug)) {\n      logger.debug(\n        `trying to apply ${changes.length} remote changes.` +\n          `elements:${this.root.getElementMapSize()}, ` +\n          `removeds:${this.root.getGarbageElementSetSize()}`,\n      );\n    }\n    if (logger.isEnabled(LogLevel.Trivial)) {\n      logger.trivial(\n        changes\n          .map(\n            (change) =>\n              `${change.getID().toTestString()}\\t${change.toTestString()}`,\n          )\n          .join('\\n'),\n      );\n    }\n\n    for (const change of changes) {\n      this.applyChange(change, source);\n    }\n\n    if (logger.isEnabled(LogLevel.Debug)) {\n      logger.debug(\n        `after appling ${changes.length} remote changes.` +\n          `elements:${this.root.getElementMapSize()}, ` +\n          ` removeds:${this.root.getGarbageElementSetSize()}`,\n      );\n    }\n  }\n\n  /**\n   * `applyChange` applies the given change into this document.\n   */\n  public applyChange(change: Change<P>, source: OpSource) {\n    this.ensureClone();\n    change.execute(this.clone!.root, this.clone!.presences, source);\n\n    const event: TransactionEvent<P> = [];\n    const actorID = change.getID().getActorID();\n    if (change.hasPresenceChange() && this.onlineClients.has(actorID)) {\n      const presenceChange = change.getPresenceChange()!;\n      switch (presenceChange.type) {\n        case PresenceChangeType.Put:\n          // NOTE(chacha912): When the user exists in onlineClients, but\n          // their presence was initially absent, we can consider that we have\n          // received their initial presence, so trigger the 'watched' event.\n\n          event.push(\n            this.presences.has(actorID)\n              ? {\n                  type: DocEventType.PresenceChanged,\n                  source,\n                  value: {\n                    clientID: actorID,\n                    presence: presenceChange.presence,\n                  },\n                }\n              : {\n                  type: DocEventType.Watched,\n                  source: OpSource.Remote,\n                  value: {\n                    clientID: actorID,\n                    presence: presenceChange.presence,\n                  },\n                },\n          );\n          break;\n        case PresenceChangeType.Clear:\n          // NOTE(chacha912): When the user exists in onlineClients, but\n          // PresenceChange(clear) is received, we can consider it as detachment\n          // occurring before unwatching.\n          // Detached user is no longer participating in the document, we remove\n          // them from the online clients and trigger the 'unwatched' event.\n          event.push({\n            type: DocEventType.Unwatched,\n            source: OpSource.Remote,\n            value: {\n              clientID: actorID,\n              presence: this.getPresence(actorID)!,\n            },\n          });\n          this.removeOnlineClient(actorID);\n          break;\n        default:\n          break;\n      }\n    }\n\n    const { opInfos } = change.execute(this.root, this.presences, source);\n    this.changeID = this.changeID.syncLamport(change.getID().getLamport());\n    if (opInfos.length > 0) {\n      const rawChange = this.isEnableDevtools() ? change.toStruct() : undefined;\n      event.push(\n        source === OpSource.Remote\n          ? {\n              type: DocEventType.RemoteChange,\n              source,\n              value: {\n                actor: actorID,\n                clientSeq: change.getID().getClientSeq(),\n                serverSeq: change.getID().getServerSeq(),\n                message: change.getMessage() || '',\n                operations: opInfos,\n              },\n              rawChange,\n            }\n          : {\n              type: DocEventType.LocalChange,\n              source,\n              value: {\n                actor: actorID,\n                clientSeq: change.getID().getClientSeq(),\n                serverSeq: change.getID().getServerSeq(),\n                message: change.getMessage() || '',\n                operations: opInfos,\n              },\n              rawChange,\n            },\n      );\n    }\n    // DocEvent should be emitted synchronously with applying changes.\n    // This is because 3rd party model should be synced with the Document\n    // after RemoteChange event is emitted. If the event is emitted\n    // asynchronously, the model can be changed and breaking consistency.\n    if (event.length > 0) {\n      this.publish(event);\n    }\n  }\n\n  /**\n   * `applyWatchStream` applies the given watch stream response into this document.\n   */\n  public applyWatchStream(resp: WatchDocumentResponse) {\n    if (resp.body.case === 'initialization') {\n      const clientIDs = resp.body.value.clientIds;\n      const onlineClients: Set<ActorID> = new Set();\n      for (const clientID of clientIDs) {\n        if (clientID === this.changeID.getActorID()) {\n          continue;\n        }\n        onlineClients.add(clientID);\n      }\n      this.setOnlineClients(onlineClients);\n\n      this.publish([\n        {\n          type: DocEventType.Initialized,\n          source: OpSource.Local,\n          value: this.getPresences(),\n        },\n      ]);\n      return;\n    }\n\n    if (resp.body.case === 'event') {\n      const { type, publisher } = resp.body.value;\n      const event: Array<WatchedEvent<P> | UnwatchedEvent<P>> = [];\n      if (type === PbDocEventType.DOCUMENT_WATCHED) {\n        this.addOnlineClient(publisher);\n        // NOTE(chacha912): We added to onlineClients, but we won't trigger watched event\n        // unless we also know their initial presence data at this point.\n        if (this.hasPresence(publisher)) {\n          event.push({\n            type: DocEventType.Watched,\n            source: OpSource.Remote,\n            value: {\n              clientID: publisher,\n              presence: this.getPresence(publisher)!,\n            },\n          });\n        }\n      } else if (type === PbDocEventType.DOCUMENT_UNWATCHED) {\n        const presence = this.getPresence(publisher);\n        this.removeOnlineClient(publisher);\n        // NOTE(chacha912): There is no presence, when PresenceChange(clear) is applied before unwatching.\n        // In that case, the 'unwatched' event is triggered while handling the PresenceChange.\n        if (presence) {\n          event.push({\n            type: DocEventType.Unwatched,\n            source: OpSource.Remote,\n            value: { clientID: publisher, presence },\n          });\n        }\n      }\n\n      if (event.length > 0) {\n        this.publish(event);\n      }\n    }\n  }\n\n  /**\n   * `applyStatus` applies the document status into this document.\n   */\n  public applyStatus(status: DocumentStatus) {\n    this.status = status;\n\n    if (status === DocumentStatus.Detached) {\n      this.setActor(InitialActorID);\n    }\n\n    this.publish([\n      {\n        source:\n          status === DocumentStatus.Removed ? OpSource.Remote : OpSource.Local,\n        type: DocEventType.StatusChanged,\n        value:\n          status === DocumentStatus.Attached\n            ? { status, actorID: this.changeID.getActorID() }\n            : { status },\n      },\n    ]);\n  }\n\n  /**\n   * `applyDocEvent` applies the docEvent into this document.\n   */\n  public applyDocEvent(event: DocEvent<P>) {\n    if (event.type === DocEventType.StatusChanged) {\n      this.applyStatus(event.value.status);\n      if (event.value.status === DocumentStatus.Attached) {\n        this.setActor(event.value.actorID);\n      }\n      return;\n    }\n\n    if (event.type === DocEventType.Snapshot) {\n      const { snapshot, serverSeq } = event.value;\n      if (!snapshot) return;\n      this.applySnapshot(\n        Long.fromString(serverSeq),\n        converter.hexToBytes(snapshot),\n      );\n      return;\n    }\n\n    if (\n      event.type === DocEventType.LocalChange ||\n      event.type === DocEventType.RemoteChange\n    ) {\n      if (!event.rawChange) return;\n      const change = Change.fromStruct<P>(event.rawChange);\n      this.applyChange(change, event.source);\n    }\n\n    if (event.type === DocEventType.Initialized) {\n      const onlineClients: Set<ActorID> = new Set();\n      for (const { clientID, presence } of event.value) {\n        onlineClients.add(clientID);\n        this.presences.set(clientID, presence);\n      }\n      this.setOnlineClients(onlineClients);\n      return;\n    }\n\n    if (event.type === DocEventType.Watched) {\n      const { clientID, presence } = event.value;\n      this.addOnlineClient(clientID);\n      this.presences.set(clientID, presence);\n      return;\n    }\n\n    if (event.type === DocEventType.Unwatched) {\n      const { clientID } = event.value;\n      this.removeOnlineClient(clientID);\n      this.presences.delete(clientID);\n    }\n\n    if (event.type === DocEventType.PresenceChanged) {\n      const { clientID, presence } = event.value;\n      this.presences.set(clientID, presence);\n    }\n  }\n\n  /**\n   * `applyTransactionEvent` applies the given TransactionEvent into this document.\n   */\n  public applyTransactionEvent(event: TransactionEvent<P>) {\n    for (const docEvent of event) {\n      this.applyDocEvent(docEvent);\n    }\n  }\n\n  /**\n   * `getValueByPath` returns the JSONElement corresponding to the given path.\n   */\n  public getValueByPath(path: string): JSONElement | undefined {\n    if (!path.startsWith('$')) {\n      throw new YorkieError(Code.InvalidArgument, `path must start with \"$\"`);\n    }\n    const pathArr = path.split('.');\n    pathArr.shift();\n    let value: JSONObject<any> = this.getRoot();\n    for (const key of pathArr) {\n      value = value[key];\n      if (value === undefined) return undefined;\n    }\n    return value;\n  }\n\n  /**\n   * `setOnlineClients` sets the given online client set.\n   *\n   * @internal\n   */\n  public setOnlineClients(onlineClients: Set<ActorID>) {\n    this.onlineClients = onlineClients;\n  }\n\n  /**\n   * `resetOnlineClients` resets the online client set.\n   *\n   * @internal\n   */\n  public resetOnlineClients() {\n    this.onlineClients = new Set();\n  }\n\n  /**\n   * `addOnlineClient` adds the given clientID into the online client set.\n   *\n   * @internal\n   */\n  public addOnlineClient(clientID: ActorID) {\n    this.onlineClients.add(clientID);\n  }\n\n  /**\n   * `removeOnlineClient` removes the clientID from the online client set.\n   *\n   * @internal\n   */\n  public removeOnlineClient(clientID: ActorID) {\n    this.onlineClients.delete(clientID);\n  }\n\n  /**\n   * `hasPresence` returns whether the given clientID has a presence or not.\n   *\n   * @internal\n   */\n  public hasPresence(clientID: ActorID): boolean {\n    return this.presences.has(clientID);\n  }\n\n  /**\n   * `getMyPresence` returns the presence of the current client.\n   */\n  public getMyPresence(): P {\n    // TODO(chacha912): After resolving the presence initialization issue,\n    // remove default presence.(#608)\n    if (this.status !== DocumentStatus.Attached) {\n      return {} as P;\n    }\n\n    const p = this.presences.get(this.changeID.getActorID())!;\n    return p ? deepcopy(p) : ({} as P);\n  }\n\n  /**\n   * `getPresence` returns the presence of the given clientID.\n   */\n  public getPresence(clientID: ActorID): P | undefined {\n    if (clientID === this.changeID.getActorID()) {\n      return this.getMyPresence();\n    }\n\n    if (!this.onlineClients.has(clientID)) return;\n    const p = this.presences.get(clientID);\n    return p ? deepcopy(p) : undefined;\n  }\n\n  /**\n   * `getPresenceForTest` returns the presence of the given clientID\n   * regardless of whether the client is online or not.\n   *\n   * @internal\n   */\n  public getPresenceForTest(clientID: ActorID): P | undefined {\n    const p = this.presences.get(clientID);\n    return p ? deepcopy(p) : undefined;\n  }\n\n  /**\n   * `getPresences` returns the presences of online clients.\n   */\n  public getPresences(): Array<{ clientID: ActorID; presence: P }> {\n    const presences: Array<{ clientID: ActorID; presence: P }> = [];\n    presences.push({\n      clientID: this.changeID.getActorID(),\n      presence: deepcopy(this.getMyPresence()),\n    });\n\n    for (const clientID of this.onlineClients) {\n      if (this.presences.has(clientID)) {\n        presences.push({\n          clientID,\n          presence: deepcopy(this.presences.get(clientID)!),\n        });\n      }\n    }\n    return presences;\n  }\n\n  /**\n   * `getSelfForTest` returns the client that has attached this document.\n   *\n   * @internal\n   */\n  public getSelfForTest() {\n    return {\n      clientID: this.getChangeID().getActorID(),\n      presence: this.getMyPresence(),\n    };\n  }\n\n  /**\n   * `getOthersForTest` returns all the other clients in online, sorted by clientID.\n   *\n   * @internal\n   */\n  public getOthersForTest() {\n    const myClientID = this.getChangeID().getActorID();\n\n    return this.getPresences()\n      .filter((a) => a.clientID !== myClientID)\n      .sort((a, b) => (a.clientID > b.clientID ? 1 : -1));\n  }\n\n  /**\n   * `canUndo` returns whether there are any operations to undo.\n   */\n  private canUndo(): boolean {\n    return this.internalHistory.hasUndo() && !this.isUpdating;\n  }\n\n  /**\n   * `canRedo` returns whether there are any operations to redo.\n   */\n  private canRedo(): boolean {\n    return this.internalHistory.hasRedo() && !this.isUpdating;\n  }\n\n  /**\n   * `undo` undoes the last operation executed by the current client.\n   * It does not impact operations made by other clients.\n   */\n  private undo(): void {\n    if (this.isUpdating) {\n      throw new Error('Undo is not allowed during an update');\n    }\n    const undoOps = this.internalHistory.popUndo();\n    if (undoOps === undefined) {\n      throw new Error('There is no operation to be undone');\n    }\n\n    this.ensureClone();\n    // TODO(chacha912): After resolving the presence initialization issue,\n    // remove default presence.(#608)\n    const context = ChangeContext.create<P>(\n      this.changeID.next(),\n      this.clone!.root,\n      this.clone!.presences.get(this.changeID.getActorID()) || ({} as P),\n    );\n\n    // apply undo operation in the context to generate a change\n    for (const undoOp of undoOps) {\n      if (!(undoOp instanceof Operation)) {\n        // apply presence change to the context\n        const presence = new Presence<P>(\n          context,\n          deepcopy(this.clone!.presences.get(this.changeID.getActorID())!),\n        );\n        presence.set(undoOp.value, { addToHistory: true });\n        continue;\n      }\n      const ticket = context.issueTimeTicket();\n      undoOp.setExecutedAt(ticket);\n      context.push(undoOp);\n    }\n\n    const change = context.getChange();\n    change.execute(this.clone!.root, this.clone!.presences, OpSource.UndoRedo);\n\n    const { opInfos, reverseOps } = change.execute(\n      this.root,\n      this.presences,\n      OpSource.UndoRedo,\n    );\n    const reversePresence = context.getReversePresence();\n    if (reversePresence) {\n      reverseOps.push({\n        type: 'presence',\n        value: reversePresence,\n      });\n    }\n    if (reverseOps.length > 0) {\n      this.internalHistory.pushRedo(reverseOps);\n    }\n\n    // NOTE(chacha912): When there is no applied operation or presence\n    // during undo/redo, skip propagating change remotely.\n    if (!change.hasPresenceChange() && opInfos.length === 0) {\n      return;\n    }\n\n    this.localChanges.push(change);\n    this.changeID = change.getID();\n    const actorID = this.changeID.getActorID();\n    const event: TransactionEvent<P> = [];\n    if (opInfos.length > 0) {\n      event.push({\n        type: DocEventType.LocalChange,\n        source: OpSource.UndoRedo,\n        value: {\n          message: change.getMessage() || '',\n          operations: opInfos,\n          actor: actorID,\n          clientSeq: change.getID().getClientSeq(),\n          serverSeq: change.getID().getServerSeq(),\n        },\n        rawChange: this.isEnableDevtools() ? change.toStruct() : undefined,\n      });\n    }\n    if (change.hasPresenceChange()) {\n      event.push({\n        type: DocEventType.PresenceChanged,\n        source: OpSource.UndoRedo,\n        value: {\n          clientID: actorID,\n          presence: this.getPresence(actorID)!,\n        },\n      });\n    }\n    this.publish(event);\n  }\n\n  /**\n   * `redo` redoes the last operation executed by the current client.\n   * It does not impact operations made by other clients.\n   */\n  private redo(): void {\n    if (this.isUpdating) {\n      throw new Error('Redo is not allowed during an update');\n    }\n\n    const redoOps = this.internalHistory.popRedo();\n    if (redoOps === undefined) {\n      throw new Error('There is no operation to be redone');\n    }\n\n    this.ensureClone();\n    const context = ChangeContext.create<P>(\n      this.changeID.next(),\n      this.clone!.root,\n      this.clone!.presences.get(this.changeID.getActorID()) || ({} as P),\n    );\n\n    // apply redo operation in the context to generate a change\n    for (const redoOp of redoOps) {\n      if (!(redoOp instanceof Operation)) {\n        // apply presence change to the context\n        const presence = new Presence<P>(\n          context,\n          deepcopy(this.clone!.presences.get(this.changeID.getActorID())!),\n        );\n        presence.set(redoOp.value, { addToHistory: true });\n        continue;\n      }\n      const ticket = context.issueTimeTicket();\n      redoOp.setExecutedAt(ticket);\n      context.push(redoOp);\n    }\n\n    const change = context.getChange();\n    change.execute(this.clone!.root, this.clone!.presences, OpSource.UndoRedo);\n\n    const { opInfos, reverseOps } = change.execute(\n      this.root,\n      this.presences,\n      OpSource.UndoRedo,\n    );\n    const reversePresence = context.getReversePresence();\n    if (reversePresence) {\n      reverseOps.push({\n        type: 'presence',\n        value: reversePresence,\n      });\n    }\n    if (reverseOps.length > 0) {\n      this.internalHistory.pushUndo(reverseOps);\n    }\n\n    // NOTE(chacha912): When there is no applied operation or presence\n    // during undo/redo, skip propagating change remotely.\n    if (!change.hasPresenceChange() && opInfos.length === 0) {\n      return;\n    }\n\n    this.localChanges.push(change);\n    this.changeID = change.getID();\n    const actorID = this.changeID.getActorID();\n    const event: TransactionEvent<P> = [];\n    if (opInfos.length > 0) {\n      event.push({\n        type: DocEventType.LocalChange,\n        source: OpSource.UndoRedo,\n        value: {\n          message: change.getMessage() || '',\n          operations: opInfos,\n          actor: actorID,\n          clientSeq: change.getID().getClientSeq(),\n          serverSeq: change.getID().getServerSeq(),\n        },\n        rawChange: this.isEnableDevtools() ? change.toStruct() : undefined,\n      });\n    }\n    if (change.hasPresenceChange()) {\n      event.push({\n        type: DocEventType.PresenceChanged,\n        source: OpSource.UndoRedo,\n        value: {\n          clientID: actorID,\n          presence: this.getPresence(actorID)!,\n        },\n      });\n    }\n    this.publish(event);\n  }\n\n  /**\n   * `getUndoStackForTest` returns the undo stack for test.\n   */\n  public getUndoStackForTest(): Array<Array<HistoryOperation<P>>> {\n    return this.internalHistory.getUndoStackForTest();\n  }\n\n  /**\n   * `getRedoStackForTest` returns the redo stack for test.\n   */\n  public getRedoStackForTest(): Array<Array<HistoryOperation<P>>> {\n    return this.internalHistory.getRedoStackForTest();\n  }\n}\n","/*\n * Copyright 2021 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Interceptor } from '@connectrpc/connect';\n\n/**\n * `createAuthInterceptor` creates an interceptor to add the Authorization header for each\n * request.\n */\nexport function createAuthInterceptor(\n  apiKey?: string,\n  token?: string,\n): Interceptor {\n  return (next) => async (req) => {\n    if (apiKey) {\n      req.header.set('x-api-key', apiKey);\n    }\n    if (token) {\n      req.header.set('authorization', token);\n    }\n    return await next(req);\n  };\n}\n","/*\n * Copyright 2021 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport pkg from '../../package.json';\nimport { Interceptor } from '@connectrpc/connect';\n\n/**\n * `createMetricInterceptor` creates an interceptor to add the x-yorkie-user-agent header for each\n * request.\n */\nexport function createMetricInterceptor(): Interceptor {\n  return (next) => async (req) => {\n    req.header.set('x-yorkie-user-agent', pkg.name + '/' + pkg.version);\n    return await next(req);\n  };\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nimport {\n  createPromiseClient,\n  PromiseClient,\n  ConnectError,\n  Code as ConnectErrorCode,\n} from '@connectrpc/connect';\nimport { createGrpcWebTransport } from '@connectrpc/connect-web';\nimport { YorkieService } from '@yorkie-js-sdk/src/api/yorkie/v1/yorkie_connect';\nimport { WatchDocumentResponse } from '@yorkie-js-sdk/src/api/yorkie/v1/yorkie_pb';\nimport { DocEventType as PbDocEventType } from '@yorkie-js-sdk/src/api/yorkie/v1/resources_pb';\nimport { converter } from '@yorkie-js-sdk/src/api/converter';\nimport { Code, YorkieError } from '@yorkie-js-sdk/src/util/error';\nimport { logger } from '@yorkie-js-sdk/src/util/logger';\nimport { uuid } from '@yorkie-js-sdk/src/util/uuid';\nimport { Attachment, WatchStream } from '@yorkie-js-sdk/src/client/attachment';\nimport {\n  Document,\n  DocumentKey,\n  DocumentStatus,\n  Indexable,\n  DocEventType,\n  StreamConnectionStatus,\n  DocumentSyncStatus,\n} from '@yorkie-js-sdk/src/document/document';\nimport { OpSource } from '@yorkie-js-sdk/src/document/operation/operation';\nimport { createAuthInterceptor } from '@yorkie-js-sdk/src/client/auth_interceptor';\nimport { createMetricInterceptor } from '@yorkie-js-sdk/src/client/metric_interceptor';\n\n/**\n * `SyncMode` defines synchronization modes for the PushPullChanges API.\n * @public\n */\nexport enum SyncMode {\n  /**\n   * `Manual` mode indicates that changes are not automatically pushed or pulled.\n   */\n  Manual = 'manual',\n\n  /**\n   * `Realtime` mode indicates that changes are automatically pushed and pulled.\n   */\n  Realtime = 'realtime',\n\n  /**\n   * `RealtimePushOnly` mode indicates that only local changes are automatically pushed.\n   */\n  RealtimePushOnly = 'realtime-pushonly',\n\n  /**\n   * `RealtimeSyncOff` mode indicates that changes are not automatically pushed or pulled,\n   * but the watch stream is kept active.\n   */\n  RealtimeSyncOff = 'realtime-syncoff',\n}\n\n/**\n * `ClientStatus` represents the status of the client.\n * @public\n */\nexport enum ClientStatus {\n  /**\n   * `Deactivated` means that the client is not activated. It is the initial\n   * status of the client. If the client is deactivated, all `Document`s of the\n   * client are also not used.\n   */\n  Deactivated = 'deactivated',\n\n  /**\n   * `Activated` means that the client is activated. If the client is activated,\n   * all `Document`s of the client are also ready to be used.\n   */\n  Activated = 'activated',\n}\n\n/**\n * `ClientOptions` are user-settable options used when defining clients.\n *\n * @public\n */\nexport interface ClientOptions {\n  /**\n   * `key` is the client key. It is used to identify the client.\n   * If not set, a random key is generated.\n   */\n  key?: string;\n\n  /**\n   * `apiKey` is the API key of the project. It is used to identify the project.\n   * If not set, API key of the default project is used.\n   */\n  apiKey?: string;\n\n  /**\n   * `token` is the authentication token of this client. It is used to identify\n   * the user of the client.\n   */\n  token?: string;\n\n  /**\n   * `syncLoopDuration` is the duration of the sync loop. After each sync loop,\n   * the client waits for the duration to next sync. The default value is\n   * `50`(ms).\n   */\n  syncLoopDuration?: number;\n\n  /**\n   * `retrySyncLoopDelay` is the delay of the retry sync loop. If the sync loop\n   * fails, the client waits for the delay to retry the sync loop. The default\n   * value is `1000`(ms).\n   */\n  retrySyncLoopDelay?: number;\n\n  /**\n   * `reconnectStreamDelay` is the delay of the reconnect stream. If the stream\n   * is disconnected, the client waits for the delay to reconnect the stream. The\n   * default value is `1000`(ms).\n   */\n  reconnectStreamDelay?: number;\n}\n\n/**\n * `DefaultClientOptions` is the default options for Client.\n */\nconst DefaultClientOptions = {\n  syncLoopDuration: 50,\n  retrySyncLoopDelay: 1000,\n  reconnectStreamDelay: 1000,\n};\n\n/**\n * `Client` is a normal client that can communicate with the server.\n * It has documents and sends changes of the documents in local\n * to the server to synchronize with other replicas in remote.\n *\n * @public\n */\nexport class Client {\n  private id?: ActorID;\n  private key: string;\n  private status: ClientStatus;\n  private attachmentMap: Map<DocumentKey, Attachment<unknown, any>>;\n\n  private apiKey: string;\n  private syncLoopDuration: number;\n  private reconnectStreamDelay: number;\n  private retrySyncLoopDelay: number;\n\n  private rpcClient: PromiseClient<typeof YorkieService>;\n\n  /**\n   * @param rpcAddr - the address of the RPC server.\n   * @param opts - the options of the client.\n   */\n  constructor(rpcAddr: string, opts?: ClientOptions) {\n    opts = opts || DefaultClientOptions;\n\n    this.key = opts.key ? opts.key : uuid();\n    this.status = ClientStatus.Deactivated;\n    this.attachmentMap = new Map();\n\n    // TODO(hackerwins): Consider to group the options as a single object.\n    this.apiKey = opts.apiKey || '';\n    this.syncLoopDuration =\n      opts.syncLoopDuration || DefaultClientOptions.syncLoopDuration;\n    this.reconnectStreamDelay =\n      opts.reconnectStreamDelay || DefaultClientOptions.reconnectStreamDelay;\n    this.retrySyncLoopDelay =\n      opts.retrySyncLoopDelay || DefaultClientOptions.retrySyncLoopDelay;\n\n    // Here we make the client itself, combining the service\n    // definition with the transport.\n    this.rpcClient = createPromiseClient(\n      YorkieService,\n      createGrpcWebTransport({\n        baseUrl: rpcAddr,\n        interceptors: [\n          createAuthInterceptor(opts.apiKey, opts.token),\n          createMetricInterceptor(),\n        ],\n      }),\n    );\n  }\n\n  /**\n   * `activate` activates this client. That is, it registers itself to the server\n   * and receives a unique ID from the server. The given ID is used to\n   * distinguish different clients.\n   */\n  public activate(): Promise<void> {\n    if (this.isActive()) {\n      return Promise.resolve();\n    }\n\n    return this.rpcClient\n      .activateClient(\n        {\n          clientKey: this.key,\n        },\n        { headers: { 'x-shard-key': this.apiKey } },\n      )\n      .then((res) => {\n        this.id = res.clientId;\n        this.status = ClientStatus.Activated;\n        this.runSyncLoop();\n\n        logger.info(`[AC] c:\"${this.getKey()}\" activated, id:\"${this.id}\"`);\n      })\n      .catch((err) => {\n        logger.error(`[AC] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n\n  /**\n   * `deactivate` deactivates this client.\n   */\n  public deactivate(): Promise<void> {\n    if (this.status === ClientStatus.Deactivated) {\n      return Promise.resolve();\n    }\n\n    return this.rpcClient\n      .deactivateClient(\n        {\n          clientId: this.id!,\n        },\n        { headers: { 'x-shard-key': this.apiKey } },\n      )\n      .then(() => {\n        for (const [key, attachment] of this.attachmentMap) {\n          attachment.doc.applyStatus(DocumentStatus.Detached);\n          this.detachInternal(key);\n        }\n\n        this.status = ClientStatus.Deactivated;\n\n        logger.info(`[DC] c\"${this.getKey()}\" deactivated`);\n      })\n      .catch((err) => {\n        logger.error(`[DC] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n\n  /**\n   * `attach` attaches the given document to this client. It tells the server that\n   * this client will synchronize the given document.\n   */\n  public attach<T, P extends Indexable>(\n    doc: Document<T, P>,\n    options: {\n      initialPresence?: P;\n      syncMode?: SyncMode;\n    } = {},\n  ): Promise<Document<T, P>> {\n    if (!this.isActive()) {\n      throw new YorkieError(Code.ClientNotActive, `${this.key} is not active`);\n    }\n    if (doc.getStatus() !== DocumentStatus.Detached) {\n      throw new YorkieError(\n        Code.DocumentNotDetached,\n        `${doc.getKey()} is not detached`,\n      );\n    }\n    doc.setActor(this.id!);\n    doc.update((_, p) => p.set(options.initialPresence || {}));\n\n    const syncMode = options.syncMode ?? SyncMode.Realtime;\n\n    return this.rpcClient\n      .attachDocument(\n        {\n          clientId: this.id!,\n          changePack: converter.toChangePack(doc.createChangePack()),\n        },\n        {\n          headers: { 'x-shard-key': `${this.apiKey}/${doc.getKey()}` },\n        },\n      )\n      .then(async (res) => {\n        const pack = converter.fromChangePack<P>(res.changePack!);\n        doc.applyChangePack(pack);\n        if (doc.getStatus() === DocumentStatus.Removed) {\n          return doc;\n        }\n\n        doc.applyStatus(DocumentStatus.Attached);\n        this.attachmentMap.set(\n          doc.getKey(),\n          new Attachment(\n            this.reconnectStreamDelay,\n            doc,\n            res.documentId,\n            syncMode,\n          ),\n        );\n\n        if (syncMode !== SyncMode.Manual) {\n          await this.runWatchLoop(doc.getKey());\n        }\n\n        logger.info(`[AD] c:\"${this.getKey()}\" attaches d:\"${doc.getKey()}\"`);\n        return doc;\n      })\n      .catch((err) => {\n        logger.error(`[AD] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n\n  /**\n   * `detach` detaches the given document from this client. It tells the\n   * server that this client will no longer synchronize the given document.\n   *\n   * To collect garbage things like CRDT tombstones left on the document, all\n   * the changes should be applied to other replicas before GC time. For this,\n   * if the document is no longer used by this client, it should be detached.\n   */\n  public detach<T, P extends Indexable>(\n    doc: Document<T, P>,\n    options: {\n      removeIfNotAttached?: boolean;\n    } = {},\n  ): Promise<Document<T, P>> {\n    if (!this.isActive()) {\n      throw new YorkieError(Code.ClientNotActive, `${this.key} is not active`);\n    }\n    const attachment = this.attachmentMap.get(doc.getKey());\n    if (!attachment) {\n      throw new YorkieError(\n        Code.DocumentNotAttached,\n        `${doc.getKey()} is not attached`,\n      );\n    }\n    doc.update((_, p) => p.clear());\n\n    return this.rpcClient\n      .detachDocument(\n        {\n          clientId: this.id!,\n          documentId: attachment.docID,\n          changePack: converter.toChangePack(doc.createChangePack()),\n          removeIfNotAttached: options.removeIfNotAttached ?? false,\n        },\n        {\n          headers: { 'x-shard-key': `${this.apiKey}/${doc.getKey()}` },\n        },\n      )\n      .then((res) => {\n        const pack = converter.fromChangePack<P>(res.changePack!);\n        doc.applyChangePack(pack);\n        if (doc.getStatus() !== DocumentStatus.Removed) {\n          doc.applyStatus(DocumentStatus.Detached);\n        }\n        this.detachInternal(doc.getKey());\n\n        logger.info(`[DD] c:\"${this.getKey()}\" detaches d:\"${doc.getKey()}\"`);\n        return doc;\n      })\n      .catch((err) => {\n        logger.error(`[DD] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n\n  /**\n   * `changeRealtimeSync` changes the synchronization mode of the given document.\n   */\n  public async changeSyncMode<T, P extends Indexable>(\n    doc: Document<T, P>,\n    syncMode: SyncMode,\n  ): Promise<Document<T, P>> {\n    if (!this.isActive()) {\n      throw new YorkieError(Code.ClientNotActive, `${this.key} is not active`);\n    }\n\n    const attachment = this.attachmentMap.get(doc.getKey());\n    if (!attachment) {\n      throw new YorkieError(\n        Code.DocumentNotAttached,\n        `${doc.getKey()} is not attached`,\n      );\n    }\n\n    const prevSyncMode = attachment.syncMode;\n    if (prevSyncMode === syncMode) {\n      return doc;\n    }\n\n    attachment.changeSyncMode(syncMode);\n\n    // realtime to manual\n    if (syncMode === SyncMode.Manual) {\n      attachment.cancelWatchStream();\n      return doc;\n    }\n\n    if (syncMode === SyncMode.Realtime) {\n      // NOTE(hackerwins): In non-pushpull mode, the client does not receive change events\n      // from the server. Therefore, we need to set `remoteChangeEventReceived` to true\n      // to sync the local and remote changes. This has limitations in that unnecessary\n      // syncs occur if the client and server do not have any changes.\n      attachment.remoteChangeEventReceived = true;\n    }\n\n    // manual to realtime\n    if (prevSyncMode === SyncMode.Manual) {\n      await this.runWatchLoop(doc.getKey());\n    }\n\n    return doc;\n  }\n\n  /**\n   * `sync` pushes local changes of the attached documents to the server and\n   * receives changes of the remote replica from the server then apply them to\n   * local documents.\n   */\n  public sync<T, P extends Indexable>(\n    doc?: Document<T, P>,\n  ): Promise<Array<Document<T, P>>> {\n    if (!this.isActive()) {\n      throw new YorkieError(Code.ClientNotActive, `${this.key} is not active`);\n    }\n    const promises = [];\n    if (doc) {\n      // prettier-ignore\n      const attachment = this.attachmentMap.get(doc.getKey()) as Attachment<T, P>;\n      if (!attachment) {\n        throw new YorkieError(\n          Code.DocumentNotAttached,\n          `${doc.getKey()} is not attached`,\n        );\n      }\n      promises.push(this.syncInternal(attachment, SyncMode.Realtime));\n    } else {\n      this.attachmentMap.forEach((attachment) => {\n        promises.push(this.syncInternal(attachment, attachment.syncMode));\n      });\n    }\n\n    return Promise.all(promises);\n  }\n\n  /**\n   * `remove` removes the given document.\n   */\n  public remove<T, P extends Indexable>(doc: Document<T, P>): Promise<void> {\n    if (!this.isActive()) {\n      throw new YorkieError(Code.ClientNotActive, `${this.key} is not active`);\n    }\n    const attachment = this.attachmentMap.get(doc.getKey());\n    if (!attachment) {\n      throw new YorkieError(\n        Code.DocumentNotAttached,\n        `${doc.getKey()} is not attached`,\n      );\n    }\n    doc.setActor(this.id!);\n\n    const pbChangePack = converter.toChangePack(doc.createChangePack());\n    pbChangePack.isRemoved = true;\n    return this.rpcClient\n      .removeDocument(\n        {\n          clientId: this.id!,\n          documentId: attachment.docID,\n          changePack: pbChangePack,\n        },\n        {\n          headers: { 'x-shard-key': `${this.apiKey}/${doc.getKey()}` },\n        },\n      )\n      .then((res) => {\n        const pack = converter.fromChangePack<P>(res.changePack!);\n        doc.applyChangePack(pack);\n        this.detachInternal(doc.getKey());\n\n        logger.info(`[RD] c:\"${this.getKey()}\" removes d:\"${doc.getKey()}\"`);\n      })\n      .catch((err) => {\n        logger.error(`[RD] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n\n  /**\n   * `getID` returns a ActorID of client.\n   */\n  public getID(): string | undefined {\n    return this.id;\n  }\n\n  /**\n   * `getKey` returns a key of client.\n   */\n  public getKey(): string {\n    return this.key;\n  }\n\n  /**\n   * `isActive` checks if the client is active.\n   */\n  public isActive(): boolean {\n    return this.status === ClientStatus.Activated;\n  }\n\n  /**\n   * `getStatus` returns the status of this client.\n   */\n  public getStatus(): ClientStatus {\n    return this.status;\n  }\n\n  private runSyncLoop(): void {\n    const doLoop = (): void => {\n      if (!this.isActive()) {\n        logger.debug(`[SL] c:\"${this.getKey()}\" exit sync loop`);\n        return;\n      }\n\n      const syncJobs = [];\n      for (const [, attachment] of this.attachmentMap) {\n        if (attachment.needRealtimeSync()) {\n          attachment.remoteChangeEventReceived = false;\n          syncJobs.push(this.syncInternal(attachment, attachment.syncMode));\n        }\n      }\n\n      Promise.all(syncJobs)\n        .then(() => setTimeout(doLoop, this.syncLoopDuration))\n        .catch((err) => {\n          logger.error(`[SL] c:\"${this.getKey()}\" sync failed:`, err);\n          setTimeout(doLoop, this.retrySyncLoopDelay);\n        });\n    };\n\n    logger.debug(`[SL] c:\"${this.getKey()}\" run sync loop`);\n    doLoop();\n  }\n\n  private async runWatchLoop(docKey: DocumentKey): Promise<void> {\n    const attachment = this.attachmentMap.get(docKey);\n    if (!attachment) {\n      throw new YorkieError(\n        Code.DocumentNotAttached,\n        `${docKey} is not attached`,\n      );\n    }\n\n    return attachment.runWatchLoop(\n      (onDisconnect: () => void): Promise<[WatchStream, AbortController]> => {\n        if (!this.isActive()) {\n          return Promise.reject(\n            new YorkieError(Code.ClientNotActive, `${this.key} is not active`),\n          );\n        }\n\n        const ac = new AbortController();\n        const stream = this.rpcClient.watchDocument(\n          {\n            clientId: this.id!,\n            documentId: attachment.docID,\n          },\n          {\n            headers: { 'x-shard-key': `${this.apiKey}/${docKey}` },\n            signal: ac.signal,\n          },\n        );\n\n        attachment.doc.publish([\n          {\n            type: DocEventType.ConnectionChanged,\n            value: StreamConnectionStatus.Connected,\n          },\n        ]);\n        logger.info(`[WD] c:\"${this.getKey()}\" watches d:\"${docKey}\"`);\n\n        return new Promise((resolve, reject) => {\n          const handleStream = async () => {\n            try {\n              for await (const resp of stream) {\n                this.handleWatchDocumentsResponse(attachment, resp);\n\n                // NOTE(hackerwins): When the first response is received, we need to\n                // resolve the promise to notify that the watch stream is ready.\n                if (resp.body.case === 'initialization') {\n                  resolve([stream, ac]);\n                }\n              }\n            } catch (err) {\n              attachment.doc.resetOnlineClients();\n              attachment.doc.publish([\n                {\n                  type: DocEventType.Initialized,\n                  source: OpSource.Local,\n                  value: attachment.doc.getPresences(),\n                },\n              ]);\n              attachment.doc.publish([\n                {\n                  type: DocEventType.ConnectionChanged,\n                  value: StreamConnectionStatus.Disconnected,\n                },\n              ]);\n              logger.debug(`[WD] c:\"${this.getKey()}\" unwatches`);\n\n              if (\n                err instanceof ConnectError &&\n                err.code != ConnectErrorCode.Canceled\n              ) {\n                onDisconnect();\n              }\n\n              reject(err);\n            }\n          };\n\n          handleStream();\n        });\n      },\n    );\n  }\n\n  private handleWatchDocumentsResponse<T, P extends Indexable>(\n    attachment: Attachment<T, P>,\n    resp: WatchDocumentResponse,\n  ) {\n    if (\n      resp.body.case === 'event' &&\n      resp.body.value.type === PbDocEventType.DOCUMENT_CHANGED\n    ) {\n      attachment.remoteChangeEventReceived = true;\n      return;\n    }\n\n    attachment.doc.applyWatchStream(resp);\n  }\n\n  private detachInternal(docKey: DocumentKey) {\n    // NOTE(hackerwins): If attachment is not found, it means that the document\n    // has been already detached by another routine.\n    // This can happen when detach or remove is called while the watch loop is\n    // running.\n    const attachment = this.attachmentMap.get(docKey);\n    if (!attachment) {\n      return;\n    }\n\n    attachment.cancelWatchStream();\n    logger.debug(`[WD] c:\"${this.getKey()}\" unwatches`);\n\n    this.attachmentMap.delete(docKey);\n  }\n\n  private syncInternal<T, P extends Indexable>(\n    attachment: Attachment<T, P>,\n    syncMode: SyncMode,\n  ): Promise<Document<T, P>> {\n    const { doc, docID } = attachment;\n\n    const reqPack = doc.createChangePack();\n    return this.rpcClient\n      .pushPullChanges(\n        {\n          clientId: this.id!,\n          documentId: docID,\n          changePack: converter.toChangePack(reqPack),\n          pushOnly: syncMode === SyncMode.RealtimePushOnly,\n        },\n        {\n          headers: { 'x-shard-key': `${this.apiKey}/${doc.getKey()}` },\n        },\n      )\n      .then((res) => {\n        const respPack = converter.fromChangePack<P>(res.changePack!);\n\n        // NOTE(chacha912, hackerwins): If syncLoop already executed with\n        // PushPull, ignore the response when the syncMode is PushOnly.\n        if (\n          respPack.hasChanges() &&\n          (attachment.syncMode === SyncMode.RealtimePushOnly ||\n            attachment.syncMode === SyncMode.RealtimeSyncOff)\n        ) {\n          return doc;\n        }\n\n        doc.applyChangePack(respPack);\n        attachment.doc.publish([\n          {\n            type: DocEventType.SyncStatusChanged,\n            value: DocumentSyncStatus.Synced,\n          },\n        ]);\n        // NOTE(chacha912): If a document has been removed, watchStream should\n        // be disconnected to not receive an event for that document.\n        if (doc.getStatus() === DocumentStatus.Removed) {\n          this.detachInternal(doc.getKey());\n        }\n\n        const docKey = doc.getKey();\n        const remoteSize = respPack.getChangeSize();\n        logger.info(\n          `[PP] c:\"${this.getKey()}\" sync d:\"${docKey}\", push:${reqPack.getChangeSize()} pull:${remoteSize} cp:${respPack\n            .getCheckpoint()\n            .toTestString()}`,\n        );\n        return doc;\n      })\n      .catch((err) => {\n        doc.publish([\n          {\n            type: DocEventType.SyncStatusChanged,\n            value: DocumentSyncStatus.SyncFailed,\n          },\n        ]);\n        logger.error(`[PP] c:\"${this.getKey()}\" err :`, err);\n        throw err;\n      });\n  }\n}\n","/*\n * Copyright 2020 The Yorkie Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Client } from '@yorkie-js-sdk/src/client/client';\nimport { Document } from '@yorkie-js-sdk/src/document/document';\nimport { Text } from '@yorkie-js-sdk/src/document/json/text';\nimport { Tree } from '@yorkie-js-sdk/src/document/json/tree';\nimport { Counter } from '@yorkie-js-sdk/src/document/json/counter';\nimport { CounterType } from '@yorkie-js-sdk/src/document/crdt/counter';\nimport * as Devtools from '@yorkie-js-sdk/src/devtools/types';\n\nexport {\n  Client,\n  ClientStatus,\n  SyncMode,\n  type ClientOptions,\n} from '@yorkie-js-sdk/src/client/client';\nexport {\n  DocEventType,\n  type SnapshotEvent,\n  type LocalChangeEvent,\n  type RemoteChangeEvent,\n  type ConnectionChangedEvent,\n  type SyncStatusChangedEvent,\n  type WatchedEvent,\n  type UnwatchedEvent,\n  type PresenceChangedEvent,\n  type InitializedEvent,\n  StreamConnectionStatus,\n  DocumentSyncStatus,\n  DocumentStatus,\n  type Indexable,\n  type DocEvent,\n  type TransactionEvent,\n  Document,\n  type ChangeInfo,\n} from '@yorkie-js-sdk/src/document/document';\nexport {\n  type Observer,\n  type Observable,\n  type NextFn,\n  type ErrorFn,\n  type CompleteFn,\n  type Unsubscribe,\n} from '@yorkie-js-sdk/src/util/observable';\nexport {\n  TimeTicket,\n  type TimeTicketStruct,\n} from '@yorkie-js-sdk/src/document/time/ticket';\nexport { type ActorID } from '@yorkie-js-sdk/src/document/time/actor_id';\nexport type {\n  OperationInfo,\n  TextOperationInfo,\n  CounterOperationInfo,\n  ArrayOperationInfo,\n  ObjectOperationInfo,\n  TreeOperationInfo,\n  AddOpInfo,\n  IncreaseOpInfo,\n  RemoveOpInfo,\n  SetOpInfo,\n  MoveOpInfo,\n  EditOpInfo,\n  StyleOpInfo,\n  TreeEditOpInfo,\n  TreeStyleOpInfo,\n} from '@yorkie-js-sdk/src/document/operation/operation';\nexport { OpSource } from '@yorkie-js-sdk/src/document/operation/operation';\n\nexport {\n  Primitive,\n  type PrimitiveValue,\n} from '@yorkie-js-sdk/src/document/crdt/primitive';\nimport { Primitive } from '@yorkie-js-sdk/src/document/crdt/primitive';\n\nexport {\n  type WrappedElement,\n  type JSONElement,\n} from '@yorkie-js-sdk/src/document/json/element';\nexport { type JSONObject } from '@yorkie-js-sdk/src/document/json/object';\nexport { type JSONArray } from '@yorkie-js-sdk/src/document/json/array';\nexport { Counter } from '@yorkie-js-sdk/src/document/json/counter';\nexport { type CounterValue } from '@yorkie-js-sdk/src/document/crdt/counter';\nexport {\n  Text,\n  type TextPosStruct,\n  type TextPosStructRange,\n} from '@yorkie-js-sdk/src/document/json/text';\nexport {\n  Tree,\n  type TreeNode,\n  type ElementNode,\n  type TextNode,\n  type TreeChange,\n  type TreeChangeType,\n  type CRDTTreeNodeIDStruct,\n  type TreePosStructRange,\n} from '@yorkie-js-sdk/src/document/json/tree';\nexport { Change } from '@yorkie-js-sdk/src/document/change/change';\nexport { converter } from '@yorkie-js-sdk/src/api/converter';\n\nexport type { LogLevel } from '@yorkie-js-sdk/src/util/logger';\nexport { setLogLevel } from '@yorkie-js-sdk/src/util/logger';\n\nexport {\n  EventSourceDevPanel,\n  EventSourceSDK,\n  type PanelToSDKMessage,\n  type SDKToPanelMessage,\n  type FullPanelToSDKMessage,\n  type FullSDKToPanelMessage,\n} from '@yorkie-js-sdk/src/devtools/protocol';\nexport { Devtools };\n\n/**\n * The top-level yorkie namespace with additional properties.\n *\n * In production, this will be called exactly once and the result\n * assigned to the `yorkie` global.\n *\n * e.g) `new yorkie.Client(...);`\n *\n * @public\n */\nexport default {\n  Client,\n  Document,\n  Primitive,\n  Text,\n  Counter,\n  Tree,\n  IntType: CounterType.IntegerCnt,\n  LongType: CounterType.LongCnt,\n};\n\n// TODO(hackerwins): Remove this when we have a better way to expose the API.\nif (typeof globalThis !== 'undefined') {\n  (globalThis as any).yorkie = {\n    Client,\n    Document,\n    Primitive,\n    Text,\n    Counter,\n    Tree,\n    IntType: CounterType.IntegerCnt,\n    LongType: CounterType.LongCnt,\n  };\n}\n"],"names":["Code","name","ScalarType","LongType","TWO_PWR_32_DBL","WireType","makeReadOptions","makeWriteOptions","readScalar","writeScalar","writeEnum","val","a","MethodKind","MethodIdempotency","__asyncValues","this","v","__await","__asyncGenerator","__asyncDelegator","_a","message","header","input","DocEventType","Presence","ChangePack","Checkpoint","Change","TimeTicket","ChangeID","Operation","RHTNode","negate","toUnsigned","PresenceChangeType","compare","LogLevel","OpSource","PrimitiveType","node","maxCreatedAt","TokenType","leftChildNode","offset","start","end","CounterType","PbPresence","PbPresenceChange","PbPresenceChange_ChangeType","PbCheckpoint","PbChangeID","PbTimeTicket","PbValueType","PbJSONElementSimple","PbTextNodeID","PbTextNodePos","PbTreePos","PbTreeNodeID","PbOperation","PbOperation_Set","PbOperation_Add","PbOperation_Move","PbOperation_Remove","PbOperation_Edit","PbOperation_Style","PbOperation_Increase","PbOperation_TreeEdit","PbOperation_TreeStyle","PbChange","PbRHTNode","PbRGANode","PbTextNode","PbNodeAttr","PbTreeNodes","PbTreeNode","PbJSONElement","PbJSONElement_JSONObject","PbJSONElement_JSONArray","PbJSONElement_Primitive","PbJSONElement_Text","PbJSONElement_Counter","PbJSONElement_Tree","PbChangePack","PbSnapshot","createdAt","parent","DocumentStatus","StreamConnectionStatus","DocumentSyncStatus","callback","PbDocEventType","SyncMode","ClientStatus","ConnectErrorCode"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54]}